<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!-- Copyright 2000-2012 Vaadin Ltd                                         -->
<!-- All Rights Reserved                                                    -->
<!-- This work is licensed under a Creative Commons Attribution-NoDerivs    -->
<!-- License (CC-BY-ND) Version 3.0. Full license text is available at:     -->
<!-- http://creativecommons.org/licenses/by-nd/3.0/legalcode                -->
<!-- ====================================================================== -->

<chapter xml:id="addons">
	<title>Using Vaadin Add-ons</title>

	<para>
		This chapter describes the installation of add-on components, themes, containers,
		and other tools from the Vaadin Directory and the use of commercial add-ons
		offered by Vaadin.
	</para>

	<section xml:id="addons.overview">
		<title>Overview</title>

		<para>
            In addition to the components, layouts, themes, and data sources built in into
            the core Vaadin library, many others are available as add-ons.  <link
            xlink:href="http://vaadin.com/directory/">Vaadin Directory</link> provides a
            rich collection of add-ons for Vaadin, and you may find others from
            independent sources. Add-ons are also one way to share your own components
            between projects.
        </para>

		<para>
            Installation of add-ons from Vaadin Directory is simple, just adding an Ivy or
            Maven dependency, or downloading the JAR package and and dropping it in the
            web library folder of the project. Most add-ons include a widget set, which
            you need to compile, but it's usually just a click of a button or a single
            command.
        </para>

        <para>
            After trying out an add-on, you can give some feedback to the author of the
            add-on by rating the add-on with one to five stars and optionally leaving a
            comment. Most add-ons also have a discussion forum thread for user feedback
            and questions.
        </para>

        <para>
            Add-ons available from Vaadin Directory are distributed under different
            licenses, of which some are commercial. While the add-ons can be downloaded
            directly, you should note their license and other terms and conditions. Many
            are offered under a dual licensing agreement so that they can be used in open
            source projects for free, and many have a trial period for closed-source
            development. Commercial Vaadin add-ons distributed under the CVAL license
            require installing a license key as instructed in <xref
            linkend="addons.cval"/>.
        </para>
	</section>

    <section xml:id="addons.downloading">
        <title>Downloading Add-ons from Vaadin Directory</title>

        <para>
            If you are not using Maven or a Maven-compatible dependency manager such as
            Ivy, or want to manage for your libraries manually, you can download add-on
            packages from the details page of an add-on in Vaadin Directory.
        </para>

        <orderedlist>
            <listitem>
                <para>
                    Select the version; some add-ons have several versions available.
                    The latest is shown by default, but you can choose another the
                    version to download from the dropdown menu in the header of the
                    details page.
                </para>
            </listitem>
            <listitem>
                <para>
                    Click <guibutton>Download Now</guibutton> and save the JAR or Zip
                    file on your computer.
                </para>
            </listitem>
            <listitem>
                <para>
                    If the add-on is packaged in a Zip package, unzip the package and
                    follow any instructions provided inside the package. Typically,
                    you just need to copy a JAR file to your web project under the
                    <filename>WEB-INF/lib</filename> directory.
                </para>

                <para>
                    Note that some add-ons may require other libraries. You can resolve
                    such dependencies manually, but we recommend using a dependency
                    manager such as Ivy or Maven in your project.
                </para>
            </listitem>

            <listitem>
                <para>
                    Update and recompile your project. In Eclipse, select the project
                    and press F5.
                </para>
            </listitem>

            <listitem>
                <para>
                    You may need to compile the client-side implementations of the add-on
                    components, that is, a <emphasis>widget set</emphasis>. This is the
                    case for majority of add-ons, except for pure server-side, theme, or
                    data binding add-ons. Compiling the widget set depends on the build
                    environment. See <xref linkend="addons.downloading.ant"/>, or later in
                    this chapter for instructions for compiling the widget set with
                    Eclipse and Maven. <!-- See <xref linkend="addons.compiling"/> for
                    instructions. -->
                </para>
            </listitem>
            
            <listitem>
                <para>
                    Update the project in your development web server and possibly restart
                    the server.
                </para>
            </listitem>
        </orderedlist>

        <section xml:id="addons.downloading.ant">
            <title>Compiling Widget Sets with an Ant Script</title>

            <para>
                If you need to compile the widget set with an Ant script, you can find a
                script template package at the <link
                xlink:href="http://vaadin.com/download/">Vaadin download page</link>.  You
                can copy the files in the package to your project and, once configured,
                use it by running Ant in the directory.
            </para>

            <para>
                If you are using an IDE such as Eclipse, <emphasis>always</emphasis>
                remember to refresh the project to synchronize it with the filesystem
                after compiling the widget set outside the IDE.
            </para>
        </section>
    </section>

    <section xml:id="addons.eclipse">
        <title>Installing Add-ons in Eclipse with Ivy</title>

        <para>
            The Vaadin Plugin for Eclipse uses Apache Ivy to resolve dependencies. The
            dependencies should be listed in the <filename>ivy.xml</filename> file in the
            project root. The Vaadin Directory allows dowloading add-ons from a Maven
            repository, which can be accessed also by Ivy.
        </para>

        <para>
            You can also use Ivy to resolve dependencies in an Ant script.
        </para>

        <orderedlist>
            <listitem>
                <para>
                    Open the add-on page in Vaadin Directory.
                </para>
            </listitem>
            <listitem>
                <para>
                    Select the version. The latest is shown by default, but you can choose
                    another the version from the dropdown menu in the header of the
                    add-on details page.
                </para>
            </listitem>
            <listitem>
                <para>
                    Click the <guilabel>Maven/Ivy</guilabel> to display the Ivy
                    dependency declaration, as illustrated in Figure <xref
                    linkend="figure.addons.eclipse.ivybutton" xrefstyle="select:labelnumber"/>. If the add-on is
                    available with multiple licenses, you will be prompted to select a
                    license for the dependency.
                </para>

                <figure xml:id="figure.addons.eclipse.ivybutton">
                    <title>Ivy Dependency Declaration</title>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="img/addons/directory-ivy-dependency.png"/>
                        </imageobject>
                        <imageobject role="fo">
                            <imagedata smallscale="70%" align="center" fileref="img/addons/directory-ivy-dependency.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </listitem>
            <listitem>
                <para>
                    Open the <filename>ivysettings.xml</filename> in your Eclipse project either
                    in the XML or Ivy Editor (either double-click the file or right-click
                    it and select <menuchoice><guimenu>Open With</guimenu><guimenuitem>Ivy
                    Editor</guimenuitem></menuchoice>).
                </para>

                <para>
                    Check that the settings file has the
                    <literal>&lt;ibiblio&gt;</literal> entry given in the Directory
                    page. It should be, if the file was created by the Vaadin project
                    wizard in Eclipse. If not, copy it there.
                </para>

                <programlisting><?pocket-size 65% ?>&lt;chain name="default"&gt;
  ...
  &lt;ibiblio name="vaadin-addons"
           usepoms="true"
           m2compatible="true"
           root="http://maven.vaadin.com/vaadin-addons"/&gt;
  ...
&lt;/chain&gt;</programlisting>

                <para>
                    If you get Vaadin addons from another repository, such as the local
                    repository if you have compiled them yourself, you need to define a
                    resolver for the repository in the settings file.
                </para>
            </listitem>
            <listitem>
                <para>
                    Open the <filename>ivy.xml</filename> in your Eclipse project and copy
                    the Ivy dependency to inside the <literal>dependencies</literal>
                    element. It should be as follows:
                </para>

                <programlisting>&lt;dependencies&gt;
    ...
    &lt;dependency org="<emphasis role="bold">com.vaadin.addon</emphasis>"
                name="<emphasis role="bold">vaadin-charts</emphasis>"
                rev="<emphasis role="bold">1.0.0</emphasis>"/&gt;
&lt;/dependencies&gt;</programlisting>

                <para>
                    You can specify either a fixed version number or a dynamic revision
                    tag, such as <literal>latest.release</literal>. You can find more
                    information about the <link
                    xlink:href="http://ant.apache.org/ivy/history/2.1.0/ivyfile/dependency.html">dependency
                    declarations</link> in Ivy documentation.
                </para>

                <para>
                    If the <filename>ivy.xml</filename> does not have a
                    <literal>&lt;configurations defaultconfmapping="default-&gt;default"&gt;</literal> defined, you
                    also need to have <literal>conf="default-&gt;default"</literal> in the
                    dependency to resolve transient dependencies correctly.
                </para>

                <para>
                    IvyIDE immediately resolves the dependencies when you save the file.
                </para>
            </listitem>
            <listitem>
                <para>
                    Compile the add-on widget set <!--, as described in <xref
                    linkend="addons.compiling.eclipse"/>.--> by clicking the
                    <guilabel>Compile Vaadin widgets</guilabel> button in the toolbar.
                </para>

                <figure xml:id="figure.addons.eclipse.toolbar">
                    <title>Compiling Widget Set in Eclipse</title>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="img/eclipse/widgetset-compiling-toolbar-lo.png"/>
                        </imageobject>
                        <imageobject role="fo">
                            <imagedata scale="100" smallscale="70%" align="center" fileref="img/eclipse/widgetset-compiling-toolbar-hi.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>

            </listitem>
        </orderedlist>

        <para>
            If you experience problems with Ivy, first check all the dependency
            parameters. IvyDE can sometimes cause unexpected problems. You can clear the
            Ivy dependency cache by right-clicking the project and selecting
            <menuchoice><guimenu>Ivy</guimenu><guimenuitem>Clean all
            caches</guimenuitem></menuchoice>. To refresh Ivy configuration, select
            <menuchoice><guimenu>Ivy</guimenu><guimenuitem>Refresh</guimenuitem></menuchoice>. To
            try resolving again Ivy, select
            <menuchoice><guimenu>Ivy</guimenu><guimenuitem>Resolve</guimenuitem></menuchoice>.
        </para>

        <!-- TODO
        <section xml:id="addons.eclipse.local">
            <title>Installing From Local Maven Repository</title>

            <para>
                If you build Vaadin add-ons (or other dependencies) in a local Maven
                repository, you need to include it in the Ivy resolver chain. 
            </para>
        </section>
        -->
    </section>

    <section xml:id="addons.maven">
        <title>Using Add-ons in a Maven Project</title>

        <indexterm xml:id="term.addons.maven" class="startofrange">
            <primary>Maven</primary>
            <secondary>using add-ons</secondary>
        </indexterm>

        <para>
            To use add-ons in a Maven project, you simply have to add them as dependencies
            in the project POM. Most add-ons include a widget set, which are compiled to
            the project widget set.
        </para>

        <para>
            Creating, compiling, and packaging a Vaadin project with Maven was described
            in <xref linkend="getting-started.maven"/>.
        </para>

        <section xml:id="addons.maven.dependency">
            <title>Adding a Dependency</title>

            <para>
                Vaadin Directory provides a Maven repository for all the add-ons in the
                Directory.
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Open the add-on page in Vaadin Directory.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select the version. The latest is shown by default, but you can choose
                        another the version from the dropdown menu in the header of the
                        add-on details page.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Click the <guilabel>Maven/Ivy</guilabel> to display the Maven
                        dependency declaration, as illustrated in Figure <xref
                        linkend="figure.addons.maven.pombutton"
                        xrefstyle="select:labelnumber"/>. If the add-on is available with
                        multiple licenses, you will be prompted to select a license for
                        the dependency.
                    </para>

                    <figure xml:id="figure.addons.maven.pombutton">
                        <title>Maven POM Definitions</title>
                        <mediaobject>
                            <imageobject role="html">
                                <imagedata align="center" fileref="img/addons/directory-maven-pom.png"/>
                            </imageobject>
                            <imageobject role="fo">
                                <imagedata smallscale="60%" align="center" fileref="img/addons/directory-maven-pom.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </listitem>

                <listitem>
                    <para>
                        Copy the <literal>dependency</literal> declaration to the
                        <filename>pom.xml</filename> file in your project, under the
                        <literal>dependencies</literal> element.
                    </para>

                    <programlisting>  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;<emphasis role="bold">com.vaadin.addon</emphasis>&lt;/groupId&gt;
      &lt;artifactId&gt;<emphasis role="bold">vaadin-charts</emphasis>&lt;/artifactId&gt;
      &lt;version&gt;<emphasis role="bold">1.0.0</emphasis>&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;</programlisting>

                    <para>
                        You can use an exact version number, as is done in the example
                        above, or <literal>LATEST</literal> to always use the latest
                        version of the add-on.
                    </para>

                    <para>
                        The POM excerpt given in Directory includes also a repository
                        definition, but if you have used the
                        <literal>vaadin-archetype-application</literal> to create your
                        project, it already includes the definition.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Compile the widget set as described in the following section.
                    </para>
                </listitem>
            </orderedlist>
        </section>

        <section xml:id="addons.maven.compiling">
            <title>Compiling the Project Widget Set</title>

            <para>
                If you have used the <literal>vaadin-archetype-application</literal> to
                create the project, the <filename>pom.xml</filename> includes all
                necessary declarations to compile the widget set. The widget set
                compilation occurs in standard Maven build phase, such as with
                <parameter>package</parameter> or <parameter>install</parameter> goal.
            </para>

            <screen><prompt>$</prompt> <command>mvn</command> <parameter>package</parameter></screen>

            <para>
                Then, just deploy the WAR to your application server.
            </para>

            <section xml:id="addons.maven.compiling.recompiling">
                <title>Recompiling the Widget Set</title>

                <para>
                    The Vaadin plugin for Maven tries to avoid recompiling the widget set
                    unless necessary, which sometimes means that it is not compiled even
                    when it should. Running the <literal>clean</literal> goal usually
                    helps, but causes a full recompilation. You can compile the widget set
                    manually by running the <parameter>vaadin:compile</parameter> goal.
                </para>

                <screen><prompt>$</prompt> <command>mvn</command> <parameter>vaadin:compile</parameter></screen>

                <para>
                    Note that this does not update the project widget set by searching new
                    widget sets from the class path. It must be updated if you add or
                    remove add-ons, for example. You can do that by running the
                    <literal>vaadin:update-widgetset</literal> goal in the project
                    directory.
                </para>

                <screen><prompt>$</prompt> <command>mvn</command> <parameter>vaadin:update-widgetset</parameter>
...
[INFO] auto discovered modules [your.company.gwt.ProjectNameWidgetSet]
[INFO] Updating widgetset your.company.gwt.ProjectNameWidgetSet
[ERROR] 27.10.2011 19:22:34 com.vaadin.terminal.gwt.widgetsetutils.ClassPathExplorer getAvailableWidgetSets
[ERROR] INFO: Widgetsets found from classpath:
...
</screen>

                <para>
                    Do not mind the "ERROR" labels, they are just an issue with the Vaadin
                    Plugin for Maven.
                </para>

                <para>
                    After running the update, you need to run the
                    <literal>vaadin:compile</literal> goal to actually compile the widget
                    set.
                </para>
            </section>
        </section>

        <section xml:id="addons.maven.widgetset">
            <title>Enabling Widget Set Compilation</title>

            <para>
                If you are not using a POM created with the proper Vaadin archetype, you
                may need to enable widget set compilation manually. The simplest way to do
                that is to copy the definitions from a POM created with the
                archetype. Specifically, you need to copy the <literal>plugin</literal>
                definitions. You also need the Vaadin dependencies.
            </para>

            <para>
                You need to create an empty widget set definition file, which the widget
                set compilation will populate with widget sets found from the class
                path. Create a
                <filename>src/main/java/com/example/AppWidgetSet.gwt.xml</filename> file
                (in the project package) with an empty <literal>&lt;module&gt;</literal>
                element as follows:
            </para>

            <programlisting><![CDATA[<module>
</module>]]></programlisting>

            <simplesect xml:id="addons.maven.widgetset.web">
                <title>Enabling the Widget Set in the UI</title>

                <para>
                    If you have previously used the default widget set in the project, you
                    need to enable the project widget set in the
                    <filename>web.xml</filename> deployment descriptor.  Edit the
                    <filename>src/main/webapp/WEB-INF/web.xml</filename> file and add or
                    modify the <literal>widgetset</literal> parameter for the servlet as
                    follows.
                </para>

                <programlisting><?pocket-size 75% ?>&lt;servlet&gt;
  ...
  &lt;init-param&gt;
    &lt;description&gt;Widget Set to Use&lt;/description&gt;
    &lt;param-name&gt;widgetset&lt;/param-name&gt;
    &lt;param-value&gt;<emphasis role="bold">com.example.AppWidgetSet</emphasis>&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;</programlisting>

                <para>
                    The parameter is the class name of the widget set, that is, without
                    the <filename>.gwt.xml</filename> extension and with the Java dot
                    notation for class names that include the package name.
                </para>
            </simplesect>
        </section>


        <indexterm startref="term.addons.maven" class="endofrange"/>
    </section>

    <section xml:id="addons.cval">
        <title>Installing Commercial Vaadin Add-on Licence</title>

        <para>
            The commercial Vaadin add-ons require installing a license key before using
            them. The license keys are development licenses and checked during widget set
            compilation, or in Vaadin TestBench when executing tests, so you do not need
            them when deploying the application.
        </para>

        <section xml:id="addons.cval.obtaining">
            <title>Obtaining License Keys</title>

            <para>
                You can purchase add-ons or obtain a free trial key from the Vaadin
                website. You need to register in the website to obtain a key.
            </para>

            <para>
                You can get license keys from <link
                xlink:href="https://vaadin.com/pro/licenses">vaadin.com/pro/licenses</link>,
                where you can navigate by selecting in the Vaadin website
                <menuchoice><guimenu>My
                Account</guimenu><guimenuitem>Licenses</guimenuitem></menuchoice> or
                directly <menuchoice><guimenuitem>Licenses</guimenuitem></menuchoice> if
                you are a Pro Tools subscriber.
            </para>

            <figure xml:id="figure.addons.cval.obtaining">
                <title>Obtaining CVAL License</title>
                <mediaobject>
                    <imageobject>
                        <imagedata smallscale="80%" align="center" fileref="img/addons/cval-pro-licenses-3.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Click on a license key to obtain the purchased or trial key.
            </para>

            <figure xml:id="figure.addons.cval.obtaining">
                <title>Obtaining CVAL License Key</title>
                <mediaobject>
                    <imageobject>
                        <imagedata smallscale="100%" align="center" fileref="img/addons/cval-pro-licenses-code.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section xml:id="addons.cval.installing">
            <title>Installing License Key in License File</title>
            
            <para>
                To install the license key in a development workstation, you can copy and
                paste it verbatim to a file in your home directory.
            </para>

            <para>
                License for each product has a separate license file as follows:
            </para>

            <variablelist>
                <varlistentry>
                    <term>Vaadin Charts</term>
                    <listitem>
                        <filename>.vaadin.charts.developer.license</filename>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Vaadin Spreadsheet</term>
                    <listitem>
                        <filename>.vaadin.spreadsheet.developer.license</filename>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Vaadin TestBench</term>
                    <listitem>
                        <filename>.vaadin.testbench.developer.license</filename>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Vaadin TouchKit</term>
                    <listitem>
                        <filename>.vaadin.touchkit.developer.license</filename>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
                For example, in Linux and OS&nbsp;X:
            </para>

            <screen><?pocket-size 75% ?><prompt>$</prompt> <command>echo</command> "<replaceable>L1cen5e-c0de</replaceable>" > <parameter>~/.vaadin.<replaceable>&lt;product&gt;</replaceable>.developer.license</parameter></screen>
        </section>

        <section xml:id="addons.cval.systemproperty">
            <title>Passing License Key as System Property</title>

            <para>
                You can also pass the key as a system property to the widget set compiler,
                usually with a <literal>-D</literal> option. For example, on the
                command-line:
            </para>

            <screen><?pocket-size 75% ?><prompt>$</prompt> <command>java</command> -D<parameter>vaadin.<replaceable>&lt;product&gt;</replaceable>.developer.license</parameter>=<replaceable>L1cen5e-c0de</replaceable> ...</screen>

            <para condition="web">
                See <link
                xlink:href="https://vaadin.com/directory/help/installing-cval-license">the
                CVAL license key installation instructions</link> for more details.
            </para>

            <section xml:id="addons.cval.systemproperty.environments">
                <title>Passing License Key in Different Environments</title>

                <para>
                    How you actually pass the parameter to the widget set compiler depends
                    on the development environment and the build system that you use to
                    compile the widget set. Below are listed a few typical environments:
                </para>
                
                <variablelist>
                    <varlistentry>
                        <term>Eclipse IDE</term>
                        <listitem>
                            <para>
                                To install the license key for all projects, select
                                <menuchoice><guimenu>Window</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice>
                                and navigate to the
                                <menuchoice><guimenu>Java</guimenu><guimenuitem>Installed
                                JREs</guimenuitem></menuchoice> section. Select the JRE
                                version that you use for the application and click
                                <guibutton>Edit</guibutton>. In the <guilabel>Default VM
                                arguments</guilabel>, give the <parameter>-D</parameter>
                                expression as shown above.
                            </para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>Apache Ant</term>
                        <listitem>
                            <para>
                                If compiling the project with Apache Ant, you could set the key
                                in the Ant script as follows:
                            </para>

                            <programlisting><?pocket-size 70% ?>&lt;sysproperty key="vaadin.<replaceable>&lt;product&gt;</replaceable>.developer.license"
             value="<emphasis role="bold">L1cen5e-c0de</emphasis>"/&gt;</programlisting>

                            <para>
                                However, you should never store license keys in a source
                                repository, so if the Ant script is stored in a source
                                repository, you should pass the license key to Ant as a
                                property that you then use in the script for the value
                                argument of the <literal>&lt;sysproperty&gt;</literal> as
                                follows:
                            </para>

                            <programlisting><?pocket-size 70% ?>&lt;sysproperty key="vaadin.<replaceable>&lt;product&gt;</replaceable>.developer.license"
    value="<emphasis role="bold">${vaadin.<replaceable>&lt;product&gt;</replaceable>.developer.license}</emphasis>"/&gt;</programlisting>

                            <para>
                                When invoking Ant from the command-line, you can pass the
                                property with a <parameter>-D</parameter> parameter to Ant.
                            </para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>Apache Maven</term>
                        <listitem>
                            <para>
                                If building the project with Apache Maven, you can pass the
                                license key with a <literal>-D</literal> parameter to Maven:
                            </para>

                            <screen><prompt>$</prompt> <command>mvn</command> -D<parameter>vaadin.<replaceable>&lt;product&gt;</replaceable>.developer.license</parameter>=<replaceable>L1cen5e-c0de</replaceable> package</screen>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>Continuous Integration Systems</term>
                        <listitem>
                            <para>
                                In CIS systems, you can pass the license key to build
                                runners as a system property in the build
                                configuration. However, this only passes it to a
                                runner. As described above, Ant does not pass it to
                                sub-processes implicitly, so you need to forward it
                                explicitly as described earlier.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>
    </section>

    <!-- TODO This is crappy. Fix and re-enable
    <section xml:id="addons.compiling">
        <title>Add-on Widget Sets</title>

        <para>
            If all has gone well, you should have been able to compile the widget set as
            described earlier in this chapter. If not, or if you have some special case,
            read on.
        </para>

        <para>
            Most add-ons include a set of widgets, which are client-side counterparts of
            the server-side components. An application UI can only have one widget set, so
            if you use multiple add-ons and possibly your own custom widgets, they need to
            be combined to a single widget set that inherits them.
        </para>

        <para>
            A compiled widget set is also called the <emphasis>Vaadin Client-Side
            Engine</emphasis>, which includes the framework for communicating with the
            server-side, as described in <xref linkend="architecture.client-side"/>.
        </para>

        <section xml:id="addons.compiling.descriptor">
            <title>Widget Set Descriptor</title>

            <para>
                A widget set descriptor is a file with <filename>.gwt.xml</filename>
                extension that defines other widget sets, such as those from add-ons,
                included in the overall widget set. More technically, it is a client-side
                module descriptor, as described in <xref linkend="clientside.module"/>.
            </para>

            <para>
                In basic use, you have one project widget set that combines the widget
                sets of the add-ons. If you have custom widgets in the project, they also
                require their own widget set that you need to include in the project
                widget set. You can also use different widget sets in the different UIs of
                a web application.
            </para>

            <para>
                The widget set descriptor is normally automatically generated by the
                widget set compilation, by including all the other widget sets found from
                the class path, such as from JARs. The Vaadin
                <classname>DefaultWidgetSet</classname> is included from the
                <filename>vaadin-client</filename> JAR.
            </para>

            <para>
                If you need to modify a widget set descriptor for any reason manually, you
                have to disable the automatic generation by including the following line
                in it:
            </para>

            TODO: Fix, cant have successive - - in XML comments.
            <programlisting>&lt;!- - WS Compiler: manually edited  - -&gt;</programlisting>
        </section>

        <section xml:id="addons.compiling.eclipse">
            <title>Compiling Widget Sets in Eclipse</title>

            <para>
                To be able to compile widget sets in Eclipse, you need to have the Vaadin
                Plugin for Eclipse installed, as instructed in <xref
                linkend="getting-started.eclipse"/>.
            </para>

            <para>
                To compile the widget set(s) manually, click the <guilabel>Compile Vaadin
                widgets</guilabel> button in Eclipse toolbar or press
                <keycombo><keycap>Ctrl</keycap><keycap>6</keycap></keycombo>. You must
                recompile the widget set(s) always when you install a new version of the
                add-on or of the Vaadin library.
            </para>
           -->
            <!-- TODO: Better icon as requested in #3692. --> <!--
            <figure xml:id="figure.advanced.addons.compiling-eclipse.toolbar">
                <title>The <guibutton>Compile Vaadin widgets</guibutton> Button in Eclipse Toolbar</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/eclipse/widgetset-compiling-toolbar-lo.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="70%" align="center" fileref="img/eclipse/widgetset-compiling-toolbar-hi.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Further information on defining and compiling widget sets is given in
                <xref linkend="clientside.compiling"/>.
            </para>
        </section>
    </section>     -->

    <!-- TODO Seems crappy, requires complete rewrite. Not very necessary anyhow.
    <section xml:id="addons.removing" condition="web">
        <title>Removing Add-ons</title>

        <para>
            Version mismatch problems with custom widget sets are a common source of
            grief for many beginners in Vaadin. If you need add-ons or your own custom
            components that include widget sets, you of course need to compile them,
            but otherwise it is unnecessary.
        </para>

        <para>
            If you do not use any such add-ons or your own custom components, do the
            following:
        </para>

        <orderedlist>
            <listitem>
                <para>
                    If you are using the Eclipse plugin, disable automatic widget set
                    compilation from project preferences, in the
                    <guilabel>Vaadin</guilabel> category, by selecting <guilabel>Suspend
                    automatic widgetset builds</guilabel>. This prevents accidental
                    compilation of the unnecessary widget sets. You may want to do this
                    anyhow as the automatic builds can be annoying. You can still always
                    build the widget set with the button in the toolbar.
                </para>
            </listitem>
            <listitem>
                <para>
                    Remove all widget set folders from under the
                    <filename>VAADIN/widgetsets</filename> folder.
                </para>
            </listitem>
            <listitem>
                <para>
                    Edit the <filename>WEB-INF/web.xml</filename> file and remove the
                    <parameter>widgetset</parameter> init parameter from the servlet. It
                    looks as follows:
                </para>

                <programlisting><?pocket-size 65% ?><![CDATA[<init-param>
  <description>UI widgetset</description>
  <param-name>widgetset</param-name>
  <param-value>com.vaadin.demo.colorpicker.widgetset.ColorPickerWidgetSet</param-value>
</init-param>]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    Refresh the project. In Eclipse, select the project and press F5, stop
                    the server, clean the server temporary directories, and restart it.
                </para>
            </listitem>
        </orderedlist>
        
        <para>
            At least in development environments, if you have extracted Vaadin themes to
            the <filename>VAADIN/themes</filename> folder, you should remove them and let
            them be loaded dynamically from the Vaadin JAR.
        </para>
    </section> -->

    <section xml:id="addons.troubleshooting">
        <title>Troubleshooting</title>
        
        <para>
            If you experience problems with using add-ons, you can try the following:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Check the <filename>.gwt.xml</filename> descriptor file under the the
                    project root package. For example, if the project root package is
                    <filename>com.example.myproject</filename>, the widget set definition
                    file is typically at
                    <filename>com/example/project/AppWidgetset.gwt.xml</filename>. The
                    location is not fixed and it can be elsewhere, as long as references
                    to it match. See <xref linkend="clientside.module"/> for details on
                    the contents of the client-side module descriptor, which is used to
                    define a widget set.
                </para>
            </listitem>

            <listitem>
                <para>
                    Check the <filename>WEB-INF/web.xml</filename> deployment descriptor
                    and see that the servlet for your UI has a widget set parameter, such
                    as the following:
                </para>

                <programlisting><?pocket-size 65% ?><![CDATA[<init-param>
  <description>UI widgetset</description>
  <param-name>widgetset</param-name>
  <param-value>com.example.project.AppWidgetSet</param-value>
</init-param>]]></programlisting>

                <para>
                    Check that the widget set class corresponds with the
                    <filename>.gwt.xml</filename> file in the source tree.
                </para>
            </listitem>

            <listitem>
                <para>
                    See the <filename>VAADIN/widgetsets</filename> directory and check
                    that the widget set appears there. You can remove it and recompile the
                    widget set to see that the compilation works properly.
                </para>
            </listitem>
            <listitem>
                <para>
                    Use the <guilabel>Net</guilabel> tab in Firebug to check that the widget
                    set (and theme) is loaded properly.
                </para>
            </listitem>
            <listitem>
                <para>
                    Use the <uri>?debug</uri> parameter for the application to open the
                    debug window and check if there is any version conflict between the
                    widget set and the Vaadin library, or the themes. See <xref
                    linkend="advanced.debug"/> for details.
                </para>
            </listitem>
            <listitem>
                <para>
                    Refresh and recompile the project. In Eclipse, select the project and
                    press <keycap>F5</keycap>, stop the server, clean the server temporary
                    directories, and restart it.
                </para>
            </listitem>
            <listitem>
                <para>
                    Check the Error Log view in Eclipse (or in the IDE you use).
                </para>
            </listitem>
        </itemizedlist>

            <!-- TODO Vaadin 7: Re-enable
            <para>
                For more specific problems related to widget sets definition and
                compilation, see <xref linkend="gwt.development.troubleshooting"/>.
            </para>
            -->
    </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
