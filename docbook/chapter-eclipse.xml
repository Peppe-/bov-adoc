<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!-- Copyright 2000-2012 Vaadin Ltd                                         -->
<!-- All Rights Reserved                                                    -->
<!-- This work is licensed under a Creative Commons Attribution-NoDerivs    -->
<!-- License (CC-BY-ND) Version 3.0. Full license text is available at:     -->
<!-- http://creativecommons.org/licenses/by-nd/3.0/legalcode                -->
<!-- ====================================================================== -->

<chapter xml:id="eclipse">
	<title>Visual User Interface Design with Eclipse</title>

    <indexterm xml:id="term.eclipse.visual-designer" class="startofrange">
        <primary>Vaadin Plugin for Eclipse</primary>
        <secondary>visual editor</secondary>
    </indexterm>

    <indexterm xml:id="term.eclipse.customcomponent" class="startofrange">
        <primary><classname>CustomComponent</classname></primary>
    </indexterm>
	
	<para>
		This chapter provides instructions for developing the graphical user interface of
		Vaadin components with the Vaadin Plugin for the
		Eclipse IDE.
	</para>

	<section xml:id="eclipse.overview">
		<title>Overview</title>

		<para>
			The visual editor feature in the Vaadin Plugin for Eclipse allows you to
			design the user interface of an entire application or of specific composite
			components. The plugin generates the actual Java code, which is designed to be
			reusable, so you can design the basic layout of the user interface with the
			visual editor and build the user interaction logic on top of the generated
			code. You can use inheritance and composition to modify the components
			further.
		</para>

		<para>
			The editor works with classes that extend the
			<classname>CustomComponent</classname> class, which is the basic technique in
			Vaadin for creating composite components. Component composition is described
			in <xref linkend="components.customcomponent"/>. Any
			<classname>CustomComponent</classname> will not do for the visual editor;
			you need to create a new one as instructed below.
		</para>

        <simplesect xml:id="eclipse.overview.composite-using">
            <title>Using a Composite Component</title>

            <para>
                You can use a composite component just as you would use any Vaadin
                component. However, the composite as well as its root layout, which is an
                <classname>AbsoluteLayout</classname>, are full size (100% wide and high)
                by default. A component with full size (expand-to-fit layout) may not
                normally be inside a layout with undefined size (shrink-to-fit
                content). For example, if you put a composite in a
                <classname>VerticalLayout</classname>, which has undefined height by
                default, you have to set the layout explicitly to have a defined height,
                either fixed or full (100%) height.
            </para>

			<programlisting><?pocket-size 75% ?><![CDATA[public class MyUI extends UI {
    @Override
    protected void init(VaadinRequest request) {
        // Create the content root layout for the UI
        VerticalLayout content = new VerticalLayout();
        setContent(content);

        // Needed because the composites are full size
        content.setSizeFull();

        MyComposite myComposite = new MyComposite();
        content.addComponent(myComposite);
    }
}]]></programlisting>

            <para>
                You could also set the size of the root layout of the composite to a fixed
                height (in component properties in the visual editor). The important thing
                to notice is that an <classname>AbsoluteLayout</classname> may never have
                undefined size.
            </para>
        </simplesect>

        <simplesect xml:id="eclipse.overview.installing">
            <title>Installing the Visual Editor</title>

            <para>
                The visual editor is currently included in the Vaadin Plugin for
                Eclipse. For its installation, see <xref
                linkend="getting-started.eclipse"/>.
            </para>

            <para>
                The editor runs in an internal browser in Eclipse. The actual browser
                engine used depends on the operating system. Using the internal browser
                must be enabled in
                <menuchoice><guimenu>Window</guimenu><guisubmenu>Preferences</guisubmenu><guisubmenu>General</guisubmenu><guimenuitem>Web
                Browsers</guimenuitem></menuchoice>.
            </para>

            <para>
                In Ubuntu 12.04 and some other versions, no embedded browser engine is
                installed in the system by default. You can use at least Firefox XULRunner
                and WebKit. You can install WebKit as follows:
            </para>

            <screen><prompt>$</prompt> <command>sudo apt-get</command> install <replaceable>libwebkitgtk-1.0-0</replaceable></screen>

            <para>
                Then, restart Eclipse and check that the internal browser is enabled.
            </para>
        </simplesect>
	</section>

	<section xml:id="eclipse.composite-new">
		<title>Creating a New Composite</title>

        <?dbfo-need height="3cm" ?>
        <para>
            If the Vaadin Plugin is installed in Eclipse, you can create a new composite
            component as follows.
        </para>
		
		<orderedlist>
			<listitem>
				<para>
					Select
					<menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other...</guimenuitem></menuchoice>
					in the main menu or right-click the <guilabel>Project
					Explorer</guilabel> and select
					<menuchoice><guimenu>New</guimenu><guimenuitem>Other...</guimenuitem></menuchoice>
					to open the <guilabel>New</guilabel> window.
				</para>
			</listitem>
			
			<listitem>
				<para>
					In the first, <guilabel>Select a wizard</guilabel> step, select
					<menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin
					Composite</guimenuitem></menuchoice> and click
					<guibutton>Next</guibutton>.
				</para>
				
				<screenshot>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-new-select.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-new-select.png"/>
						</imageobject>
					</mediaobject>
				</screenshot>
			</listitem>

            <?dbfo-need height="3cm" ?>
			<listitem>
				<para>
					The <guilabel>Source folder</guilabel> is the root source
					directory where the new component will be created. This is by
					default the default source directory of your project.
				</para>

				<screenshot>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-new-settings.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-new-settings.png"/>
						</imageobject>
					</mediaobject>
				</screenshot>
					
				<para>
					Enter the Java <guilabel>Package</guilabel> under which the new
					component class should be created or select it by clicking the
					<guibutton>Browse</guibutton> button. Also enter the class
					<guilabel>Name</guilabel> of the new component.
				</para>

				<para>
					Finally, click <guibutton>Finish</guibutton> to create the component.
				</para>
			</listitem>
		</orderedlist>

		<para>
			A newly created composite component is opened in the
			<guilabel>Design</guilabel> window, as shown in <xref
			linkend="figure.eclipse.editor.source.new"/>.
		</para>

		<figure xml:id="figure.eclipse.editor.source.new">
			<title>New Composite Component</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/eclipse/editor-source-1.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-source-1.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			You can observe that a component that you can edit with the visual editor
			has two tabs at the bottom of the view: <guilabel>Source</guilabel> and
			<guilabel>Design</guilabel>. These tabs allow switching between the source
			view and the visual design view.
		</para>

		<para>
            If you later open the source file for editing, the <guilabel>Source</guilabel>
            and <guilabel>Design</guilabel> tabs should appear below the source editor. If
            they do not, right-click the file in the Project Explorer and select
            <menuchoice><guimenu>Open With</guimenu><guimenuchoice>Vaadin
            Editor</guimenuchoice></menuchoice>.
        </para>

	</section>

	<section xml:id="eclipse.editor">
		<title>Using The Visual Editor</title>

		<para>
			The visual editor view consists of, on the left side, an <emphasis>editing
			area</emphasis> that displays the current layout and, on the right side, a
			<emphasis>control panel</emphasis> that contains a <emphasis>component
			list</emphasis> for selecting new components to add, the current
			<emphasis>component tree</emphasis>, and a <emphasis>component property
			panel</emphasis>.
		</para>

		<section>
			<title>Adding New Components</title>

			<para>
                Adding new components to the user interface is done as follows by dragging
                them from the component list to either the editing area or to the
                component tree. If you drag the components to the tree, 
			</para>

            <orderedlist>
                <listitem>
                    Select which components are shown in the component list by entering a
                    search string or by expanding the filters and selecting only the
                    desired component categories.
                </listitem>

                <listitem>
                    <para>
                        Drag a component from the component list to either:
                    </para>

                    <orderedlist>
                        <listitem>Editing area, where you can easily move and resize the
                        component. Dragging a component onto a layout component will add
                        it in it and you can also position components within a layout by
                        dragging them.</listitem>

                        <listitem>Component tree. Remember that you can only add
                        components under a layout component or other component
                        container.</listitem>
                    </orderedlist>
                </listitem>

                <listitem>
                    <para>
                        Edit the component properties
                    </para>

                    <orderedlist>
                        <listitem>
                            In the editing area, you can move and resize the components,
                            and set their alignment in the containing layout.
                        </listitem>
                        <listitem>
                            In the property panel, you can set the component name, size,
                            position and other properties.
                        </listitem>
                    </orderedlist>
                </listitem>
            </orderedlist>

            <figure xml:id="figure.eclipse.editor.component.new">
                <title>Adding a New Component Node</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/eclipse/editor-design-2-crop-lo.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="90%" align="center" fileref="img/eclipse/editor-design-2-crop-hi.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

			<para>
				You can delete a component by right-clicking it in the component tree and
				selecting <menuchoice><guimenuitem>Remove</guimenuitem></menuchoice>. The
				context menu also allows copying and pasting components.
			</para>

            <para>
                A composite component created by the plugin must have a
                <classname>AbsoluteLayout</classname> as its root layout. While it is
                suitable for the visual editor, absolute layouts are rarely used
                otherwise in Vaadin applications. If you want to use another root layout,
                you can add another layout inside the <literal>mainLayout</literal> and
                set that as the root with <methodname>setCompositionRoot()</methodname> in
                the source view. It will be used as the root when the component is
                actually used in an application.
            </para>
		</section>

		<section xml:id="eclipse.editor.component-properties">
			<title>Setting Component Properties</title>

			<para>
				The property setting sub-panel of the control panel allows setting
				component properties. The panel has two tabs: <guilabel>Layout</guilabel>
				and <guilabel>Properties</guilabel>, where the latter defines the various
				basic properties.
			</para>

			<section xml:id="eclipse.editor.component-properties.basic">
				<title>Basic Properties</title>

                <para>
                    The top section of the property panel, shown in <xref
                    linkend="figure.eclipse.editor.component-properties.basic"/>, allows
                    setting basic component properties. The panel also includes properties
                    such as field properties for field components.
                </para>

				<figure xml:id="figure.eclipse.editor.component-properties.basic">
					<title>Basic Component Properties</title>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-properties-basic.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="75%" align="center" fileref="img/eclipse/editor-properties-basic.png"/>
						</imageobject>
					</mediaobject>
				</figure>

                <para>
                    The properties are as follows:
                </para>

				<variablelist>
					<varlistentry>
						<term>Name</term>
						<listitem>
							<para>
								The name of the component, which is used for the reference
								to the component, so it must obey Java notation for
								variable names.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Style Name</term>
						<listitem>
							<para>
								A space-separated list of CSS style class names for the
								component. See <xref linkend="themes"/> for information on
								component styles in themes.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Caption</term>
						<listitem>
							<para>
								The caption of a component is usually displayed above the
								component. Some components, such as
								<classname>Button</classname>, display the caption inside
								the component. For <classname>Label</classname> text, you
								should set the value of the label instead of the caption,
								which should be left empty.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Description (tooltip)</term>
						<listitem>
							<para>
								The description is usually displayed as a tooltip when the
								mouse pointer hovers over the component for a while. Some
								components, such as <classname>Form</classname> have their
								own way of displaying the description.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Icon</term>
						<listitem>
							<para>
								The icon of a component is usually displayed above the
								component, left of the caption. Some components, such as
								<classname>Button</classname>, display the icon inside the
								component.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Content Type</term>
						<listitem>
							<para>
								Some components allow different content types, such as
								<classname>Label</classname>, which allow formatting
								either as <guilabel>TEXT</guilabel>,
								<guilabel>HTML</guilabel>, and
								<guilabel>PREFORMATTED</guilabel>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Value</term>
						<listitem>
							<para>
								The component value. The value type and how it is
								displayed by the component varies between different
								component types and each value type has its own
								editor. The editor opens by clicking on the
								<guibutton>...</guibutton> button.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>

                <para>
                    Most of the basic component properties are defined in the
                    <classname>Component</classname> interface; see <xref
                    linkend="components.interfaces.component"/> for further details.
                </para>
				
			</section>

			<section>
				<title>Layout Properties</title>

				<para>
					The size of a component is determined by its width and height, which
					you can give in the two edit boxes in the control panel. You can use
					any unit specifiers for components, as described in <xref
					linkend="components.features.sizeable"/>. Emptying a size box will
					make the size "automatic", which means setting the size as
					<emphasis>undefined</emphasis>. In the generated code, the undefined
					value will be expressed as "<literal>-1px</literal>".
				</para>

				<para>
					Setting width of "<literal>100px</literal>" and
					<emphasis>auto</emphasis> (undefined or empty) height would result in
					the following generated settings for a button:
				</para>

			<programlisting><![CDATA[// myButton
myButton = new Button();
...
myButton.setHeight("-1px");
myButton.setWidth("100px");
...]]></programlisting>

				<para>
					<xref linkend="figure.eclipse.editor.component-properties.size"/>
					shows the control panel area for the size and position.
				</para>

				<figure xml:id="figure.eclipse.editor.component-properties.size">
					<title>Layout Properties</title>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-properties-size.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="75%" align="center" fileref="img/eclipse/editor-properties-size.png"/>
						</imageobject>
					</mediaobject>
				</figure>

				<para>
					The generated code for the example would be:
				</para>

			<programlisting><?pocket-size 75% ?><![CDATA[// myButton
myButton = new Button();
myButton.setWidth("-1px");
myButton.setHeight("-1px");
myButton.setImmediate(true);
myButton.setCaption("My Button");
mainLayout.addComponent(myButton,
                        "top:243.0px;left:152.0px;");]]></programlisting>

                <para>
                    The position is given as a CSS position in the second parameter for
                    <methodname>addComponent()</methodname>. The values
                    "<literal>-1px</literal>" for width and height will make the button to
                    be sized automatically to the minimum size required by the caption.
                </para>

				<para>
					When editing the position of a component inside an
					<classname>AbsoluteLayout</classname>, the editor will display
					vertical and horizontal guides, which you can use to set the position
					of the component. See <xref linkend="eclipse.editor.absolutelayout"/>
					for more information about editing absolute layouts.
				</para>

				<para>
                    The <guilabel>ZIndex</guilabel> setting controls the "Z coordinate" of
                    the components, that is, which component will overlay which when they
                    overlap. Value <literal>-1</literal> means automatic, in which case
                    the components added to the layout later will be on top.
                </para>
            </section>
        </section>

		<section xml:id="eclipse.editor.absolutelayout">
			<title>Editing an <classname>AbsoluteLayout</classname></title>

			<para>
				The visual editor has interactive support for the
				<classname>AbsoluteLayout</classname> component that allows positioning
				components exactly at specified coordinates. You can position the
				components using guides that control the position attributes, shown in the
				control panel on the right. The position values are measured in pixels
				from the corresponding edge; the vertical and horizontal rulers show the
				distances from the top and left edge.
            </para>

			<para>
                <xref linkend="figure.eclipse.editor.absolutelayout.button"/> shows three
                components, a <classname>Label</classname>, a
                <classname>Table</classname>, and a <classname>Button</classname>, inside
                an <classname>AbsoluteLayout</classname>.
            </para>

            <figure xml:id="figure.eclipse.editor.absolutelayout.button">
                <title>Positioning with <classname>AbsoluteLayout</classname></title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/eclipse/editor-absolutelayout-1.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-absolutelayout-1.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Position attributes that are empty are <emphasis>automatic</emphasis> and
                can be either zero (at the edge) or dynamic to make it shrink to fit the
                size of the component, depending on the component. Guides are shown also
                for the automatic position attributes and move automatically; in <xref
                linkend="figure.eclipse.editor.absolutelayout.button"/> the right and
                bottom edges of the <classname>Button</classname> are automatic.
            </para>

            <para>
                Moving an automatic guide manually makes the guide and the corresponding
                the position attribute non-automatic. To make a manually set attribute
                automatic, empty it in the control panel. <xref
                linkend="figure.eclipse.editor.absolutelayout.label"/> shows a
                <classname>Label</classname> component with all the four edges set
                manually. Notice that if an automatic position is 0, the guide is at the
                edge of the ruler.
            </para>

            <figure xml:id="figure.eclipse.editor.absolutelayout.label">
                <title>Manually positioned <classname>Label</classname></title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/eclipse/editor-absolutelayout-3.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-absolutelayout-3.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

		</section>
	</section>

	<section xml:id="eclipse.structure">
		<title>Structure of a Visually Editable Component</title>
		
		<para>
			A component created by the wizard and later managed by the visual editor has a
			very specific structure that allows you to insert your user interface logic in
			the component while keeping a minimal amount of code off-limits. You need to
			know what you can edit yourself and what exactly is managed by the editor. The
			managed member variables and methods are marked with the
			<classname>AutoGenerated</classname> annotation, as you can see later.
		</para>

		<para>
			A visually editable component consists of:
		</para>

		<itemizedlist>
			<listitem><para>Member variables containing sub-component references</para></listitem>
			<listitem><para>Sub-component builder methods</para></listitem>
			<listitem><para>The constructor</para></listitem>
		</itemizedlist>
		
		<para>
			The structure of a composite component is hierarchical, a nested hierarchy of
			layout components containing other layout components as well as regular
			components. The root layout of the component tree, or the
			<emphasis>composition root</emphasis> of the
			<classname>CustomComponent</classname>, is named
			<literal>mainLayout</literal>. See <xref
			linkend="components.customcomponent"/> for a detailed description of the
			structure of custom (composite) components.
		</para>

		<section xml:id="eclipse.structure.references">
			<title>Sub-Component References</title>
			
			<para>
				The <classname>CustomComponent</classname> class will include a reference
				to each contained component as a member variable. The most important of
				these is the <varname>mainLayout</varname> reference to the composition
				root layout. Such automatically generated member variables are marked with
				the <literal>@AutoGenerated</literal> annotation. They are managed by
				the editor, so you should not edit them manually, unless you know what you
				are doing.
			</para>

			<para>
				A composite component with an <classname>AbsoluteLayout</classname> as the
				composition root, containing a <classname>Button</classname> and a
				<classname>Table</classname> would have the references as follows:
			</para>
			
			<programlisting><?pocket-size 65% ?><![CDATA[public class MyComponent extends CustomComponent {

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private Button myButton;
    @AutoGenerated
    private Table myTable;
    ...]]></programlisting>

			<para>
				The names of the member variables are defined in the component properties
				panel of the visual editor, in the <guilabel>Component name</guilabel>
				field, as described in <xref
				linkend="eclipse.editor.component-properties.basic"/>. While you can
				change the name of any other components, the name of the root layout is
				always <varname>mainLayout</varname>. It is fixed because the editor does
				not make changes to the constructor, as noted in <xref
				linkend="eclipse.structure.constructor"/>. You can, however, change the
				type of the root layout, which is an <classname>AbsoluteLayout</classname>
				by default.
			</para>

			<para>
				Certain typically static components, such as the
				<classname>Label</classname> label component, will not have a reference as
				a member variable. See the description of the builder methods below for
				details.
			</para>

		</section>

		<section xml:id="eclipse.structure.builders">
			<title>Sub-Component Builders</title>

			<para>
				Every managed layout component will have a builder method that creates the
				layout and all its contained components. The builder puts references to
				the created components in their corresponding member variables, and it
				also returns a reference to the created layout component.
			</para>

			<para>
				Below is an example of an initial main layout:
			</para>

			<programlisting><?pocket-size 75% ?><![CDATA[@AutoGenerated
private AbsoluteLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new AbsoluteLayout();
    
    // top-level component properties
    setHeight("100.0%");
    setWidth("100.0%");
    
    return mainLayout;
}]]></programlisting>

			<para>
				Notice that while the builder methods return a reference to the created
				component, they also write the reference directly to the member
				variable. The returned reference might not be used by the generated code
				at all (in the constructor or in the builder methods), but you can use it
				for your purposes.
			</para>
			
			<para>
				The builder of the main layout is called in the constructor, as explained
				in <xref linkend="eclipse.structure.constructor"/>. When you have a layout
				with nested layout components, the builders of each layout will call the
				appropriate builder methods of their contained layouts to create their
				contents.
			</para>
		</section>

		<section xml:id="eclipse.structure.constructor">
			<title>The Constructor</title>

			<para>
				When you create a new composite component using the wizard, it will create
				a constructor for the component and fill its basic content.
			</para>

			<programlisting><?pocket-size 65% ?><![CDATA[    public MyComponent() {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }]]></programlisting>

			<para>
				The most important thing to do in the constructor is to set the
				composition root of the <classname>CustomComponent</classname> with the
				<methodname>setCompositionRoot()</methodname> (see <xref
				linkend="components.customcomponent"/> for more details on the composition
				root). The generated constructor first builds the root layout of the
				composite component with <methodname>buildMainLayout()</methodname> and
				then uses the <varname>mainLayout</varname> reference.
			</para>

			<para>
				 The editor will not change the constructor afterwards, so you can safely
				 change it as you want. The editor does not allow changing the member
				 variable holding a reference to the root layout, so it is always named
				 <varname>mainLayout</varname>.
			</para>
		</section>
	</section>
		
    <indexterm startref="term.eclipse.visual-designer" class="endofrange"/>
    <indexterm startref="term.eclipse.customcomponent" class="endofrange"/>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
