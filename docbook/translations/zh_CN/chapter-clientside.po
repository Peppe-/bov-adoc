# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2014-11-07 15:58+0000\n"
"PO-Revision-Date: 2014-11-08 01:12+0900\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"X-Generator: Poedit 1.6.5\n"

#. Tag: title
#: chapter-clientside.xml:11
#, no-c-format
msgid "Client-Side Vaadin Development"
msgstr "客户端 Vaadin 开发"

#. Tag: para
#: chapter-clientside.xml:13
#, no-c-format
msgid ""
"This chapter gives an overview of the Vaadin client-side framework, its "
"architecture, and development tools."
msgstr "本章将简要介绍 Vaadin 客户端 Framework, 它的架构, 以及相关的开发工具."

#. Tag: title
#: chapter-clientside.xml:19
#, no-c-format
msgid "Overview"
msgstr "概述"

#. Tag: para
#: chapter-clientside.xml:21
#, no-c-format
msgid ""
"As noted in the introduction, Vaadin supports two development models: server-"
"side and client-side. Client-side Vaadin code is executed in the web browser "
"as JavaScript code. The code is written in Java, like all Vaadin code, and "
"then compiled to JavaScript with the <emphasis>Vaadin Client Compiler</"
"emphasis>. You can develop client-side widgets and integrate them with "
"server-side counterpart components to allow using them in server-side Vaadin "
"applications. That is how the components in the server-side framework and in "
"most add-ons are done. Alternatively, you can create pure client-side GWT "
"applications, which you can simply load in the browser from an HTML page and "
"use even without server-side connectivity."
msgstr ""
"前面我们介绍过, Vaadin 支持两种开发模式: 服务器端开发和客户端开发. 客户端 "
"Vaadin 代码以 JavaScript 形式运行在 Web 浏览器中. 客户端代码与 Vaadin 的其他"
"代码一样, 是以 Java 语言编写的, 然后使用 <emphasis>Vaadin 客户端编译器</"
"emphasis> 编译为 JavaScript. 你可以开发客户端 widget, 将这些 widget 与对应的"
"服务器端组件集成起来, 然后就可以在服务器端 Vaadin 应用程序中使用它们了. 服务"
"器端 Framework 以及大多数 add-on 中的组件也是这样开发的. 除此之外, 你也可以创"
"建纯客户端的 GWT 应用程序, 你可以使用 HTML 页面将这种客户端应用程序装载到浏览"
"器中, 使用这种客户端应用程序时甚至不需要连接服务器."

#. Tag: para
#: chapter-clientside.xml:34
#, no-c-format
msgid ""
"The client-side framework is based on the Google Web Toolkit (GWT), with "
"added features and bug fixes. Vaadin is compatible with GWT to the extent of "
"the basic GWT feature set. Vaadin Ltd is a member of the GWT Steering "
"Committee, working on the future direction of GWT together with Google and "
"other supporters of GWT."
msgstr ""
"客户端 Framework 是的基础是 Google Web Toolkit (GWT), 并在 GWT 之上增加了一些"
"功能, 修正了一些 bug. Vaadin 与 GWT 兼容, 支持 GWT 的基本功能集. Vaadin 公司"
"是 GWT 指导委员会的成员, 它与 Google 以及其他支持者一起工作, 确定 GWT 的未来"
"发展方向."

#. Tag: title
#: chapter-clientside.xml:43
#, no-c-format
msgid "Widgets and Components"
msgstr "Widget 与组件"

#. Tag: primary
#: chapter-clientside.xml:45
#, no-c-format
msgid "widget, definition"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:45
#, no-c-format
msgid ""
"Google Web Toolkit uses the term <emphasis>widget</emphasis> for user "
"interface components. In this book, we use the term widget to refer to "
"client-side components, while using the term <emphasis>component</emphasis> "
"in a general sense and also in the special sense for server-side components."
msgstr ""
"Google Web Toolkit 使用术语 <emphasis>widget</emphasis> 来代表 UI 组件. 在本"
"书中, 我们用 widget 这个词代表客户端组件, 用 <emphasis>组件</emphasis> 这个词"
"来泛指一切组件, 有时也用来特指服务器端组件."

#. Tag: para
#: chapter-clientside.xml:54
#, no-c-format
msgid ""
"The main idea in server-side Vaadin development is to render the server-side "
"components in the browser with the Client-Side Engine. The engine is "
"essentially a set of widgets paired with <emphasis>connectors</emphasis> "
"that serialize their state and events with the server-side counterpart "
"components. The client-side engine is technically called a <emphasis>widget "
"set</emphasis>, to describe the fact that it mostly consists of widgets and "
"that widget sets can be combined, as described later."
msgstr ""
"Vaadin 服务器端开发的主要思路是, 通过客户端引擎将服务器端组件显示到浏览器中. "
"客户端引擎实质上由一组 widget 构成, widget 与 <emphasis>连接器</emphasis> 配"
"合, 连接器将 widget 的状态和事件序列化, 再发送给对应的服务器端组件. 客户端引"
"擎技术上叫做 <emphasis>widget set</emphasis>, 因为它通常由 widget 组成, 并且 "
"widget set 可以相互组合, 详情请见后文."

#. Tag: title
#: chapter-clientside.xml:66
#, no-c-format
msgid "Installing the Client-Side Development Environment"
msgstr "安装客户端开发环境"

#. Tag: para
#: chapter-clientside.xml:68
#, no-c-format
msgid ""
"The installation of the client-side development libraries is described in "
"<xref linkend=\"getting-started\"/>. You especially need the "
"<filename>vaadin-client</filename> library, which contains the client-side "
"Java API, and <filename>vaadin-client-compiler</filename>, which contains "
"the Vaadin Client Compiler for compiling Java to JavaScript."
msgstr ""
"客户端开发所需要的库文件, 安装方法请参见 <xref linkend=\"getting-started\"/"
">. 最重要的是 <filename>vaadin-client</filename> 库文件, 这个库中包含了客户"
"端 Java API, 以及 <filename>vaadin-client-compiler</filename>, 这个文件中包含"
"了 Vaadin 客户端编译器, 用于将 Java 代码编译为 JavaScript 代码."

#. Tag: title
#: chapter-clientside.xml:78
#, no-c-format
msgid "Client-Side Module Descriptor"
msgstr "客户端模块描述文件"

#. Tag: para
#: chapter-clientside.xml:80
#, no-c-format
msgid ""
"Client-side Vaadin modules, such as the Vaadin Client-Side Engine (widget "
"set) or pure client-side applications, that are to be compiled to "
"JavaScript, are defined in a <emphasis>module descriptor</emphasis> "
"(<filename>.gwt.xml</filename>) file."
msgstr ""
"Vaadin 客户端模块, 比如 Vaadin 客户端引擎(widget set) 或纯客户端应用程序, 都"
"会被编译为 JavaScript, 这些模块定义在 <emphasis>模块描述文件</emphasis> "
"(<filename>.gwt.xml</filename>)."

#. Tag: para
#: chapter-clientside.xml:87
#, no-c-format
msgid ""
"When defining a widget set to build the Vaadin client-side engine, the only "
"necessary task is to inherit a base widget set. If you are developing a "
"regular widget set, you should normally inherit the "
"<classname>DefaultWidgetSet</classname>."
msgstr ""
"要创建一个 Vaadin 客户端引擎, 需要定义一个 widget set, 这时需要做的是继承一"
"个 widget set 基类, 通常应该从 <classname>DefaultWidgetSet</classname> 继承."

#. Tag: programlisting
#: chapter-clientside.xml:94
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<!DOCTYPE module PUBLIC\n"
"  \"-//Google Inc.//DTD Google Web Toolkit 1.7.0//EN\"\n"
"  \"http://google-web-toolkit.googlecode.com/svn/tags/1.7.0/distro-source/"
"core/src/gwt-module.dtd\">\n"
"\n"
"<module>\n"
"    <!-- Inherit the default widget set -->\n"
"    <inherits name=\"com.vaadin.DefaultWidgetSet\" />\n"
"</module>]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:96
#, no-c-format
msgid ""
"If you are developing a pure client-side application, you should instead "
"inherit <classname>com.vaadin.Vaadin</classname>, as described in <xref "
"linkend=\"clientsideapp\"/>. In that case, the module descriptor also needs "
"an entry-point."
msgstr ""
"如果你在开发一个纯客户端应用程序, 你应该继承 <classname>com.vaadin.Vaadin</"
"classname>, 详情请参见 <xref linkend=\"clientsideapp\"/>. 这时, 模块描述文件"
"中还需要指定一个 entry-point."

#. Tag: para
#: chapter-clientside.xml:103
#, no-c-format
msgid ""
"If you are using the Eclipse IDE, the New Vaadin Widget wizard will "
"automatically create the GWT module descriptor. See <xref linkend=\"gwt."
"eclipse.widget\"/> for detailed instructions."
msgstr ""
"如果使用 Eclipse IDE, \"New Vaadin Widget\" 向导会自动创建 GWT 模块描述文件. "
"详情请参见 <xref linkend=\"gwt.eclipse.widget\"/>."

#. Tag: title
#: chapter-clientside.xml:110
#, no-c-format
msgid "Specifying a Stylesheet"
msgstr "指定样式表"

#. Tag: para
#: chapter-clientside.xml:112
#, no-c-format
msgid ""
"A client-side module can include CSS stylesheets. When the module is "
"compiled, these stylesheets are copied to the output target. In the module "
"descriptor, define a <literal>stylesheet</literal> element."
msgstr ""
"客户端模块可以包含 CSS 样式表. 模块编译时, 这些样式表文件会被复制到编译结果"
"中. 在模块描述文件中, 需要定义一个 <literal>stylesheet</literal> 元素."

#. Tag: para
#: chapter-clientside.xml:119
#, no-c-format
msgid ""
"For example, if you are developing a custom widget and want to have a "
"default stylesheet for it, you could define it as follows:"
msgstr ""
"比如, 如果你在开发一个自定义 widget, 并且希望它有一个默认的样式表, 你可以使用"
"如下定义:"

#. Tag: programlisting
#: chapter-clientside.xml:124
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<stylesheet src=\"mywidget/styles.css\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:126
#, no-c-format
msgid ""
"The specified path is relative to the <emphasis>public</emphasis> folder "
"under the folder of the module descriptor."
msgstr ""
"这里使用的文件路径, 相对于模块描述文件所在文件夹之下的 <emphasis>public</"
"emphasis> 文件夹."

#. Tag: title
#: chapter-clientside.xml:133
#, no-c-format
msgid "Limiting Compilation Targets"
msgstr "限定编译目标"

#. Tag: para
#: chapter-clientside.xml:135
#, no-c-format
msgid ""
"Compiling widget sets takes considerable time. You can reduce the "
"compilation time significantly by compiling the widget sets only for your "
"browser, which is useful during development. You can do this by setting the "
"<parameter>user.agent</parameter> property in the module descriptor."
msgstr ""
"widget set 的编译过程会耗费相当长的时间. 你可以显著地减少编译时间, 方法是只针"
"对你的浏览器来编译 widget set, 在开发阶段这是一种很有效的方法. 你可以在模块描"
"述文件中设置 <parameter>user.agent</parameter> 属性来实现这个目的."

#. Tag: programlisting
#: chapter-clientside.xml:143
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[<set-property name=\"user.agent\" value="
"\"gecko1_8\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:145
#, no-c-format
msgid ""
"The <parameter>value</parameter> attribute should match your browser. The "
"browsers supported by GWT depend on the GWT version, below is a list of "
"browser identifiers supported by GWT."
msgstr ""
"<parameter>value</parameter> 属性应该与你的浏览器类型一致. GWT 所支持的浏览器"
"与 GWT 的版本有关, 以下是 GWT 所支持的浏览器 ID."

#. Tag: title
#: chapter-clientside.xml:152
#, no-c-format
msgid "GWT User Agents"
msgstr "GWT 支持的浏览器类型"

#. Tag: entry
#: chapter-clientside.xml:158
#, no-c-format
msgid "Identifier"
msgstr "浏览器 ID"

#. Tag: entry
#: chapter-clientside.xml:159
#, no-c-format
msgid "Name"
msgstr "浏览器名称"

#. Tag: entry
#: chapter-clientside.xml:164
#, no-c-format
msgid "<entry>ie6</entry>"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:165
#, no-c-format
msgid "Internet Explorer 6"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:168
#, no-c-format
msgid "<entry>ie8</entry>"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:169
#, no-c-format
msgid "Internet Explorer 8"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:172
#, no-c-format
msgid "gecko1_8"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:173
#, no-c-format
msgid "Mozilla Firefox 1.5 and later"
msgstr "Mozilla Firefox 1.5 及以上版本"

#. Tag: entry
#: chapter-clientside.xml:176
#, no-c-format
msgid "safari"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:177
#, no-c-format
msgid "Apple Safari and other Webkit-based browsers including Google Chrome"
msgstr "Apple Safari 以及其他基于 Webkit 的浏览器, 包括 Google Chrome"

#. Tag: entry
#: chapter-clientside.xml:180
#, no-c-format
msgid "opera"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:181
#, no-c-format
msgid "Opera"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:184
#, no-c-format
msgid "<entry>ie9</entry>"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:185
#, no-c-format
msgid "Internet Explorer 9"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:192
#, no-c-format
msgid ""
"For more information about the GWT Module XML Format, please see Google Web "
"Toolkit Developer Guide."
msgstr "关于 GWT 模块描述文件的 XML 格式, 请参见 Google Web Toolkit 开发指南."

#. Tag: title
#: chapter-clientside.xml:199
#, no-c-format
msgid "Compiling a Client-Side Module"
msgstr "编译客户端模块"

#. Tag: para
#: chapter-clientside.xml:201
#, no-c-format
msgid ""
"A client-side module, either a widget set or a pure client-side module, "
"needs to be compiled to JavaScript using the Vaadin Client Compiler. During "
"development, the Development Mode makes the compilation automatically when "
"you reload the page, provided that the module has been initially compiled "
"once with the compiler."
msgstr ""
"一个客户端模块, 无论是 widget set 还是纯客户端应用程序, 都需要使用 Vaadin 客"
"户端编译器来将它编译为 JavaScript. 开发过程中, 使用开发模式可以在你重新装载页"
"面时进行自动编译, 这个页面则会在初次编译时产生."

#. Tag: para
#: chapter-clientside.xml:209
#, no-c-format
msgid ""
"As most Vaadin add-ons include widgets, widget set compilation is usually "
"needed when using add-ons. In that case, the widget sets from different add-"
"ons are compiled into a <emphasis>project widget set</emphasis>, as "
"described in <xref linkend=\"addons\"/>."
msgstr ""
"由于大多数 Vaadin add-on 都包含 widget, 因此使用 add-on 时通常都需要编译 "
"widget set. 这种情况下, 来自不同 add-on 的多个 widget set 需要编译到一个 "
"<emphasis>project widget set</emphasis> 内, 详情请参见 <xref linkend=\"addons"
"\"/>."

#. Tag: title
#: chapter-clientside.xml:218
#, no-c-format
msgid "Vaadin Compiler Overview"
msgstr "Vaadin 编译器概述"

#. Tag: para
#: chapter-clientside.xml:220
#, no-c-format
msgid ""
"The Vaadin Client Compiler compiles Java to JavaScript. It is provided as "
"the <filename>vaadin-client-compiler</filename> JAR, which you can execute "
"with the <literal>-jar</literal> parameter for the Java runtime. It requires "
"the <filename>vaadin-client</filename> JAR, which contains the Vaadin client-"
"side framework."
msgstr ""
"Vaadin 客户端编译器将 Java 代码编译为 JavaScript. 编译器在 <filename>vaadin-"
"client-compiler</filename> JAR 文件中提供, 你可以使用 Java 命令的 <literal>-"
"jar</literal> 参数来执行这个 JAR 文件. 它依赖于 <filename>vaadin-client</"
"filename> JAR 文件, 其中包含 Vaadin 客户端 Framework."

#. Tag: para
#: chapter-clientside.xml:228
#, no-c-format
msgid ""
"The compiler compiles a <emphasis>client module</emphasis>, which can be "
"either a pure client-side module or a Vaadin widget set, that is, the Vaadin "
"Client-Side Engine that includes the widgets used in the application. The "
"client module is defined with a module descriptor, which was described in "
"<xref linkend=\"clientside.module\"/>."
msgstr ""
"编译器编译的对象是 <emphasis>客户端模块</emphasis>, 客户端模块可以是纯客户端"
"模块, 也可以是 Vaadin widget set. 也就是 Vaadin 客户端引擎, 其中包含应用程序"
"所使用的 widget. 客户端模块使用模块描述文件来定义, 详情请参见 <xref linkend="
"\"clientside.module\"/>."

#. Tag: para
#: chapter-clientside.xml:236
#, no-c-format
msgid ""
"The compiler writes the compilation result to a target folder that will "
"include the compiled JavaScript with any static resources included in the "
"module."
msgstr ""
"编译器将编译结果写入目标文件夹中, 其中包含编译产生的 JavaScript, 以及模块中包"
"含的一切静态资源."

#. Tag: title
#: chapter-clientside.xml:244
#, no-c-format
msgid "Compiling in Eclipse"
msgstr "在 Eclipse 环境中编译"

#. Tag: para
#: chapter-clientside.xml:246
#, no-c-format
msgid ""
"When the Vaadin Plugin is installed in Eclipse, you can simply click the "
"<guibutton>Compile Vaadin widgets</guibutton> button in the toolbar. It will "
"compile the widget set it finds from the project. If the project has "
"multiple widget sets, such as one for custom widgets and another one for the "
"project, you need to select the module descriptor of the widget set to "
"compile before clicking the button."
msgstr ""
"Eclipse 中安装 Vaadin Plugin 后, 你只需要点击工具栏中的 <guibutton>Compile "
"Vaadin widgets</guibutton> 按钮, 插件就会编译它在工程中找到的 widget set. 如"
"果工厂中存在多个 widget set, 比如一个自定义 widget, 以及一个工程 widget 的情"
"况, 你在点击编译按钮之前, 需要选择需要编译的 widget set 所对应的模块描述文件."

#. Tag: para
#: chapter-clientside.xml:255
#, no-c-format
msgid ""
"The compilation with Vaadin Plugin for Eclipse currently requires that the "
"module descriptor has suffix <filename>Widgetset.gwt.xml</filename>, "
"although you can use it to compile also other client-side modules than "
"widget sets. The result is written under <filename>WebContent/VAADIN/"
"widgetsets</filename> folder."
msgstr ""
"使用 Vaadin Plugin for Eclipse 来编译, 目前要求模块描述符文件名的后缀为 "
"<filename>Widgetset.gwt.xml</filename>, 虽然你也可以使用它来编译 widget set "
"之外的其他客户端模块. 编译结果会输出到 <filename>WebContent/VAADIN/"
"widgetsets</filename> 文件夹之下."

#. Tag: title
#: chapter-clientside.xml:265
#, no-c-format
msgid "Compiling with Ant"
msgstr "使用 Ant 编译"

#. Tag: para
#: chapter-clientside.xml:267
#, no-c-format
msgid ""
"You can find a script template for compiling widget sets with Ant and Ivy at "
"the <link xlink:href=\"http://vaadin.com/download/\">Vaadin download page</"
"link>. You can copy the build script to your project and, once configured, "
"run it with Ant."
msgstr ""
"在 <link xlink:href=\"http://vaadin.com/download/\">Vaadin download page</"
"link> 可以找到一段脚本模板, 这段脚本可以使用  Ant 和 Ivy 来编译 widget set. "
"你可以将这段脚本复制到你的工程中, 配置完成后, 就可以使用 Ant 来运行这段脚本."

#. Tag: title
#: chapter-clientside.xml:276
#, no-c-format
msgid "Compiling with Maven"
msgstr "使用 Maven 编译"

#. Tag: para
#: chapter-clientside.xml:278
#, no-c-format
msgid ""
"You can compile the widget set with the <literal>vaadin:compile</literal> "
"goal as follows:"
msgstr ""
"你可以使用 <literal>vaadin:compile</literal> goal 来编译 widget set, 如下:"

#. Tag: screen
#: chapter-clientside.xml:283
#, no-c-format
msgid ""
"<prompt>$</prompt> <command>mvn</command> <parameter>vaadin:compile</"
"parameter>"
msgstr ""

#. Tag: title
#: chapter-clientside.xml:288
#, no-c-format
msgid "Creating a Custom Widget"
msgstr "创建自定义 Widget"

#. Tag: para
#: chapter-clientside.xml:290
#, no-c-format
msgid ""
"Creating a new Vaadin component usually begins from making a client-side "
"widget, which is later integrated with a server-side counterpart to enable "
"server-side development. In addition, you can also choose to make pure "
"client-side widgets, a possibility which we also describe later in this "
"section."
msgstr ""
"创建一个新的 Vaadin 组件, 通常首先需要开发它的客户端 widget, 再与服务器端组件"
"集成, 然后才可以在服务器端开发中使用这个组件. 除此之外, 你也可以选择创建纯客"
"户端 widget, 这种情况我们会在本节之后的部分中介绍."

#. Tag: title
#: chapter-clientside.xml:299
#, no-c-format
msgid "A Basic Widget"
msgstr "一个简单的 Widget"

#. Tag: para
#: chapter-clientside.xml:301
#, no-c-format
msgid ""
"All widgets extend the <classname>Widget</classname> class or some of its "
"subclasses. You can extend any core GWT or supplementary Vaadin widgets. "
"Perhaps typically, an abstraction such as <classname>Composite</classname>. "
"The basic GWT widget component hierarchy is illustrated in <xref linkend="
"\"figure.clientside.widgets\"/>. Please see the GWT API documentation for a "
"complete description of the widget classes."
msgstr ""
"所有的 widget 都继承自 <classname>Widget</classname> 类, 或这个类的某个子类. "
"你可以继承任何一种 GWT 核心 widget, 或 Vaadin 扩充的 widget. 通常是继承某个抽"
"象类, 比如 <classname>Composite</classname>. GWT 基本 widget 组件的继承关系图"
"见 <xref linkend=\"figure.clientside.widgets\"/>. 关于 widget 类的完整说明, "
"请参见 GWT API 文档."

#. Tag: title
#: chapter-clientside.xml:312
#, no-c-format
msgid "GWT Widget Base Class Hierarchy"
msgstr "GWT Widget 基类继承关系图"

#. Tag: para
#: chapter-clientside.xml:323
#, no-c-format
msgid ""
"For example, we could extend the <classname>Label</classname> widget to "
"display some custom text."
msgstr ""
"比如, 为了显示某种自定义文字, 我们可以继承 <classname>Label</classname> "
"widget."

#. Tag: programlisting
#: chapter-clientside.xml:328
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[package com.example.myapp.client;\n"
"\n"
"import com.google.gwt.user.client.ui.Label;\n"
"\n"
"public class MyWidget extends Label {\n"
"    public static final String CLASSNAME = \"mywidget\";\n"
"\n"
"    public MyWidget() {\n"
"        setStyleName(CLASSNAME);\n"
"        setText(\"This is MyWidget\");\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:330
#, no-c-format
msgid ""
"The above example is largely what the Eclipse plugin generates as a widget "
"stub. It is a good practice to set a distinctive style class for the widget, "
"to allow styling it with CSS."
msgstr ""
"Eclipse plugin 自动生成的 widget 框架代码与上面的例子基本类似. 实际运用中建议"
"为 widget 设置一个独有的样式类, 以便使用 CSS 来控制它的样式."

#. Tag: para
#: chapter-clientside.xml:336
#, no-c-format
msgid ""
"The client-side source code <emphasis>must</emphasis> be contained in a "
"<filename>client</filename> package under the package of the descriptor "
"file, which is covered later."
msgstr ""
"客户端源代码 <emphasis>必须</emphasis> 包含在模块描述文件所指定的包之下的 "
"<filename>client</filename> 包中, 详情将在后文中介绍."

#. Tag: title
#: chapter-clientside.xml:344
#, no-c-format
msgid "Using the Widget"
msgstr "使用 Widget"

#. Tag: para
#: chapter-clientside.xml:346
#, no-c-format
msgid ""
"You can use a custom widget just like you would use any widget, possibly "
"integrating it with a server-side component, or in pure client-side modules "
"such as the following:"
msgstr ""
"你可以使用自定义 widget, 方法与使用其他 widget 完全一样, 可以将 widget 与服务"
"器端组件集成在一起, 也可以在纯客户端模块中使用 widget, 如下:"

#. Tag: programlisting
#: chapter-clientside.xml:352
#, no-c-format
msgid ""
"<![CDATA[public class MyEntryPoint implements EntryPoint {\n"
"    @Override\n"
"    public void onModuleLoad() {\n"
"        // Use the custom widget\n"
"        final MyWidget mywidget = new MyWidget();\n"
"        RootPanel.get().add(mywidget);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-clientside.xml:357
#, no-c-format
msgid "Debugging Client-Side Code"
msgstr "调试客户端代码"

#. Tag: para
#: chapter-clientside.xml:359
#, no-c-format
msgid ""
"Vaadin currently includes SuperDevMode for debugging client-side code right "
"in the browser."
msgstr "Vaadin 目前包括 SuperDevMode 模式, 可以直接在浏览器内调试客户端代码."

#. Tag: para
#: chapter-clientside.xml:364
#, no-c-format
msgid ""
"The predecessor of SuperDevMode, the GWT Development Mode, no longer works "
"in recent versions of Firefox and Chrome, because of certain API changes in "
"the browsers. There exists workarounds on some platforms, but for the sake "
"of simplicity, we recommend using the SuperDevMode."
msgstr ""
"SuperDevMode 的前身是 GWT Development Mode, 在最近版本的 Firefox 和 Chrome "
"中, 它已经不能工作了, 因为浏览器的某些 API 发生了变化. 它在某些平台上还可以工"
"作, 但为了简单起见, 我们推荐使用 SuperDevMode."

#. Tag: title
#: chapter-clientside.xml:372
#, no-c-format
msgid "Launching Development Mode"
msgstr "启动开发模式"

#. Tag: para
#: chapter-clientside.xml:374
#, no-c-format
msgid ""
"The Development Mode launches the application in the browser, compiles the "
"client-side module (or widget set) when the page is loaded, and allows "
"debugging the client-side code in Eclipse. You can launch the Development "
"Mode by running the <classname>com.google.gwt.dev.DevMode</classname> class. "
"It requires some parameters, as described later."
msgstr ""
"开发模式会在浏览器内启动应用程序, 并在页面装载时编译客户端模块(或 widget "
"set), 而且可以在 Eclipse 内调试客户端代码. 你可以运行 <classname>com.google."
"gwt.dev.DevMode</classname> 类来启动开发模式. 这个类需要一些参数, 详情请见后"
"文."

#. Tag: para
#: chapter-clientside.xml:382
#, no-c-format
msgid ""
"The Vaadin Plugin for Eclipse can create a launch configuration for the "
"Development Mode. In the Vaadin section of project properties, click the "
"<guibutton>Create development mode launch</guibutton> button. This creates a "
"new launch configuration in the project. You can edit the launch "
"configuration in <menuchoice><guimenu>Run</guimenu><guimenuitem>Run "
"Configurations</guimenuitem></menuchoice>."
msgstr ""
"Vaadin Plugin for Eclipse 可以为开发模式创建启动配置. 在工程属性的 Vaadin 页"
"中, 点击 <guibutton>Create development mode launch</guibutton> 按钮. 这样就可"
"以在工程中创建一个新的启动配置. 你可以通过菜单项 <menuchoice><guimenu>Run</"
"guimenu><guimenuitem>Run Configurations</guimenuitem></menuchoice> 来编辑这个"
"启动配置."

#. Tag: programlisting
#: chapter-clientside.xml:391
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[-noserver -war WebContent/VAADIN/widgetsets com."
"example.myproject.widgetset.MyWidgetSet -startupUrl http://localhost:8080/"
"myproject -bindAddress 127.0.0.1]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:393
#, no-c-format
msgid "The parameters are as follows:"
msgstr "相关参数如下:"

#. Tag: parameter
#: chapter-clientside.xml:399
#, no-c-format
msgid "-noserver"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:400
#, no-c-format
msgid ""
"Normally, the Development Mode launches its own Jetty server for hosting the "
"content. If you are developing the application under an IDE that deploys it "
"to a server, such as Eclipse, you can disable the Development Mode server "
"with this option."
msgstr ""
"开发模式通常会启动自带的 Jetty 服务器, 以便向客户端提供 Web 内容. 如果你开发"
"时使用的 IDE 会将应用程序发布到服务器上, 比如使用 Eclipse 时, 那么你可以使用"
"这个参数来禁用开发模式自带的服务器."

#. Tag: parameter
#: chapter-clientside.xml:408
#, no-c-format
msgid "-war"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:409
#, no-c-format
msgid ""
"Specifies path to the location where the JavaScript is to be compiled. When "
"developing a pure client-side module, this could be the "
"<filename>WebContent</filename> (in Eclipse) or some other folder under it. "
"When compiling widget sets, it must be <filename>WebContent/VAADIN/"
"widgetsets</filename>."
msgstr ""
"指定 JavaScript 编译输出的路径. 开发纯客户端模块时, 这个参数应该指向 "
"<filename>WebContent</filename> (使用 Eclipse 时) 或者其下的某个目录. 当编译 "
"widget set 时, 这个参数应该指向 <filename>WebContent/VAADIN/widgetsets</"
"filename> 目录."

#. Tag: parameter
#: chapter-clientside.xml:418
#, no-c-format
msgid "-startupUrl"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:419
#, no-c-format
msgid ""
"Specifies the address of the loader page for the application. For server-"
"side Vaadin applications, this should be the path to the Vaadin application "
"servlet, as defined in the deployment. For pure client-side widgets, it "
"should be the page where the application is included."
msgstr ""
"指定应用程序装载页面的地址. 对于服务器端 Vaadin 应用程序, 这个参数应该是 "
"Vaadin 应用程序 Servlet 的路径, 这个路径应该定义在部署描述文件中. 对于纯客户"
"端 widget, 这个参数应该是包含应用程序的页面地址."

#. Tag: parameter
#: chapter-clientside.xml:428
#, no-c-format
msgid "-bindAddress"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:429
#, no-c-format
msgid ""
"This is the IP address of the host in which the Development Mode runs. For "
"debugging on the development workstation, it can be just <literal>127.0.0.1</"
"literal>. Setting it as the proper IP address of the host enables remote "
"debugging."
msgstr ""
"这个参数指定开发模式运行时使用的主机 IP 地址. 如果仅在开发环境中调试代码, 这"
"个参数可以直接使用 <literal>127.0.0.1</literal>. 如果将这个参数设置为主机的一"
"个正确 IP 地址, 可以实现远程调试."

#. Tag: title
#: chapter-clientside.xml:440
#, no-c-format
msgid "Launching SuperDevMode"
msgstr "启动超级开发模式"

#. Tag: para
#: chapter-clientside.xml:442
#, no-c-format
msgid ""
"The SuperDevMode is much like the old Development Mode, except that it does "
"not require a browser plugin. Compilation from Java to JavaScript is done "
"incrementally, reducing the compilation time significantly. It also allows "
"debugging JavaScript and even Java right in the browser (currently only "
"supported in Chrome)."
msgstr ""
"超级开发模式与旧的开发模式很类似, 区别是它不需要浏览器插件. 从 Java 代码到 "
"JavaScript 的编译是增量进行的, 这样可以显著减少编译时间. 这种模式还可以在浏览"
"器之内直接调试 JavaScript 代码, 甚至直接调试 Java 代码(目前只支持 Chrome)."

#. Tag: para
#: chapter-clientside.xml:450
#, no-c-format
msgid "You can enable SuperDevMode as follows:"
msgstr "你可以通过以下步骤启动超级开发模式:"

#. Tag: para
#: chapter-clientside.xml:456
#, no-c-format
msgid ""
"You need to set a redirect property in the <filename>.gwt.xml</filename> "
"module descriptor as follows:"
msgstr ""
"你需要在 <filename>.gwt.xml</filename> 模块描述文件中设置一个重定向属性, 如"
"下:"

#. Tag: programlisting
#: chapter-clientside.xml:461
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<set-configuration-property name="
"\"devModeRedirectEnabled\" value=\"true\" />]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:463
#, no-c-format
msgid ""
"In addition, you need the <literal>xsiframe</literal> linker. It is included "
"in the <classname>com.vaadin.DefaultWidgetSet</classname> as well as in the "
"<classname>com.vaadin.Vaadin</classname> module. Otherwise, you need to "
"include it with:"
msgstr ""
"此外, 你还需要添加 <literal>xsiframe</literal> 链接. 它包含在 <classname>com."
"vaadin.DefaultWidgetSet</classname> 类和 <classname>com.vaadin.Vaadin</"
"classname> 模块中. 如果不存在这个链接, 你需要包含它, 如下:"

#. Tag: programlisting
#: chapter-clientside.xml:471
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[<add-linker name=\"xsiframe\" />]]>"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:474
#, no-c-format
msgid ""
"Compile the module (that is, the widget set), for example by clicking the "
"button in Eclipse."
msgstr "编译模块(也就是, widget set), 比如, 在 Eclipse 中点击编译按钮."

#. Tag: para
#: chapter-clientside.xml:480
#, no-c-format
msgid ""
"If you are using Eclipse, create a launch configuration for the SuperDevMode "
"by clicking the <guibutton>Create SuperDevMode launch</guibutton> in the "
"<guilabel>Vaadin</guilabel> section of the project properties."
msgstr ""
"如果你使用的是 Eclipse, 你需要为超级开发模式创建一个启动配置, 方法是在工程属"
"性的 <guilabel>Vaadin</guilabel> 页面中点击 <guibutton>Create SuperDevMode "
"launch</guibutton> 按钮."

#. Tag: listitem
#: chapter-clientside.xml:488
#, no-c-format
msgid ""
"The main class to execute should be <classname>com.google.gwt.dev.codeserver."
"CodeServer</classname>."
msgstr ""
"启动时执行的 main class 应该设置为 <classname>com.google.gwt.dev.codeserver."
"CodeServer</classname>."

#. Tag: listitem
#: chapter-clientside.xml:492
#, no-c-format
msgid ""
"The application takes the fully-qualified class name of the module (or "
"widget set) as parameter, for example, <classname>com.example.myproject."
"widgetset.MyprojectWidgetset</classname>."
msgstr ""
"应用程序的参数是模块(或 widget set)的类全名(包括包名), 比如, <classname>com."
"example.myproject.widgetset.MyprojectWidgetset</classname>."

#. Tag: listitem
#: chapter-clientside.xml:497
#, no-c-format
msgid ""
"Add project sources to the class path of the launch if they are not in the "
"project class path."
msgstr ""
"如果工程的源代码不在工程类路径中, 则需要将源代码添加到启动设定的类路径中."

#. Tag: para
#: chapter-clientside.xml:505
#, no-c-format
msgid ""
"The above configuration only needs to be done once to enable the "
"SuperDevMode. After that, you can launch the mode as follows:"
msgstr "以上设置只需要进行一次. 完成之后, 你就可以启动超级开发模式, 方法如下:"

#. Tag: listitem
#: chapter-clientside.xml:511
#, no-c-format
msgid ""
"Run the SuperDevMode Code Server with the launch configuration that you "
"created above. This perfoms the initial compilation of your module or widget "
"set."
msgstr ""
"使用前面创建的启动配置, 来运行超级开发模式的代码服务器. 此时会对你的模块或 "
"widget set 进行初次编译."

#. Tag: listitem
#: chapter-clientside.xml:516
#, no-c-format
msgid "Launch the servlet container for your application, for example, Tomcat."
msgstr "为你的应用程序启动 servlet 容器, 比如, Tomcat."

#. Tag: listitem
#: chapter-clientside.xml:519
#, no-c-format
msgid ""
"Open your browser with the application URL and add <literal>?superdevmode</"
"literal> parameter to the URL (see the notice below if you are not extending "
"<classname>DefaultWidgetSet</classname>). This recompiles the code, after "
"which the page is reloaded with the SuperDevMode. You can also use the "
"<literal>?debug</literal> parameter and then click the <guibutton>SDev</"
"guibutton> button in the debug console."
msgstr ""
"打开你的浏览器, 输入应用程序 URL, 在 URL 末尾添加 <literal>?superdevmode</"
"literal> 参数(如果你继承的不是 <classname>DefaultWidgetSet</classname>, 请参"
"见下面的注意事项). 这个操作会重新编译代码, 完成之后页面会在超级开发模式下重新"
"装载. 你也可以使用 <literal>?debug</literal> 参数, 然后在调试控制台中点击 "
"<guibutton>SDev</guibutton> 按钮, 即可进入超级开发模式."

#. Tag: para
#: chapter-clientside.xml:530
#, no-c-format
msgid ""
"If you make changes to the client-side code and refresh the page in the "
"browser, the client-side is recompiled and you see the results immediately."
msgstr ""
"如果你更改了客户端代码, 并在浏览器中刷新页面, 客户端代码会被重新编译, 你可以"
"立即看到修改后的结果."

#. Tag: para
#: chapter-clientside.xml:536
#, no-c-format
msgid ""
"The Step 3 above assumes that you extend <classname>DefaultWidgetSet</"
"classname> in your module. If that is not the case, you need to add the "
"following at the start of the <methodname>onModuleLoad()</methodname> method "
"of the module:"
msgstr ""
"上述第 3 步的前提是, 假定你的模块继承自 <classname>DefaultWidgetSet</"
"classname>. 如果不是这样, 你需要在模块的 <methodname>onModuleLoad()</"
"methodname> 方法的最开始部分添加以下代码:"

#. Tag: programlisting
#: chapter-clientside.xml:543
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[if (SuperDevMode.enableBasedOnParameter()) "
"{ return; }]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:545
#, no-c-format
msgid ""
"Alternatively, you can use the bookmarklets provided by the code server. Go "
"to <uri>http://localhost:9876/</uri> and drag the bookmarklets "
"\"<guilabel>Dev Mode On</guilabel>\" and \"<guilabel>Dev Mode Off</guilabel>"
"\" to the bookmarks bar"
msgstr ""
"或者, 你也可以使用代码服务器(Code Server)提供的 bookmarklet 功能. 首先进入 "
"<uri>http://localhost:9876/</uri>, 然后你可以将 \"<guilabel>Dev Mode On</"
"guilabel>\" 和 \"<guilabel>Dev Mode Off</guilabel>\" 的 bookmarklet 拖放到书"
"签栏中."

#. Tag: title
#: chapter-clientside.xml:554
#, no-c-format
msgid "Debugging Java Code in Chrome"
msgstr "在 Chrome 内调试 Java 代码"

#. Tag: para
#: chapter-clientside.xml:556
#, no-c-format
msgid ""
"Chrome supports source maps, which allow debugging Java source code from "
"which the JavaScript was compiled."
msgstr ""
"Chrome 支持代码映射功能, 使用这个功能, 你可以通过编译后的 JavaScript 来调试编"
"译前的 Java 源代码."

#. Tag: para
#: chapter-clientside.xml:561
#, no-c-format
msgid ""
"Open the Chrome Inspector by right-clicking and selecting <guilabel>Inspect "
"Element</guilabel>. Click the settings icon in the lower corner of the "
"window and check the <menuchoice><guimenu>Scripts</"
"guimenu><guimenuitem>Enable source maps</guimenuitem></menuchoice> option. "
"Refresh the page with the Inspector open, and you will see Java code instead "
"of JavaScript in the scripts tab."
msgstr ""
"在 Chrome 内点击鼠标右键, 然后选择 <guilabel>Inspect Element</guilabel> 即可"
"打开 Chrome Inspector. 在这个界面中点击窗口下方角落处的 \"设置\" 图标, 然后选"
"中 <menuchoice><guimenu>Scripts</guimenu><guimenuitem>Enable source maps</"
"guimenuitem></menuchoice> 选项. 保持 Inspector 界面打开, 刷新页面, 这时你会"
"在 script 栏中看到 Java 代码, 而不是之前的 JavaScript 代码."
