# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2014-11-07 16:16+0000\n"
"PO-Revision-Date: 2014-11-08 01:21+0900\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"X-Generator: Poedit 1.6.5\n"

#. Tag: title
#: chapter-clientsideapp.xml:11
#, no-c-format
msgid "Client-Side Applications"
msgstr "客户端应用程序"

#. Tag: para
#: chapter-clientsideapp.xml:13
#, no-c-format
msgid "This chapter describes how to develop client-side Vaadin applications."
msgstr "本章介绍如何开发客户端 Vaadin 应用程序."

#. Tag: emphasis
#: chapter-clientsideapp.xml:18
#, no-c-format
msgid ""
"Currently, we only give a brief introduction to the topic. Please refer to "
"the GWT documentation for a more complete treatment of the many GWT features."
msgstr ""
"目前, 我们只对这个问题进行一些非常简单的介绍. 关于 GWT 各种功能的详细介绍, 请"
"参见 GWT 文档."

#. Tag: title
#: chapter-clientsideapp.xml:24
#, no-c-format
msgid "Overview"
msgstr "概述"

#. Tag: para
#: chapter-clientsideapp.xml:26
#, no-c-format
msgid ""
"Vaadin allows developing client-side modules that run in the browser. Client-"
"side modules can use all the GWT widgets and some Vaadin-specific widgets, "
"as well as the same themes as server-side Vaadin applications. Client-side "
"applications run in the browser, even with no further server communications. "
"When paired with a server-side service to gain access to data storage and "
"server-side business logic, client-side applications can be considered \"fat "
"clients\", in comparison to the \"thin client\" approach of the server-side "
"Vaadin applications. The services can use the same back-end services as "
"server-side Vaadin applications. Fat clients are useful for a range of "
"purposes when you have a need for highly responsive UI logic, such as for "
"games or for serving a huge number of clients with possibly stateless server-"
"side code."
msgstr ""
"Vaadin 可以开发在浏览器中运行的客户端模块. 客户端模块可以使用所有的 GWT "
"widget, 以及一部分 Vaadin 特有的 widget, 此外, 和服务器端应用程序一样, 客户端"
"模块也可以使用 theme. 客户端应用程序运行在浏览器内, 甚至可以不与服务器端发生"
"通信. 如果客户端应用程序与服务器端配合, 通过服务器端服务来访问数据存储和业务"
"逻辑, 这种情况下客户端应用程序可以被看作 \"胖客户端\", 通常的服务器端 Vaadin "
"应用程序使用的则是 \"瘦客户端\" 方案. 服务器端服务可以使用与服务器端 Vaadin "
"应用程序相同的后端服务. 在需要 UI 逻辑响应度很高的场合, 胖客户端的用途十分广"
"泛, 比如游戏, 或者使用服务器端无状态服务来支持巨量客户端的情况."

#. Tag: title
#: chapter-clientsideapp.xml:42
#, no-c-format
msgid "Client-Side Application Architecture"
msgstr "客户端应用程序架构"

#. Tag: para
#: chapter-clientsideapp.xml:53
#, no-c-format
msgid ""
"A client-side application is defined as a <emphasis>module</emphasis>, which "
"has an <emphasis>entry-point</emphasis> class. Its "
"<methodname>onModuleLoad()</methodname> method is executed when the "
"JavaScript of the compiled module is loaded in the browser."
msgstr ""
"客户端应用程序通过 <emphasis>模块</emphasis> 来实现, 模块就是一个 "
"<emphasis>entry-point</emphasis> 类. 当模块编译后的 JavaScript 代码被装载进入"
"浏览器时, 会执行模块的 <methodname>onModuleLoad()</methodname> 方法."

#. Tag: para
#: chapter-clientsideapp.xml:60
#, no-c-format
msgid "Consider the following client-side application:"
msgstr "我们来看看以下客户端应用程序:"

#. Tag: programlisting
#: chapter-clientsideapp.xml:64
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[public class HelloWorld implements EntryPoint "
"{\n"
"    @Override\n"
"    public void onModuleLoad() {\n"
"        RootPanel.get().add(new Label(\"Hello, world!\"));\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:66
#, no-c-format
msgid ""
"The user interface of a client-side application is built under a HTML "
"<emphasis>root element</emphasis>, which can be accessed by "
"<methodname>RootPanel.get()</methodname>. The purpose and use of the entry-"
"point is documented in more detail in <xref linkend=\"clientsideapp."
"entrypoint\"/>. The user interface is built from <emphasis>widgets</"
"emphasis> hierarchically, just like with server-side Vaadin UIs. The built-"
"in widgets and their relationships are catalogued in <xref linkend="
"\"clientsidewidgets\"/>. You can also use many of the widgets in Vaadin add-"
"ons that have them, or make your own."
msgstr ""
"客户端应用程序的 UI 构建在一个 HTML <emphasis>根元素</emphasis> 之下, 这个根"
"元素可以通过 <methodname>RootPanel.get()</methodname> 方法得到. 关于 entry-"
"point 的设计意图以及使用方法的详细文档, 请参阅 <xref linkend=\"clientsideapp."
"entrypoint\"/>. 与服务器端 Vaadin UI 一样, 客户端应用程序的 UI 也使用 "
"<emphasis>widget</emphasis> 层级结构来构建. 内建的 widget 及其相互关系请参见 "
"<xref linkend=\"clientsidewidgets\"/>. 你也可以使用 Vaadin add-on 中的大量 "
"widget, 或者创建自己的 widget."

#. Tag: para
#: chapter-clientsideapp.xml:78
#, no-c-format
msgid ""
"A client-side module is defined in a <emphasis>module descriptor</emphasis>, "
"as described in <xref linkend=\"clientside.module\"/>. A module is compiled "
"from Java to JavaScript using the Vaadin Compiler, of which use was "
"described in <xref linkend=\"clientside.compiling\"/>. The <xref linkend="
"\"clientsideapp.compiling\"/> in this chapter gives further information "
"about compiling client-side applications. The resulting JavaScript can be "
"loaded to any web page, as described in <xref linkend=\"clientsideapp.loading"
"\"/>."
msgstr ""
"客户端模块通过 <emphasis>模块描述文件</emphasis> 来定义, 详情请参见 <xref "
"linkend=\"clientside.module\"/>. 模块使用 Java 开发, 然后通过 Vaadin 编译器编"
"译为 JavaScript 代码, Vaadin 编译器的使用请参见 <xref linkend=\"clientside."
"compiling\"/>. 本章的 <xref linkend=\"clientsideapp.compiling\"/> 将介绍客户"
"端应用程序编译的更多细节. 编译产生的 JavaScript 可以通过任何 Web 页面来装载, "
"详情请参见 <xref linkend=\"clientsideapp.loading\"/>."

#. Tag: para
#: chapter-clientsideapp.xml:89
#, no-c-format
msgid ""
"The client-side user interface can be built declaratively using the included "
"<emphasis>UI Binder</emphasis>."
msgstr ""
"也可以使用附带的 <emphasis>UI Binder</emphasis> 声明式(declaratively)地构建客"
"户端 UI."

#. Tag: para
#: chapter-clientsideapp.xml:95
#, no-c-format
msgid ""
"The servlet for processing RPC calls from the client-side can be generated "
"automatically using the included compiler."
msgstr "负责处理客户端 RPC 调用的 Servlet, 可以使用附带的编译器自动生成."

#. Tag: para
#: chapter-clientsideapp.xml:100
#, no-c-format
msgid ""
"Even with regular server-side Vaadin applications, it may be useful to "
"provide an off-line mode if the connection is closed. An off-line mode can "
"persist data in a local store in the browser, thereby avoiding the need for "
"server-side storage, and transmit the data to the server when the connection "
"is again available. Such a pattern is commonly used with Vaadin TouchKit."
msgstr ""
"即使是通常的服务器端 Vaadin 应用程序, 如果能在网络连接断开时提供离线工作模"
"式, 也是非常有用的. 离线模式可以将数据保存在浏览器的本地存储中, 因此可以避免"
"使用服务器端存储能力, 然后等待连接恢复后再将数据发动到服务器. 这种模式通常会"
"与 Vaadin TouchKit 一起配合使用."

#. Tag: title
#: chapter-clientsideapp.xml:112
#, no-c-format
msgid "Client-Side Module Entry-Point"
msgstr "客户端模块的 Entry-Point"

#. Tag: para
#: chapter-clientsideapp.xml:114
#, no-c-format
msgid ""
"A client-side application requires an <emphasis>entry-point</emphasis> where "
"the execution starts, much like the <methodname>init()</methodname> method "
"in server-side Vaadin UIs."
msgstr ""
"客户端应用程序需要一个 <emphasis>entry-point</emphasis>, entry-point 就是程序"
"执行的入口, 类似于服务器端 Vaadin UI 中的 <methodname>init()</methodname> 方"
"法."

#. Tag: para
#: chapter-clientsideapp.xml:120
#, no-c-format
msgid "Consider the following application:"
msgstr "我们来看看以下应用程序:"

#. Tag: programlisting
#: chapter-clientsideapp.xml:124
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[package com.example.myapp.client;\n"
"\n"
"import com.google.gwt.core.client.EntryPoint;\n"
"import com.google.gwt.event.dom.client.ClickEvent;\n"
"import com.google.gwt.event.dom.client.ClickHandler;\n"
"import com.google.gwt.user.client.ui.RootPanel;\n"
"import com.vaadin.ui.VButton;\n"
"\n"
"public class MyEntryPoint implements EntryPoint {\n"
"    @Override\n"
"    public void onModuleLoad() {\n"
"        // Create a button widget\n"
"        Button button = new Button();\n"
"        button.setText(\"Click me!\");\n"
"        button.addClickHandler(new ClickHandler() {\n"
"            @Override\n"
"            public void onClick(ClickEvent event) {\n"
"                mywidget.setText(\"Hello, world!\");\n"
"            }\n"
"        });\n"
"        RootPanel.get().add(button);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:126
#, no-c-format
msgid ""
"Before compiling, the entry-point needs to be defined in a module "
"descriptor, as described in the next section."
msgstr "在编译之前, 需要在一个模块描述文件中定义 entry-point, 详情请参阅下节."

#. Tag: title
#: chapter-clientsideapp.xml:132
#, no-c-format
msgid "Module Descriptor"
msgstr "模块描述文件"

#. Tag: para
#: chapter-clientsideapp.xml:134
#, no-c-format
msgid ""
"The entry-point of a client-side application is defined, along with any "
"other configuration, in a client-side module descriptor, described in <xref "
"linkend=\"clientside.module\"/>. The descriptor is an XML file with suffix "
"<filename>.gwt.xml</filename>."
msgstr ""
"客户端应用程序的 entry-point 与其他各种配置一起, 定义在客户端模块描述文件中, "
"详情请参见 <xref linkend=\"clientside.module\"/>. 模块描述文件是一个 XML 文"
"件, 扩展名是 <filename>.gwt.xml</filename>."

#. Tag: programlisting
#: chapter-clientsideapp.xml:141
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<!DOCTYPE module PUBLIC\n"
"\"-//Google Inc.//DTD Google Web Toolkit 1.7.0//EN\"\n"
"\"http://google-web-toolkit.googlecode.com/svn/tags/1.7.0/distro-source/core/"
"src/gwt-module.dtd\">\n"
"<module>\n"
"    <!-- Builtin Vaadin and GWT widgets -->\n"
"    <inherits name=\"com.vaadin.Vaadin\" />\n"
"\n"
"    <!-- The entry-point for the client-side application -->\n"
"    <entry-point class=\"com.example.myapp.client.MyEntryPoint\"/>\n"
"</module>]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:143
#, no-c-format
msgid ""
"You might rather want to inherit the <classname>com.google.gwt.user.User</"
"classname> to get just the basic GWT widgets, and not the Vaadin-specific "
"widgets and classes, most of which are unusable in pure client-side "
"applications."
msgstr ""
"你可能会选择继承 <classname>com.google.gwt.user.User</classname>, 只使用基本"
"的 GWT widget, 而不使用 Vaadin 专有的 widget 和类, 在纯客户端应用程序中, 这"
"些 Vaadin 专有 widget 和类大多是无法使用的."

#. Tag: para
#: chapter-clientsideapp.xml:150
#, no-c-format
msgid ""
"You can put static resources, such as images or CSS stylesheets, in a "
"<filename>public</filename> folder (not a Java package) under the folder of "
"the descriptor file. When the module is compiled, the resources are copied "
"to the output folder. Normally in pure client-side application development, "
"it is easier to load them in the HTML host file or in a "
"<classname>ClientBundle</classname> (see GWT documentation), but these "
"methods are not compatible with server-side component integration, if you "
"use the resources for that purpose as well."
msgstr ""
"你可以将静态资源, 比如图片或 CSS 样式表, 放在模块描述文件所在文件夹之下的 "
"<filename>public</filename> 文件夹内(注意, 不是 Java 包). 编译模块时, 这些资"
"源会被复制到输出文件夹中. 通常, 在纯客户端应用程序开发中, 使用 HTML 宿主文件"
"(HTML host file), 或使用 <classname>ClientBundle</classname> 来装载这些资源文"
"件会比较容易一些(详情请参见 GWT 文档), 但要注意, 如果你的资源文件也用于与服务"
"器端组件的集成, 那么前面这些方法是不兼容的, ."

#. Tag: title
#: chapter-clientsideapp.xml:164
#, no-c-format
msgid "Compiling and Running a Client-Side Application"
msgstr "编译和运行客户端应用程序"

#. Tag: emphasis
#: chapter-clientsideapp.xml:167
#, no-c-format
msgid ""
"Compilation of client-side modules other than widget sets with the Vaadin "
"Plugin for Eclipse has recent changes and limitations at the time of writing "
"of this edition and the information given here may not be accurate."
msgstr ""
"在编写本书的当前版本时, 使用 Vaadin Plugin for Eclipse 来编译 widget set 之外"
"的客户端模块, 最近进行了一些功能更新, 并存在一些限制, 因此本书中给出的信息可"
"能并不完全准确."

#. Tag: para
#: chapter-clientsideapp.xml:173
#, no-c-format
msgid ""
"The application needs to be compiled into JavaScript to run it in a browser. "
"For deployment, and also initially for the first time when running the "
"Development Mode, you need to do the compilation with the Vaadin Client "
"Compiler, as described in <xref linkend=\"clientside.compiling\"/>."
msgstr ""
"应用程序需要编译为 JavaScript 才能在浏览器内运行. 在部署应用程序之前, 以及在"
"初次使用开发模式时, 你需要使用 Vaadin 客户端编译器进行编译, 详情请参见 <xref "
"linkend=\"clientside.compiling\"/>."

#. Tag: para
#: chapter-clientsideapp.xml:181
#, no-c-format
msgid ""
"During development, it is easiest to use the SuperDevMode, which also "
"quickly launching the client-side code and also allows debugging. See <xref "
"linkend=\"clientside.debugging\"/> for more details."
msgstr ""
"在开发过程中, 最简单的方式是使用 SuperDevMode, 这种方式可以快速地启动客户端代"
"码, 并且支持调试功能. 详情请参见 <xref linkend=\"clientside.debugging\"/>."

#. Tag: title
#: chapter-clientsideapp.xml:189
#, no-c-format
msgid "Loading a Client-Side Application"
msgstr "装载客户端应用程序"

#. Tag: para
#: chapter-clientsideapp.xml:191
#, no-c-format
msgid ""
"You can load the JavaScript code of a client-side application in an HTML "
"<emphasis>host page</emphasis> by including it with a <literal>&lt;script&gt;"
"</literal> tag, for example as follows:"
msgstr ""
"你可以使用 HTML <emphasis>宿主页面(host page)</emphasis> 来装载客户端应用程序"
"的 JavaScript 代码, 方法是使用 <literal>&lt;script&gt;</literal> 标签来 "
"include 这些 JavaScript , 如下:"

#. Tag: programlisting
#: chapter-clientsideapp.xml:197
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
"  <head>\n"
"    <meta http-equiv=\"Content-Type\"\n"
"          content=\"text/html; charset=UTF-8\" />\n"
"\n"
"    <title>Embedding a Vaadin Application in HTML Page</title>\n"
"\n"
"    <!-- Load the Vaadin style sheet -->\n"
"    <link rel=\"stylesheet\"\n"
"          type=\"text/css\"\n"
"          href=\"/myproject/VAADIN/themes/reindeer/legacy-styles.css\"/>\n"
"  </head>\n"
"\n"
"  <body>\n"
"    <h1>A Pure Client-Side Application</h1>\n"
"    \n"
"    <script type=\"text/javascript\" language=\"javascript\"\n"
"            src=\"clientside/com.example.myapp.MyModule/\n"
"                 com.example.myapp.MyModule.nocache.js\">\n"
"    </script>\n"
"  </body>\n"
"</html>]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:199
#, no-c-format
msgid ""
"The JavaScript module is loaded in a <literal>&lt;script&gt;</literal> "
"element. The <literal>src</literal> parameter should be a relative link from "
"the host page to the compiled JavaScript module."
msgstr ""
"JavaScript 模块通过 <literal>&lt;script&gt;</literal> 元素来装载. "
"<literal>src</literal> 属性应该是从宿主页面到编译后的 JavaScript 模块的相对地"
"址."

#. Tag: para
#: chapter-clientsideapp.xml:205
#, no-c-format
msgid ""
"If the application uses any supplementary Vaadin widgets, and not just core "
"GWT widgets, you need to include the Vaadin theme as was done in the "
"example. The exact path to the style file depends on your project structure "
"- the example is given for a regular Vaadin application where themes are "
"contained in the <filename>VAADIN</filename> folder in the WAR."
msgstr ""
"除 GWT 的核心 widget 之外, 如果应用程序还使用了其他的 Vaadin widget, 如上例所"
"示, 你还需要 include 相关的 Vaadin theme. 样式文件的确切路径取决于你的工程结"
"构 - 上例中的路径与通常的 Vaadin 应用程序是一致的, 这个例子中的 theme 放在 "
"WAR 内的 <filename>VAADIN</filename> 文件夹中."

#. Tag: para
#: chapter-clientsideapp.xml:213
#, no-c-format
msgid ""
"In addition to CSS and scripts, you can load any other resources needed by "
"the client-side application in the host page."
msgstr ""
"除 CSS 和脚本之外, 你还可以在宿主页面中装载客户端应用程序所需要的其他任何资"
"源."
