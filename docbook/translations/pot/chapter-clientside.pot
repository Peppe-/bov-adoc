# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-11-13 16:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-clientside.xml:11
#, no-c-format
msgid "Client-Side Vaadin Development"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:13
#, no-c-format
msgid "This chapter gives an overview of the Vaadin client-side framework, its architecture, and development tools."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:19
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:21
#, no-c-format
msgid "As noted in the introduction, Vaadin supports two development models: server-side and client-side. Client-side Vaadin code is executed in the web browser as JavaScript code. The code is written in Java, like all Vaadin code, and then compiled to JavaScript with the <emphasis>Vaadin Client Compiler</emphasis>. You can develop client-side widgets and integrate them with server-side counterpart components to allow using them in server-side Vaadin applications. That is how the components in the server-side framework and in most add-ons are done. Alternatively, you can create pure client-side GWT applications, which you can simply load in the browser from an HTML page and use even without server-side connectivity."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:34
#, no-c-format
msgid "The client-side framework is based on the Google Web Toolkit (GWT), with added features and bug fixes. Vaadin is compatible with GWT to the extent of the basic GWT feature set. Vaadin Ltd is a member of the GWT Steering Committee, working on the future direction of GWT together with Google and other supporters of GWT."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:43
#, no-c-format
msgid "Widgets and Components"
msgstr ""

#. Tag: primary
#: chapter-clientside.xml:45
#, no-c-format
msgid "widget, definition"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:45
#, no-c-format
msgid "Google Web Toolkit uses the term <emphasis>widget</emphasis> for user interface components. In this book, we use the term widget to refer to client-side components, while using the term <emphasis>component</emphasis> in a general sense and also in the special sense for server-side components."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:54
#, no-c-format
msgid "The main idea in server-side Vaadin development is to render the server-side components in the browser with the Client-Side Engine. The engine is essentially a set of widgets paired with <emphasis>connectors</emphasis> that serialize their state and events with the server-side counterpart components. The client-side engine is technically called a <emphasis>widget set</emphasis>, to describe the fact that it mostly consists of widgets and that widget sets can be combined, as described later."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:66
#, no-c-format
msgid "Installing the Client-Side Development Environment"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:68
#, no-c-format
msgid "The installation of the client-side development libraries is described in <xref linkend=\"getting-started\"/>. You especially need the <filename>vaadin-client</filename> library, which contains the client-side Java API, and <filename>vaadin-client-compiler</filename>, which contains the Vaadin Client Compiler for compiling Java to JavaScript."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:78
#, no-c-format
msgid "Client-Side Module Descriptor"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:80
#, no-c-format
msgid "Client-side Vaadin modules, such as the Vaadin Client-Side Engine (widget set) or pure client-side applications, that are to be compiled to JavaScript, are defined in a <emphasis>module descriptor</emphasis> (<filename>.gwt.xml</filename>) file."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:87
#, no-c-format
msgid "When defining a widget set to build the Vaadin client-side engine, the only necessary task is to inherit a base widget set. If you are developing a regular widget set, you should normally inherit the <classname>DefaultWidgetSet</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:94
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<!DOCTYPE module PUBLIC\n"
"  \"-//Google Inc.//DTD Google Web Toolkit 1.7.0//EN\"\n"
"  \"http://google-web-toolkit.googlecode.com/svn/tags/1.7.0/distro-source/core/src/gwt-module.dtd\">\n"
"\n"
"<module>\n"
"    <!-- Inherit the default widget set -->\n"
"    <inherits name=\"com.vaadin.DefaultWidgetSet\" />\n"
"</module>]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:96
#, no-c-format
msgid "If you are developing a pure client-side application, you should instead inherit <classname>com.vaadin.Vaadin</classname>, as described in <xref linkend=\"clientsideapp\"/>. In that case, the module descriptor also needs an entry-point."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:103
#, no-c-format
msgid "If you are using the Eclipse IDE, the New Vaadin Widget wizard will automatically create the GWT module descriptor. See <xref linkend=\"gwt.eclipse.widget\"/> for detailed instructions."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:110
#, no-c-format
msgid "Specifying a Stylesheet"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:112
#, no-c-format
msgid "A client-side module can include CSS stylesheets. When the module is compiled, these stylesheets are copied to the output target. In the module descriptor, define a <literal>stylesheet</literal> element."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:119
#, no-c-format
msgid "For example, if you are developing a custom widget and want to have a default stylesheet for it, you could define it as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:124
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[<stylesheet src=\"mywidget/styles.css\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:126
#, no-c-format
msgid "The specified path is relative to the <emphasis>public</emphasis> folder under the folder of the module descriptor."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:133
#, no-c-format
msgid "Limiting Compilation Targets"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:135
#, no-c-format
msgid "Compiling widget sets takes considerable time. You can reduce the compilation time significantly by compiling the widget sets only for your browser, which is useful during development. You can do this by setting the <parameter>user.agent</parameter> property in the module descriptor."
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:143
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[<set-property name=\"user.agent\" value=\"gecko1_8\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:145
#, no-c-format
msgid "The <parameter>value</parameter> attribute should match your browser. The browsers supported by GWT depend on the GWT version, below is a list of browser identifiers supported by GWT."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:152
#, no-c-format
msgid "GWT User Agents"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:158
#, no-c-format
msgid "Identifier"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:159
#, no-c-format
msgid "Name"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:164
#, no-c-format
msgid "<entry>ie6</entry>"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:165
#, no-c-format
msgid "Internet Explorer 6"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:168
#, no-c-format
msgid "<entry>ie8</entry>"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:169
#, no-c-format
msgid "Internet Explorer 8"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:172
#, no-c-format
msgid "gecko1_8"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:173
#, no-c-format
msgid "Mozilla Firefox 1.5 and later"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:176
#, no-c-format
msgid "safari"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:177
#, no-c-format
msgid "Apple Safari and other Webkit-based browsers including Google Chrome"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:180
#, no-c-format
msgid "opera"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:181
#, no-c-format
msgid "Opera"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:184
#, no-c-format
msgid "<entry>ie9</entry>"
msgstr ""

#. Tag: entry
#: chapter-clientside.xml:185
#, no-c-format
msgid "Internet Explorer 9"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:192
#, no-c-format
msgid "For more information about the GWT Module XML Format, please see Google Web Toolkit Developer Guide."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:199
#, no-c-format
msgid "Compiling a Client-Side Module"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:201
#, no-c-format
msgid "A client-side module, either a widget set or a pure client-side module, needs to be compiled to JavaScript using the Vaadin Client Compiler. During development, the Development Mode makes the compilation automatically when you reload the page, provided that the module has been initially compiled once with the compiler."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:209
#, no-c-format
msgid "As most Vaadin add-ons include widgets, widget set compilation is usually needed when using add-ons. In that case, the widget sets from different add-ons are compiled into a <emphasis>project widget set</emphasis>, as described in <xref linkend=\"addons\"/>."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:218
#, no-c-format
msgid "Vaadin Compiler Overview"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:220
#, no-c-format
msgid "The Vaadin Client Compiler compiles Java to JavaScript. It is provided as the <filename>vaadin-client-compiler</filename> JAR, which you can execute with the <literal>-jar</literal> parameter for the Java runtime. It requires the <filename>vaadin-client</filename> JAR, which contains the Vaadin client-side framework."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:228
#, no-c-format
msgid "The compiler compiles a <emphasis>client module</emphasis>, which can be either a pure client-side module or a Vaadin widget set, that is, the Vaadin Client-Side Engine that includes the widgets used in the application. The client module is defined with a module descriptor, which was described in <xref linkend=\"clientside.module\"/>."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:236
#, no-c-format
msgid "The compiler writes the compilation result to a target folder that will include the compiled JavaScript with any static resources included in the module."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:244
#, no-c-format
msgid "Compiling in Eclipse"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:246
#, no-c-format
msgid "When the Vaadin Plugin is installed in Eclipse, you can simply click the <guibutton>Compile Vaadin widgets</guibutton> button in the toolbar. It will compile the widget set it finds from the project. If the project has multiple widget sets, such as one for custom widgets and another one for the project, you need to select the module descriptor of the widget set to compile before clicking the button."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:255
#, no-c-format
msgid "The compilation with Vaadin Plugin for Eclipse currently requires that the module descriptor has suffix <filename>Widgetset.gwt.xml</filename>, although you can use it to compile also other client-side modules than widget sets. The result is written under <filename>WebContent/VAADIN/widgetsets</filename> folder."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:265
#, no-c-format
msgid "Compiling with Ant"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:267
#, no-c-format
msgid "You can find a script template for compiling widget sets with Ant and Ivy at the <link xlink:href=\"http://vaadin.com/download/\">Vaadin download page</link>. You can copy the build script to your project and, once configured, run it with Ant."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:276
#, no-c-format
msgid "Compiling with Maven"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:278
#, no-c-format
msgid "You can compile the widget set with the <literal>vaadin:compile</literal> goal as follows:"
msgstr ""

#. Tag: screen
#: chapter-clientside.xml:283
#, no-c-format
msgid "<prompt>$</prompt> <command>mvn</command> <parameter>vaadin:compile</parameter>"
msgstr ""

#. Tag: title
#: chapter-clientside.xml:288
#, no-c-format
msgid "Creating a Custom Widget"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:290
#, no-c-format
msgid "Creating a new Vaadin component usually begins from making a client-side widget, which is later integrated with a server-side counterpart to enable server-side development. In addition, you can also choose to make pure client-side widgets, a possibility which we also describe later in this section."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:299
#, no-c-format
msgid "A Basic Widget"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:301
#, no-c-format
msgid "All widgets extend the <classname>Widget</classname> class or some of its subclasses. You can extend any core GWT or supplementary Vaadin widgets. Perhaps typically, an abstraction such as <classname>Composite</classname>. The basic GWT widget component hierarchy is illustrated in <xref linkend=\"figure.clientside.widgets\"/>. Please see the GWT API documentation for a complete description of the widget classes."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:312
#, no-c-format
msgid "GWT Widget Base Class Hierarchy"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:323
#, no-c-format
msgid "For example, we could extend the <classname>Label</classname> widget to display some custom text."
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:328
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[package com.example.myapp.client;\n"
"\n"
"import com.google.gwt.user.client.ui.Label;\n"
"\n"
"public class MyWidget extends Label {\n"
"    public static final String CLASSNAME = \"mywidget\";\n"
"\n"
"    public MyWidget() {\n"
"        setStyleName(CLASSNAME);\n"
"        setText(\"This is MyWidget\");\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:330
#, no-c-format
msgid "The above example is largely what the Eclipse plugin generates as a widget stub. It is a good practice to set a distinctive style class for the widget, to allow styling it with CSS."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:336
#, no-c-format
msgid "The client-side source code <emphasis>must</emphasis> be contained in a <filename>client</filename> package under the package of the descriptor file, which is covered later."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:344
#, no-c-format
msgid "Using the Widget"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:346
#, no-c-format
msgid "You can use a custom widget just like you would use any widget, possibly integrating it with a server-side component, or in pure client-side modules such as the following:"
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:352
#, no-c-format
msgid ""
"<![CDATA[public class MyEntryPoint implements EntryPoint {\n"
"    @Override\n"
"    public void onModuleLoad() {\n"
"        // Use the custom widget\n"
"        final MyWidget mywidget = new MyWidget();\n"
"        RootPanel.get().add(mywidget);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-clientside.xml:357
#, no-c-format
msgid "Debugging Client-Side Code"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:359
#, no-c-format
msgid "Vaadin includes two application execution modes for debugging client-side code. The Development Mode compiles the client-side module when you load the page and runs it in the browser, using a browser plugin to communicate with the debugger. The \"SuperDevMode\" allows debugging the code right in the browser, without even need to install a plugin."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:368
#, no-c-format
msgid "Launching Development Mode"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:370
#, no-c-format
msgid "The Development Mode launches the application in the browser, compiles the client-side module (or widget set) when the page is loaded, and allows debugging the client-side code in Eclipse. You can launch the Development Mode by running the <classname>com.google.gwt.dev.DevMode</classname> class. It requires some parameters, as described later."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:378
#, no-c-format
msgid "The Vaadin Plugin for Eclipse can create a launch configuration for the Development Mode. In the Vaadin section of project properties, click the <guibutton>Create development mode launch</guibutton> button. This creates a new launch configuration in the project. You can edit the launch configuration in <menuchoice><guimenu>Run</guimenu><guimenuitem>Run Configurations</guimenuitem></menuchoice>."
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:387
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[-noserver -war WebContent/VAADIN/widgetsets com.example.myproject.widgetset.MyWidgetSet -startupUrl http://localhost:8080/myproject -bindAddress 127.0.0.1]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:389
#, no-c-format
msgid "The parameters are as follows:"
msgstr ""

#. Tag: parameter
#: chapter-clientside.xml:395
#, no-c-format
msgid "-noserver"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:396
#, no-c-format
msgid "Normally, the Development Mode launches its own Jetty server for hosting the content. If you are developing the application under an IDE that deploys it to a server, such as Eclipse, you can disable the Development Mode server with this option."
msgstr ""

#. Tag: parameter
#: chapter-clientside.xml:404
#, no-c-format
msgid "-war"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:405
#, no-c-format
msgid "Specifies path to the location where the JavaScript is to be compiled. When developing a pure client-side module, this could be the <filename>WebContent</filename> (in Eclipse) or some other folder under it. When compiling widget sets, it must be <filename>WebContent/VAADIN/widgetsets</filename>."
msgstr ""

#. Tag: parameter
#: chapter-clientside.xml:414
#, no-c-format
msgid "-startupUrl"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:415
#, no-c-format
msgid "Specifies the address of the loader page for the application. For server-side Vaadin applications, this should be the path to the Vaadin application servlet, as defined in the deployment. For pure client-side widgets, it should be the page where the application is included."
msgstr ""

#. Tag: parameter
#: chapter-clientside.xml:424
#, no-c-format
msgid "-bindAddress"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:425
#, no-c-format
msgid "This is the IP address of the host in which the Development Mode runs. For debugging on the development workstation, it can be just <literal>127.0.0.1</literal>. Setting it as the proper IP address of the host enables remote debugging."
msgstr ""

#. Tag: title
#: chapter-clientside.xml:436
#, no-c-format
msgid "Launching SuperDevMode"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:438
#, no-c-format
msgid "The SuperDevMode is much like the regular Development Mode, except that it does not require a browser plugin. Compilation from Java to JavaScript is done incrementally, reducing the compilation time significantly. It also allows debugging JavaScript and even Java right in the browser (currently only supported in Chrome)."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:446
#, no-c-format
msgid "You can enable SuperDevMode as follows:"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:452
#, no-c-format
msgid "You need to set a redirect property in the <filename>.gwt.xml</filename> module descriptor as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:457
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[<set-configuration-property name=\"devModeRedirectEnabled\" value=\"true\" />]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:459
#, no-c-format
msgid "In addition, you need the <literal>xsiframe</literal> linker. It is included in the <classname>com.vaadin.DefaultWidgetSet</classname> as well as in the <classname>com.vaadin.Vaadin</classname> module. Otherwise, you need to include it with:"
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:467
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[<add-linker name=\"xsiframe\" />]]>"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:470
#, no-c-format
msgid "Compile the module (that is, the widget set), for example by clicking the button in Eclipse."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:476
#, no-c-format
msgid "If you are using Eclipse, create a launch configuration for the SuperDevMode by clicking the <guibutton>Create SuperDevMode launch</guibutton> in the <guilabel>Vaadin</guilabel> section of the project properties."
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:484
#, no-c-format
msgid "The main class to execute should be <classname>com.google.gwt.dev.codeserver.CodeServer</classname>."
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:488
#, no-c-format
msgid "The application takes the fully-qualified class name of the module (or widget set) as parameter, for example, <classname>com.example.myproject.widgetset.MyprojectWidgetset</classname>."
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:493
#, no-c-format
msgid "Add project sources to the class path of the launch if they are not in the project class path."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:501
#, no-c-format
msgid "The above configuration only needs to be done once to enable the SuperDevMode. After that, you can launch the mode as follows:"
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:507
#, no-c-format
msgid "Run the SuperDevMode Code Server with the launch configuration that you created above. This perfoms the initial compilation of your module or widget set."
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:512
#, no-c-format
msgid "Launch the servlet container for your application, for example, Tomcat."
msgstr ""

#. Tag: listitem
#: chapter-clientside.xml:515
#, no-c-format
msgid "Open your browser with the application URL and add <literal>?superdevmode</literal> parameter to the URL (see the notice below if you are not extending <classname>DefaultWidgetSet</classname>). This recompiles the code, after which the page is reloaded with the SuperDevMode. You can also use the <literal>?debug</literal> parameter and then click the <guibutton>SDev</guibutton> button in the debug console."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:526
#, no-c-format
msgid "If you make changes to the client-side code and refresh the page in the browser, the client-side is recompiled and you see the results immediately."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:532
#, no-c-format
msgid "The Step 3 above assumes that you extend <classname>DefaultWidgetSet</classname> in your module. If that is not the case, you need to add the following at the start of the <methodname>onModuleLoad()</methodname> method of the module:"
msgstr ""

#. Tag: programlisting
#: chapter-clientside.xml:539
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[if (SuperDevMode.enableBasedOnParameter()) { return; }]]>"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:541
#, no-c-format
msgid "Alternatively, you can use the bookmarklets provided by the code server. Go to <uri>http://localhost:9876/</uri> and drag the bookmarklets \"<guilabel>Dev Mode On</guilabel>\" and \"<guilabel>Dev Mode Off</guilabel>\" to the bookmarks bar"
msgstr ""

#. Tag: title
#: chapter-clientside.xml:549
#, no-c-format
msgid "Debugging Java Code in Chrome"
msgstr ""

#. Tag: para
#: chapter-clientside.xml:551
#, no-c-format
msgid "Chrome supports source maps, which allow debugging Java source code from which the JavaScript was compiled."
msgstr ""

#. Tag: para
#: chapter-clientside.xml:556
#, no-c-format
msgid "Open the Chrome Inspector by right-clicking and selecting <guilabel>Inspect Element</guilabel>. Click the settings icon in the lower corner of the window and check the <menuchoice><guimenu>Scripts</guimenu><guimenuitem>Enable source maps</guimenuitem></menuchoice> option. Refresh the page with the Inspector open, and you will see Java code instead of JavaScript in the scripts tab."
msgstr ""
