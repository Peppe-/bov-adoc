# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-11-28 14:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-components.xml:11
#, no-c-format
msgid "User Interface Components"
msgstr ""

#. Tag: para
#: chapter-components.xml:13
#, no-c-format
msgid "This chapter provides an overview and a detailed description of all non-layout components in Vaadin."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:19
#, no-c-format
msgid "Because of pressing release schedules to get this edition to your hands, some topics still require revision for Vaadin 7, especially the data binding of the <classname>Table</classname> component. Please consult the web version once it is updated, or the next print edition."
msgstr ""

#. Tag: title
#: chapter-components.xml:26
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-components.xml:28
#, no-c-format
msgid "Vaadin provides a comprehensive set of user interface components and allows you to define custom components. <xref linkend=\"figure.uicomponents\"/> illustrates the inheritance hierarchy of the UI component classes and interfaces. Interfaces are displayed in gray, abstract classes in orange, and regular classes in blue. An annotated version of the diagram is featured in the <emphasis>Vaadin Cheat Sheet</emphasis>."
msgstr ""

#. Tag: title
#: chapter-components.xml:38
#, no-c-format
msgid "User Interface Component Class Hierarchy"
msgstr ""

#. Tag: classname
#: chapter-components.xml:50
#, no-c-format
msgid "Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:50
#, no-c-format
msgid "At the top of the interface hierarchy, we have the <classname>Component</classname> interface. <indexterm><primary><classname>AbstractComponent</classname></primary></indexterm> At the top of the class hierarchy, we have the <classname>AbstractComponent</classname> class. <indexterm><primary><classname>AbstractField</classname></primary></indexterm> <indexterm><primary><classname>AbstractComponentContainer</classname></primary></indexterm> It is inherited by two other abstract classes: <classname>AbstractField</classname>, inherited further by field components, and <classname>AbstractComponentContainer</classname>, inherited by various container and layout components. Components that are not bound to a content data model, such as labels and links, inherit <classname>AbstractComponent</classname> directly."
msgstr ""

#. Tag: primary
#: chapter-components.xml:72
#, no-c-format
msgid "layout"
msgstr ""

#. Tag: classname
#: chapter-components.xml:73
#, no-c-format
msgid "Layout"
msgstr ""

#. Tag: para
#: chapter-components.xml:73
#, no-c-format
msgid "The layout of the various components in a window is controlled, logically, by layout components, just like in conventional Java UI toolkits for desktop applications. In addition, with the <classname>CustomLayout</classname> component, you can write a custom layout as an XHTML template that includes the locations of any contained components. Looking at the inheritance diagram, we can see that layout components inherit the <classname>AbstractComponentContainer</classname> and the <classname>Layout</classname> interface. Layout components are described in detail in <xref linkend=\"layout\"/>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:87
#, no-c-format
msgid "Window"
msgstr ""

#. Tag: para
#: chapter-components.xml:87
#, no-c-format
msgid "Looking at it from the perspective of an object hierarchy, we would have a <classname>Window</classname> object, which contains a hierachy of layout components, which again contain other layout components, field components, and other visible components."
msgstr ""

#. Tag: primary
#: chapter-components.xml:96
#, no-c-format
msgid "Sampler"
msgstr ""

#. Tag: primary
#: chapter-components.xml:97
#, no-c-format
msgid "JavaDoc"
msgstr ""

#. Tag: para
#: chapter-components.xml:97
#, no-c-format
msgid "You can browse the built-in UI components of Vaadin library in the <application>Sampler</application> application of the <application>Vaadin Demo</application>. The Sampler shows a description, JavaDoc documentation, and a code samples for each of the components."
msgstr ""

#. Tag: para
#: chapter-components.xml:105
#, no-c-format
msgid "In addition to the built-in components, many components are available as add-ons, either from the Vaadin Directory or from independent sources. Both commercial and free components exist. The installation of add-ons is described in <xref linkend=\"addons\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:113
#, no-c-format
msgid "Vaadin Cheat Sheet and Refcard"
msgstr ""

#. Tag: para
#: chapter-components.xml:115
#, no-c-format
msgid "is included in the Vaadin Cheat Sheet that illustrates the basic relationship hierarchy of the user interface components and data binding classes and interfaces. You can download it at <link xlink:href=\"http://vaadin.com/book\">http://vaadin.com/book</link>."
msgstr ""

#. Tag: para
#: chapter-components.xml:123
#, no-c-format
msgid "The diagram is also included in the six-page DZone Refcard, which you can find at <link xlink:href=\"https://vaadin.com/refcard\">https://vaadin.com/refcard</link>."
msgstr ""

#. Tag: title
#: chapter-components.xml:132
#, no-c-format
msgid "Interfaces and Abstractions"
msgstr ""

#. Tag: primary
#: chapter-components.xml:135
#, no-c-format
msgid "interfaces"
msgstr ""

#. Tag: para
#: chapter-components.xml:135
#, no-c-format
msgid "Vaadin user interface components are built on a skeleton of interfaces and abstract classes that define and implement the features common to all components and the basic logic how the component states are serialized between the server and the client."
msgstr ""

#. Tag: para
#: chapter-components.xml:143
#, no-c-format
msgid "This section gives details on the basic component interfaces and abstractions. The layout and other component container abstractions are described in <xref linkend=\"layout\"/>. The interfaces that define the Vaadin data model are described in <xref linkend=\"datamodel\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:151
#, no-c-format
msgid "Component Interfaces and Abstractions"
msgstr ""

#. Tag: classname
#: chapter-components.xml:163
#, no-c-format
msgid "Paintable"
msgstr ""

#. Tag: classname
#: chapter-components.xml:164
#, no-c-format
msgid "VariableOwner"
msgstr ""

#. Tag: para
#: chapter-components.xml:164
#, no-c-format
msgid "All components also implement the <classname>Paintable</classname> interface, which is used for serializing (\"painting\") the components to the client, and the reverse <classname>VariableOwner</classname> interface, which is needed for deserializing component state or user interaction from the client."
msgstr ""

#. Tag: classname
#: chapter-components.xml:173
#, no-c-format
msgid "Serializable"
msgstr ""

#. Tag: para
#: chapter-components.xml:173
#, no-c-format
msgid "In addition to the interfaces defined within the Vaadin framework, all components implement the <classname>java.io.Serializable</classname> interface to allow serialization. Serialization is needed in many clustering and cloud computing solutions."
msgstr ""

#. Tag: title
#: chapter-components.xml:182
#, no-c-format
msgid "<classname>Component</classname> Interface"
msgstr ""

#. Tag: primary
#: chapter-components.xml:185 chapter-components.xml:241
#, no-c-format
msgid "<classname>Component</classname> interface"
msgstr ""

#. Tag: para
#: chapter-components.xml:188
#, no-c-format
msgid "The <classname>Component</classname> interface is paired with the <classname>AbstractComponent</classname> class, which implements all the methods defined in the interface."
msgstr ""

#. Tag: title
#: chapter-components.xml:195
#, no-c-format
msgid "Component Tree Management"
msgstr ""

#. Tag: para
#: chapter-components.xml:197
#, no-c-format
msgid "Components are laid out in the user interface hierarchically. The layout is managed by layout components, or more generally components that implement the <classname>ComponentContainer</classname> interface. Such a container is the parent of the contained components."
msgstr ""

#. Tag: para
#: chapter-components.xml:204
#, no-c-format
msgid "The <methodname>getParent()</methodname> method allows retrieving the parent component of a component. While there is a <methodname>setParent()</methodname>, you rarely need it as you usually add components with the <methodname>addComponent()</methodname> method of the <classname>ComponentContainer</classname> interface, which automatically sets the parent."
msgstr ""

#. Tag: para
#: chapter-components.xml:214
#, no-c-format
msgid "A component does not know its parent when the component is still being created, so you can not refer to the parent in the constructor with <methodname>getParent()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:220
#, no-c-format
msgid "Attaching a component to an UI triggers a call to its <methodname>attach()</methodname> method. Correspondingly, removing a component from a container triggers calling the <methodname>detach()</methodname> method. If the parent of an added component is already connected to the UI, the <methodname>attach()</methodname> is called immediately from <methodname>setParent()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:230
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class AttachExample extends CustomComponent {\n"
      "    public AttachExample() {\n"
      "    }\n"
      "    \n"
      "    @Override\n"
      "    public void attach() {\n"
      "        super.attach(); // Must call.\n"
      "        \n"
      "        // Now we know who ultimately owns us.\n"
      "        ClassResource r = new ClassResource(\"smiley.jpg\");\n"
      "        Image image = new Image(\"Image:\", r); \n"
      "        setCompositionRoot(image);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:232
#, no-c-format
msgid "The attachment logic is implemented in <classname>AbstractComponent</classname>, as described in <xref linkend=\"components.interfaces.abstractcomponent\"/>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:246 chapter-components.xml:249
#, no-c-format
msgid "AbstractComponent"
msgstr ""

#. Tag: para
#: chapter-components.xml:252
#, no-c-format
msgid "<classname>AbstractComponent</classname> is the base class for all user interface components. It is the (only) implementation of the <classname>Component</classname> interface, implementing all the methods defined in the interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:259
#, no-c-format
msgid "<classname>AbstractComponent</classname> has a single abstract method, <methodname>getTag()</methodname>, which returns the serialization identifier of a particular component class. It needs to be implemented when (and only when) creating entirely new components. <classname>AbstractComponent</classname> manages much of the serialization of component states between the client and the server. Creation of new components and serialization is described in <xref linkend=\"gwt\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:275
#, no-c-format
msgid "Common Component Features"
msgstr ""

#. Tag: para
#: chapter-components.xml:277
#, no-c-format
msgid "The component base classes and interfaces provide a large number of features. Let us look at some of the most commonly needed features. Features not documented here can be found from the Java API Reference."
msgstr ""

#. Tag: para
#: chapter-components.xml:283
#, no-c-format
msgid "The interface defines a number of properties, which you can retrieve or manipulate with the corresponding setters and getters."
msgstr ""

#. Tag: title
#: chapter-components.xml:289
#, no-c-format
msgid "Caption"
msgstr ""

#. Tag: primary
#: chapter-components.xml:292
#, no-c-format
msgid "caption property"
msgstr ""

#. Tag: primary
#: chapter-components.xml:296 chapter-components.xml:393 chapter-components.xml:485 chapter-components.xml:575 chapter-components.xml:648 chapter-components.xml:751 chapter-components.xml:851 chapter-components.xml:915
#, no-c-format
msgid "Component interface"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:297
#, no-c-format
msgid "caption"
msgstr ""

#. Tag: para
#: chapter-components.xml:300
#, no-c-format
msgid "A caption is an explanatory textual label accompanying a user interface component, usually shown above, left of, or inside the component. The contents of a caption are automatically quoted, so no raw XHTML can be rendered in a caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:307
#, no-c-format
msgid "The caption text can usually be given as the first parameter of a constructor of a component or with <methodname>setCaption()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:312
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// New text field with caption \"Name\"\n"
      "TextField name = new TextField(\"Name\");\n"
      "layout.addComponent(name);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:314
#, no-c-format
msgid "The caption of a component is, by default, managed and displayed by the layout component or component container inside which the component is placed. For example, the <classname>VerticalLayout</classname> component shows the captions left-aligned above the contained components, while the <classname>FormLayout</classname> component shows the captions on the left side of the vertically laid components, with the captions and their associated components left-aligned in their own columns. The <classname>CustomComponent</classname> does not manage the caption of its composition root, so if the root component has a caption, it will not be rendered."
msgstr ""

#. Tag: title
#: chapter-components.xml:328
#, no-c-format
msgid "Caption Management by <classname>VerticalLayout</classname> and <classname>FormLayout</classname> components."
msgstr ""

#. Tag: para
#: chapter-components.xml:339
#, no-c-format
msgid "Some components, such as <classname>Button</classname> and <classname>Panel</classname>, manage the caption themselves and display it inside the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:345
#, no-c-format
msgid "Icon (see <xref linkend=\"components.features.icon\"/>) is closely related to caption and is usually displayed horizontally before or after it, depending on the component and the containing layout. Also the required indicator in field components is usually shown before or after the caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:353
#, no-c-format
msgid "An alternative way to implement a caption is to use another component as the caption, typically a <classname>Label</classname>, a <classname>TextField</classname>, or a <classname>Panel</classname>. A <classname>Label</classname>, for example, allows highlighting a shortcut key with XHTML markup or to bind the caption to a data source. The <classname>Panel</classname> provides an easy way to add both a caption and a border around a component."
msgstr ""

#. Tag: title
#: chapter-components.xml:364 chapter-components.xml:531 chapter-components.xml:628 chapter-components.xml:823 chapter-components.xml:1190 chapter-components.xml:1867 chapter-components.xml:1994 chapter-components.xml:2340 chapter-components.xml:2468 chapter-components.xml:2519 chapter-components.xml:2628 chapter-components.xml:2840 chapter-components.xml:2924 chapter-components.xml:3027 chapter-components.xml:3087 chapter-components.xml:3508 chapter-components.xml:3571 chapter-components.xml:3616 chapter-components.xml:3705 chapter-components.xml:3801 chapter-components.xml:4832 chapter-components.xml:5015 chapter-components.xml:5328 chapter-components.xml:5439 chapter-components.xml:5561
#, no-c-format
msgid "CSS Style Rules"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:366
#, no-c-format
msgid ""
      "<![CDATA[.v-caption {}\n"
      "  .v-captiontext {}\n"
      "  .v-caption-clearelem {}\n"
      "  .v-required-field-indicator {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:368
#, no-c-format
msgid "A caption is be rendered inside an HTML element that has the <literal>v-caption</literal> CSS style class. The containing layout may enclose a caption inside other caption-related elements."
msgstr ""

#. Tag: para
#: chapter-components.xml:374
#, no-c-format
msgid "Some layouts put the caption text in a <literal>v-captiontext</literal> element. A <literal>v-caption-clearelem</literal> is used in some layouts to clear a CSS <literal>float</literal> property in captions. An optional required indicator in field components is contained in a separate element with <literal>v-required-field-indicator</literal> style."
msgstr ""

#. Tag: title
#: chapter-components.xml:386
#, no-c-format
msgid "Description and Tooltips"
msgstr ""

#. Tag: primary
#: chapter-components.xml:389
#, no-c-format
msgid "description property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:394
#, no-c-format
msgid "<secondary>description</secondary>"
msgstr ""

#. Tag: primary
#: chapter-components.xml:398
#, no-c-format
msgid "tooltips"
msgstr ""

#. Tag: para
#: chapter-components.xml:401
#, no-c-format
msgid "All components (that inherit <classname>AbstractComponent</classname>) have a description separate from their caption. The description is usually shown as a tooltip that appears when the mouse pointer hovers over the component for a short time."
msgstr ""

#. Tag: para
#: chapter-components.xml:408
#, no-c-format
msgid "You can set the description with <methodname>setDescription()</methodname> and retrieve with <methodname>getDescription()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:413
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Button button = new Button(\"A Button\");\n"
      "button.setDescription(\"This is the tooltip\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:415
#, no-c-format
msgid "The tooltip is shown in <xref linkend=\"figure.components.tooltip.plain\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:421
#, no-c-format
msgid "Component Description as a Tooltip"
msgstr ""

#. Tag: para
#: chapter-components.xml:432
#, no-c-format
msgid "A description is rendered as a tooltip in most components."
msgstr ""

#. Tag: para
#: chapter-components.xml:437
#, no-c-format
msgid "When a component error has been set with <methodname>setComponentError()</methodname>, the error is usually also displayed in the tooltip, below the description. Components that are in error state will also display the error indicator. See <xref linkend=\"application.errors.error-indicator\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:445
#, no-c-format
msgid "The description is actually not plain text, but you can use XHTML tags to format it. Such a rich text description can contain any HTML elements, including images."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:451
#, no-c-format
msgid ""
      "<?pocket-size 60% ?><![CDATA[button.setDescription(\n"
      "    \"<h2><img src=\\\"../VAADIN/themes/sampler/icons/comment_yellow.gif\\\"/>\"+\n"
      "    \"A richtext tooltip</h2>\"+\n"
      "    \"<ul>\"+\n"
      "    \"  <li>Use rich formatting with XHTML</li>\"+\n"
      "    \"  <li>Include images from themes</li>\"+\n"
      "    \"  <li>etc.</li>\"+\n"
      "    \"</ul>\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:453
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.tooltip.richtext\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:459
#, no-c-format
msgid "A Rich Text Tooltip"
msgstr ""

#. Tag: para
#: chapter-components.xml:470
#, no-c-format
msgid "Notice that the setter and getter are defined for all fields in the <classname>Field</classname> interface, not for all components in the <classname>Component</classname> interface."
msgstr ""

#. Tag: title
#: chapter-components.xml:478
#, no-c-format
msgid "Enabled"
msgstr ""

#. Tag: primary
#: chapter-components.xml:481
#, no-c-format
msgid "enabled property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:486
#, no-c-format
msgid "enabled"
msgstr ""

#. Tag: para
#: chapter-components.xml:489
#, no-c-format
msgid "The <emphasis>enabled</emphasis> property controls whether the user can actually use the component. A disabled component is visible, but grayed to indicate the disabled state."
msgstr ""

#. Tag: para
#: chapter-components.xml:495
#, no-c-format
msgid "Components are always enabled by default. You can disable a component with <methodname>setEnabled(false)</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:500
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[Button enabled = new Button(\"Enabled\");\n"
      "enabled.setEnabled(true); // The default\n"
      "layout.addComponent(enabled);\n"
      "        \n"
      "Button disabled = new Button(\"Disabled\");\n"
      "disabled.setEnabled(false);\n"
      "layout.addComponent(disabled);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:502
#, no-c-format
msgid "shows the enabled and disabled buttons."
msgstr ""

#. Tag: title
#: chapter-components.xml:508
#, no-c-format
msgid "An Enabled and Disabled <classname>Button</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:519
#, no-c-format
msgid "A disabled component is automatically put in read-only state. No client interaction with such a component is sent to the server and, as an important security feature, the server-side components do not receive state updates from the client in the read-only state. This feature exists in all built-in components in Vaadin and is automatically handled for all <classname>Field</classname> components for the field property value. For custom widgets, you need to make sure that the read-only state is checked on the server-side for all safety-critical variables."
msgstr ""

#. Tag: para
#: chapter-components.xml:533
#, no-c-format
msgid "Disabled components have the <literal>v-disabled</literal> CSS style in addition to the component-specific style. To match a component with both the styles, you have to join the style class names with a dot as done in the example below."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:540
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[.v-textfield.v-disabled {\n"
      "    border: dotted;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:542
#, no-c-format
msgid "This would make the border of all disabled text fields dotted."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:546
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[TextField disabled = new TextField(\"Disabled\");\n"
      "disabled.setValue(\"Read-only value\");\n"
      "disabled.setEnabled(false);\n"
      "layout.addComponent(disabled);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:548
#, no-c-format
msgid "The result is illustrated in <xref linkend=\"figure.components.features.enabled.styling\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:554
#, no-c-format
msgid "Styling Disabled Components"
msgstr ""

#. Tag: title
#: chapter-components.xml:568
#, no-c-format
msgid "Icon"
msgstr ""

#. Tag: primary
#: chapter-components.xml:571
#, no-c-format
msgid "icon property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:576
#, no-c-format
msgid "icon"
msgstr ""

#. Tag: para
#: chapter-components.xml:579
#, no-c-format
msgid "An icon is an explanatory graphical label accompanying a user interface component, usually shown above, left of, or inside the component. Icon is closely related to caption (see <xref linkend=\"components.features.caption\"/>) and is usually displayed horizontally before or after it, depending on the component and the containing layout."
msgstr ""

#. Tag: para
#: chapter-components.xml:588
#, no-c-format
msgid "The icon of a component can be set with the <methodname>setIcon()</methodname> method. The image is provided as a resource, perhaps most typically a <classname>ThemeResource</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:594
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Component with an icon from a custom theme\n"
      "TextField name = new TextField(\"Name\");\n"
      "name.setIcon(new ThemeResource(\"icons/user.png\"));\n"
      "layout.addComponent(name);\n"
      "        \n"
      "// Component with an icon from another theme ('runo')\n"
      "Button ok = new Button(\"OK\");\n"
      "ok.setIcon(new ThemeResource(\"../runo/icons/16/ok.png\"));\n"
      "layout.addComponent(ok);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:596
#, no-c-format
msgid "The icon of a component is, by default, managed and displayed by the layout component or component container in which the component is placed. For example, the <classname>VerticalLayout</classname> component shows the icons left-aligned above the contained components, while the <classname>FormLayout</classname> component shows the icons on the left side of the vertically laid components, with the icons and their associated components left-aligned in their own columns. The <classname>CustomComponent</classname> does not manage the icon of its composition root, so if the root component has an icon, it will not be rendered."
msgstr ""

#. Tag: title
#: chapter-components.xml:610
#, no-c-format
msgid "Displaying an Icon from a Theme Resource."
msgstr ""

#. Tag: para
#: chapter-components.xml:621
#, no-c-format
msgid "Some components, such as <classname>Button</classname> and <classname>Panel</classname>, manage the icon themselves and display it inside the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:630
#, no-c-format
msgid "An icon will be rendered inside an HTML element that has the <literal>v-icon</literal> CSS style class. The containing layout may enclose an icon and a caption inside elements related to the caption, such as <literal>v-caption</literal>."
msgstr ""

#. Tag: title
#: chapter-components.xml:640
#, no-c-format
msgid "Locale"
msgstr ""

#. Tag: primary
#: chapter-components.xml:643
#, no-c-format
msgid "locale property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:644
#, no-c-format
msgid "in <classname>Component</classname>"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:649
#, no-c-format
msgid "locale"
msgstr ""

#. Tag: para
#: chapter-components.xml:652
#, no-c-format
msgid "The locale property defines the country and language used in a component. You can use the locale information in conjunction with an internationalization scheme to acquire localized resources. Some components, such as <classname>DateField</classname>, use the locale for component localization."
msgstr ""

#. Tag: para
#: chapter-components.xml:660
#, no-c-format
msgid "You can set the locale of a component (or the application) with <methodname>setLocale()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:665
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Component for which the locale is meaningful\n"
      "InlineDateField date = new InlineDateField(\"Datum\");\n"
      "        \n"
      "// German language specified with ISO 639-1 language\n"
      "// code and ISO 3166-1 alpha-2 country code. \n"
      "date.setLocale(new Locale(\"de\", \"DE\"));\n"
      "        \n"
      "date.setResolution(DateField.Resolution.DAY);\n"
      "layout.addComponent(date);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:667
#, no-c-format
msgid "The resulting date field is shown in <xref linkend=\"figure.components.features.locale.simple\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:673
#, no-c-format
msgid "Set Locale for <classname>InlineDateField</classname>"
msgstr ""

#. Tag: methodname
#: chapter-components.xml:685
#, no-c-format
msgid "getLocale()"
msgstr ""

#. Tag: para
#: chapter-components.xml:685
#, no-c-format
msgid "You can get the locale of a component with <methodname>getLocale()</methodname>. If the locale is undefined for a component, that is, not explicitly set, the locale of the parent component is used. If none of the parent components have a locale set, the locale of the application is used, and if that is not set, the default system locale is set, as given by <methodname>Locale.getDefault()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:695
#, no-c-format
msgid "Because of the requirement that the component must be attached to the application, it is awkward to use <methodname>getLocale()</methodname> for internationalization. You can not use it in the constructor, so you would have to get the locale in <methodname>attach()</methodname> as shown in the following example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:703
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Button cancel = new Button() {\n"
      "    @Override\n"
      "    public void attach() {\n"
      "        ResourceBundle bundle = ResourceBundle.getBundle(\n"
      "                MyAppCaptions.class.getName(), getLocale());\n"
      "        setCaption(bundle.getString(\"CancelKey\"));\n"
      "    }\n"
      "};\n"
      "layout.addComponent(cancel);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:705
#, no-c-format
msgid "It is normally a better practice to get the locale from an application-global parameter and use it to get the localized resource right when the component is created."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:711
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Captions are stored in MyAppCaptions resource bundle\n"
      "// and the application object is known in this context.\n"
      "ResourceBundle bundle =\n"
      "    ResourceBundle.getBundle(MyAppCaptions.class.getName(),\n"
      "                             getApplication().getLocale());\n"
      "        \n"
      "// Get a localized resource from the bundle\n"
      "Button cancel = new Button(bundle.getString(\"CancelKey\"));\n"
      "layout.addComponent(cancel);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:714 chapter-components.xml:729
#, no-c-format
msgid "Selecting a Locale"
msgstr ""

#. Tag: para
#: chapter-components.xml:716
#, no-c-format
msgid "A common task in many applications is selecting a locale. This is done in the following example with a <classname>Select</classname> component."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:721
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// The locale in which we want to have the language\n"
      "// selection list\n"
      "Locale displayLocale = Locale.ENGLISH;\n"
      "        \n"
      "// All known locales\n"
      "final Locale[] locales = Locale.getAvailableLocales();\n"
      "        \n"
      "// Allow selecting a language. We are in a constructor of a\n"
      "// CustomComponent, so preselecting the current\n"
      "// language of the application can not be done before\n"
      "// this (and the selection) component are attached to\n"
      "// the application.\n"
      "final Select select = new Select(\"Select a language\") {\n"
      "    @Override\n"
      "    public void attach() {\n"
      "        setValue(getLocale());\n"
      "    }\n"
      "};\n"
      "for (int i=0; i<locales.length; i++) {\n"
      "    select.addItem(locales[i]);\n"
      "    select.setItemCaption(locales[i],\n"
      "                          locales[i].getDisplayName(displayLocale));\n"
      "    \n"
      "    // Automatically select the current locale\n"
      "    if (locales[i].equals(getLocale()))\n"
      "        select.setValue(locales[i]);\n"
      "}\n"
      "layout.addComponent(select);\n"
      "\n"
      "// Locale code of the selected locale\n"
      "final Label localeCode = new Label(\"\");\n"
      "layout.addComponent(localeCode);\n"
      "\n"
      "// A date field which language the selection will change\n"
      "final InlineDateField date =\n"
      "    new InlineDateField(\"Calendar in the selected language\");\n"
      "date.setResolution(DateField.Resolution.DAY);\n"
      "layout.addComponent(date);\n"
      "        \n"
      "// Handle language selection\n"
      "select.addValueChangeListener(new Property.ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        Locale locale = (Locale) select.getValue();\n"
      "        date.setLocale(locale);\n"
      "        localeCode.setValue(\"Locale code: \" +\n"
      "                            locale.getLanguage() + \"_\" +\n"
      "                            locale.getCountry());\n"
      "    }\n"
      "});\n"
      "select.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:723
#, no-c-format
msgid "The user interface is shown in <xref linkend=\"figure.components.features.locale.selection\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:744
#, no-c-format
msgid "Read-Only"
msgstr ""

#. Tag: primary
#: chapter-components.xml:747
#, no-c-format
msgid "read-only property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:752
#, no-c-format
msgid "read-only"
msgstr ""

#. Tag: para
#: chapter-components.xml:755
#, no-c-format
msgid "The property defines whether the value of a component can be changed. The property is mainly applicable to <classname>Field</classname> components, as they have a value that can be edited by the user."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:761
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[TextField readwrite = new TextField(\"Read-Write\");\n"
      "readwrite.setValue(\"You can change this\");\n"
      "readwrite.setReadOnly(false); // The default\n"
      "layout.addComponent(readwrite);\n"
      "        \n"
      "TextField readonly = new TextField(\"Read-Only\");\n"
      "readonly.setValue(\"You can't touch this!\");\n"
      "readonly.setReadOnly(true);\n"
      "layout.addComponent(readonly);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:763
#, no-c-format
msgid "The resulting read-only text field is shown in <xref linkend=\"figure.components.features.readonly.simple\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:769
#, no-c-format
msgid "A Read-Only Component."
msgstr ""

#. Tag: para
#: chapter-components.xml:780
#, no-c-format
msgid "Setting a layout or some other component container as read-only does not usually make the contained components read-only recursively. This is different from, for example, the disabled state, which is usually applied recursively."
msgstr ""

#. Tag: para
#: chapter-components.xml:787
#, no-c-format
msgid "Notice that the value of a selection component is the selection, not its items. A read-only selection component doesn't therefore allow its selection to be changed, but other changes are possible. For example, if you have a read-only <classname>Table</classname> in editable mode, its contained fields and the underlying data model can still be edited, and the user could sort it or reorder the columns."
msgstr ""

#. Tag: para
#: chapter-components.xml:796
#, no-c-format
msgid "Client-side state modifications will not be communicated to the server-side and, more importantly, server-side field components will not accept changes to the value of a read-only <classname>Field</classname> component. The latter is an important security feature, because a malicious user can not fabricate state changes in a read-only field. This is handled at the level of <classname>AbstractField</classname> in <methodname>setValue()</methodname>, so you can not change the value programmatically either. Calling <methodname>setValue()</methodname> on a read-only field results in <classname>Property.ReadOnlyException</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:809
#, no-c-format
msgid "Also notice that while the read-only status applies automatically to the property value of a field, it does not apply to other component variables. A read-only component can accept some other variable changes from the client-side and some of such changes could be acceptable, such as change in the scroll bar position of a <classname>Table</classname>. Custom widgets should check the read-only state for variables bound to business data."
msgstr ""

#. Tag: para
#: chapter-components.xml:825
#, no-c-format
msgid "Setting a normally editable component to read-only state can change its appearance to disallow editing the value. In addition to CSS styling, also the HTML structure can change. For example, <classname>TextField</classname> loses the edit box and appears much like a <classname>Label</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:833
#, no-c-format
msgid "A read-only component will have the <literal>v-readonly</literal> style. The following CSS rule would make the text in all read-only <classname>TextField</classname> components appear in italic."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:839
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[.v-textfield.v-readonly {\n"
      "    font-style: italic;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:844
#, no-c-format
msgid "Style Name"
msgstr ""

#. Tag: primary
#: chapter-components.xml:847
#, no-c-format
msgid "style name property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:852
#, no-c-format
msgid "style name"
msgstr ""

#. Tag: para
#: chapter-components.xml:855
#, no-c-format
msgid "The <emphasis>style name</emphasis> property defines one or more custom CSS style class names for the component. The <methodname>getStyleName()</methodname> returns the current style names as a space-separated list. The <methodname>setStyleName()</methodname> replaces all the styles with the given style name or a space-separated list of style names. You can also add and remove individual style names with <methodname>addStylename()</methodname> and <methodname>removeStyleName()</methodname>. A style name must be a valid CSS style name."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:867
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Label label = new Label(\"This text has a lot of style\");\n"
      "label.addStyleName(\"mystyle\");\n"
      "layout.addComponent(label);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:869
#, no-c-format
msgid "The style name will appear in the component's HTML element in two forms: literally as given and prefixed with the component class specific style name. For example, if you add a style name <literal>mystyle</literal> to a <classname>Button</classname>, the component would get both <literal>mystyle</literal> and <literal>v-button-mystyle</literal> styles. Neither form may conflict with built-in style names of Vaadin. For example, <literal>focus</literal> style would conflict with a built-in style of the same name, and an <literal>option</literal> style for a <classname>Select</classname> component would conflict with the built-in <literal>v-select-option</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:882
#, no-c-format
msgid "The following CSS rule would apply the style to any component that has the <literal>mystyle</literal> style."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:887
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[.mystyle {\n"
      "    font-family: fantasy;\n"
      "    font-style:  italic;\n"
      "    font-size:   25px;\n"
      "    font-weight: bolder;\n"
      "    line-height: 30px;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:889
#, no-c-format
msgid "The resulting styled component is shown in"
msgstr ""

#. Tag: title
#: chapter-components.xml:895
#, no-c-format
msgid "Component with a Custom Style"
msgstr ""

#. Tag: title
#: chapter-components.xml:908
#, no-c-format
msgid "Visible"
msgstr ""

#. Tag: primary
#: chapter-components.xml:911
#, no-c-format
msgid "visible property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:916
#, no-c-format
msgid "visible"
msgstr ""

#. Tag: para
#: chapter-components.xml:919
#, no-c-format
msgid "Components can be hidden by setting the <emphasis>visible</emphasis> property to <emphasis>false</emphasis>. Also the caption, icon and any other component features are made hidden. Hidden components are not just invisible, but their content is not communicated to the browser at all. That is, they are not made invisible cosmetically with only CSS rules. This feature is important for security if you have components that contain security-critical information that must only be shown in specific application states."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:930
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[TextField invisible = new TextField(\"No-see-um\");\n"
      "invisible.setValue(\"You can't see this!\");\n"
      "invisible.setVisible(false);\n"
      "layout.addComponent(invisible);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:932
#, no-c-format
msgid "The resulting invisible component is shown in <xref linkend=\"figure.components.features.visible.simple\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:938
#, no-c-format
msgid "An Invisible Component."
msgstr ""

#. Tag: para
#: chapter-components.xml:949
#, no-c-format
msgid "Beware that invisible beings can leave footprints. The containing layout cell that holds the invisible component will not go away, but will show in the layout as extra empty space. Also expand ratios work just like if the component was visible - it is the layout cell that expands, not the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:957
#, no-c-format
msgid "If you need to make a component only cosmetically invisible, you should use a custom theme to set it <literal>display: none</literal> style. This is mainly useful for some special components that have effects even when made invisible in CSS. If the hidden component has undefined size and is enclosed in a layout that also has undefined size, the containing layout will collapse when the component disappears. If you want to have the component keep its size, you have to make it invisible by setting all its font and other attributes to be transparent. In such cases, the invisible content of the component can be made visible easily in the browser."
msgstr ""

#. Tag: para
#: chapter-components.xml:969
#, no-c-format
msgid "A component made invisible with the <emphasis>visible</emphasis> property has no particular CSS style class to indicate that it is hidden. The element does exist though, but has <literal>display: none</literal> style, which overrides any CSS styling."
msgstr ""

#. Tag: title
#: chapter-components.xml:978
#, no-c-format
msgid "Sizing Components"
msgstr ""

#. Tag: primary
#: chapter-components.xml:981
#, no-c-format
msgid "<classname>Sizeable</classname> interface"
msgstr ""

#. Tag: para
#: chapter-components.xml:984
#, no-c-format
msgid "Vaadin components are sizeable; not in the sense that they were fairly large or that the number of the components and their features are sizeable, but in the sense that you can make them fairly large on the screen if you like, or small or whatever size."
msgstr ""

#. Tag: para
#: chapter-components.xml:991
#, no-c-format
msgid "The <classname>Sizeable</classname> interface, shared by all components, provides a number of manipulation methods and constants for setting the height and width of a component in absolute or relative units, or for leaving the size undefined."
msgstr ""

#. Tag: para
#: chapter-components.xml:998
#, no-c-format
msgid "The size of a component can be set with <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname> methods. The methods take the size as a floating-point value. You need to give the unit of the measure as the second parameter for the above methods. The available units are listed in <xref linkend=\"components.features.sizeable.units.table\"/> below."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1007
#, no-c-format
msgid ""
      "<![CDATA[mycomponent.setWidth(100, Sizeable.UNITS_PERCENTAGE);\n"
      "mycomponent.setWidth(400, Sizeable.UNITS_PIXELS);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1009
#, no-c-format
msgid "Alternatively, you can speficy the size as a string. The format of such a string must follow the HTML/CSS standards for specifying measures."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1014
#, no-c-format
msgid ""
      "<![CDATA[mycomponent.setWidth(\"100%\");\n"
      "mycomponent.setHeight(\"400px\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1016
#, no-c-format
msgid "The \"<literal>100%</literal>\" percentage value makes the component take all available size in the particular direction (see the description of <parameter>Sizeable.UNITS_PERCENTAGE</parameter> in the table below). You can also use the shorthand method <methodname>setSizeFull()</methodname> to set the size to 100% in both directions."
msgstr ""

#. Tag: para
#: chapter-components.xml:1024
#, no-c-format
msgid "The size can be <emphasis>undefined</emphasis> in either or both dimensions, which means that the component will take the minimum necessary space. Most components have undefined size by default, but some layouts have full size in horizontal direction. You can set the height or width as undefined with <parameter>Sizeable.SIZE_UNDEFINED</parameter> parameter for <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1034
#, no-c-format
msgid "You always need to keep in mind that <emphasis>a layout with undefined size may not contain components with defined relative size</emphasis>, such as \"full size\". See <xref linkend=\"layout.settings.size\"/> for details."
msgstr ""

#. Tag: para
#: chapter-components.xml:1041
#, no-c-format
msgid "The <xref linkend=\"components.features.sizeable.units.table\"/> lists the available units and their codes defined in the <classname>Sizeable</classname> interface."
msgstr ""

#. Tag: title
#: chapter-components.xml:1048
#, no-c-format
msgid "Size Units"
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1055
#, no-c-format
msgid "UNITS_PIXELS"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1056
#, no-c-format
msgid "<entry>px</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1058
#, no-c-format
msgid "The <emphasis>pixel</emphasis> is the basic hardware-specific measure of one physical display pixel."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1063
#, no-c-format
msgid "UNITS_POINTS"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1064
#, no-c-format
msgid "<entry>pt</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1066
#, no-c-format
msgid "The <emphasis>point</emphasis> is a typographical unit, which is usually defined as 1/72 inches or about 0.35 mm. However, on displays the size can vary significantly depending on display metrics."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1072
#, no-c-format
msgid "UNITS_PICAS"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1073
#, no-c-format
msgid "<entry>pc</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1075
#, no-c-format
msgid "The <emphasis>pica</emphasis> is a typographical unit, defined as 12 points, or 1/7 inches or about 4.233 mm. On displays, the size can vary depending on display metrics."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1081
#, no-c-format
msgid "UNITS_EM"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1082
#, no-c-format
msgid "<entry>em</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1084
#, no-c-format
msgid "A unit relative to the used font, the width of the upper-case \"M\" letter."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1088
#, no-c-format
msgid "UNITS_EX"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1089
#, no-c-format
msgid "<entry>ex</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1091
#, no-c-format
msgid "A unit relative to the used font, the height of the lower-case \"x\" letter."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1095
#, no-c-format
msgid "UNITS_MM"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1096
#, no-c-format
msgid "<entry>mm</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1098
#, no-c-format
msgid "A physical length unit, millimeters on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1104
#, no-c-format
msgid "UNITS_CM"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1105
#, no-c-format
msgid "<entry>cm</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1107
#, no-c-format
msgid "A physical length unit, <emphasis>centimeters</emphasis> on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1113
#, no-c-format
msgid "UNITS_INCH"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1114
#, no-c-format
msgid "<entry>in</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1116
#, no-c-format
msgid "A physical length unit, <emphasis>inches</emphasis> on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1122
#, no-c-format
msgid "UNITS_PERCENTAGE"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1123
#, no-c-format
msgid "<entry>%</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1125
#, no-c-format
msgid "A relative percentage of the available size. For example, for the top-level layout <parameter>100%</parameter> would be the full width or height of the browser window. The percentage value must be between 0 and 100."
msgstr ""

#. Tag: para
#: chapter-components.xml:1134
#, no-c-format
msgid "If a component inside <classname>HorizontalLayout</classname> or <classname>VerticalLayout</classname> has full size in the namesake direction of the layout, the component will expand to take all available space not needed by the other components. See <xref linkend=\"layout.settings.size\"/> for details."
msgstr ""

#. Tag: title
#: chapter-components.xml:1152
#, no-c-format
msgid "Managing Input Focus"
msgstr ""

#. Tag: para
#: chapter-components.xml:1154
#, no-c-format
msgid "When the user clicks on a component, the component gets the <emphasis>input focus</emphasis>, which is indicated by highlighting according to style definitions. If the component allows inputting text, the focus and insertion point are indicated by a cursor. Pressing the <keycap>Tab</keycap> key moves the focus to the component next in the <emphasis>focus order</emphasis>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1163
#, no-c-format
msgid "Focusing is supported by all <classname>Field</classname> components and also by <classname>Upload</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1168
#, no-c-format
msgid "The focus order or <emphasis>tab index</emphasis> of a component is defined as a positive integer value, which you can set with <methodname>setTabIndex()</methodname> and get with <methodname>getTabIndex()</methodname>. The tab index is managed in the context of the page in which the components are contained. The focus order can therefore jump between two any lower-level component containers, such as sub-windows or panels."
msgstr ""

#. Tag: para
#: chapter-components.xml:1178
#, no-c-format
msgid "The default focus order is determined by the natural hierarchical order of components in the order in which they were added under their parents. The default tab index is 0 (zero)."
msgstr ""

#. Tag: para
#: chapter-components.xml:1184
#, no-c-format
msgid "Giving a negative integer as the tab index removes the component from the focus order entirely."
msgstr ""

#. Tag: para
#: chapter-components.xml:1192
#, no-c-format
msgid "The component having the focus will have an additional style class with the <literal>-focus</literal> suffix. For example, a <classname>TextField</classname>, which normally has the <literal>v-textfield</literal> style, would additionally have the <literal>v-textfield-focus</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:1200
#, no-c-format
msgid "For example, the following would make a text field blue when it has focus."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1205
#, no-c-format
msgid ""
      "<![CDATA[.v-textfield-focus {\n"
      "    background: lightblue;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:1211 chapter-components.xml:1225
#, no-c-format
msgid "Field Components"
msgstr ""

#. Tag: classname
#: chapter-components.xml:1214
#, no-c-format
msgid "Field"
msgstr ""

#. Tag: para
#: chapter-components.xml:1217
#, no-c-format
msgid "<emphasis>Fields</emphasis> are components that have a value that the user can change through the user interface. <xref linkend=\"figure.components.fields\"/> illustrates the inheritance relationships and the important interfaces and base classes."
msgstr ""

#. Tag: para
#: chapter-components.xml:1236
#, no-c-format
msgid "Field components are built upon the framework defined in the <classname>Field</classname> interface and the <classname>AbstractField</classname> base class. <classname>AbstractField</classname> is the base class for all field components. In addition to the component features inherited from <classname>AbstractComponent</classname>, it implements a number of features defined in <classname>Property</classname>, <classname>Buffered</classname>, <classname>Validatable</classname>, and <classname>Component.Focusable</classname> interfaces."
msgstr ""

#. Tag: para
#: chapter-components.xml:1248
#, no-c-format
msgid "The description of the field interfaces and base classes is broken down in the following sections."
msgstr ""

#. Tag: title
#: chapter-components.xml:1254
#, no-c-format
msgid "<classname>Field</classname> Interface"
msgstr ""

#. Tag: para
#: chapter-components.xml:1256
#, no-c-format
msgid "The <classname>Field</classname> interface inherits the <classname>Component</classname> superinterface and also the <classname>Property</classname> interface to have a value for the field. <classname>AbstractField</classname> is the only class implementing the <classname>Field</classname> interface directly. The relationships are illustrated in <xref linkend=\"figure.components.fields.field\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1267
#, no-c-format
msgid "<classname>Field</classname> Interface Inheritance Diagram"
msgstr ""

#. Tag: para
#: chapter-components.xml:1278
#, no-c-format
msgid "You can set the field value with the <methodname>setValue()</methodname> and read with the <methodname>getValue()</methodname> method defined in the <classname>Property</classname> interface. The actual value type depends on the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:1285
#, no-c-format
msgid "The <classname>Field</classname> interface defines a number of attributes, which you can retrieve or manipulate with the corresponding setters and getters."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:1293
#, no-c-format
msgid "<methodname>description</methodname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1295
#, no-c-format
msgid "All fields have a description. Notice that while this attribute is defined in the <classname>Field</classname> component, it is implemented in <classname>AbstractField</classname>, which does not directly implement <classname>Field</classname>, but only through the <classname>AbstractField</classname> class."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:1307
#, no-c-format
msgid "required"
msgstr ""

#. Tag: para
#: chapter-components.xml:1309
#, no-c-format
msgid "When enabled, a required indicator (usually the asterisk * character) is displayed on the left, above, or right the field, depending on the containing layout and whether the field has a caption. If such fields are validated but are empty and the <methodname>requiredError</methodname> property (see below) is set, an error indicator is shown and the component error is set to the text defined with the error property. Without validation, the required indicator is merely a visual guide."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:1323
#, no-c-format
msgid "requiredError"
msgstr ""

#. Tag: para
#: chapter-components.xml:1325
#, no-c-format
msgid "Defines the error message to show when a value is required, but none is entered. The error message is set as the component error for the field and is usually displayed in a tooltip when the mouse pointer hovers over the error indicator."
msgstr ""

#. Tag: title
#: chapter-components.xml:1338
#, no-c-format
msgid "Data Binding and Conversions"
msgstr ""

#. Tag: para
#: chapter-components.xml:1340
#, no-c-format
msgid "Fields are strongly coupled with the Vaadin data model. The field value is handled as a <classname>Property</classname> of the field component, as documented in <xref linkend=\"datamodel.properties\"/>. Selection fields allow management of the selectable items through the <classname>Container</classname> interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:1348
#, no-c-format
msgid "Fields are <emphasis>editors</emphasis> for some particular type. For example, <classname>TextField</classname> allows editing <classname>String</classname> values. When bound to a data source, the property type of the data model can be something different, say an <classname>Integer</classname>. <emphasis>Converters</emphasis> are used for converting the values between the representation and the model. They are described in <xref linkend=\"datamodel.properties.converter\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1360
#, no-c-format
msgid "Handling Field Value Changes"
msgstr ""

#. Tag: para
#: chapter-components.xml:1362
#, no-c-format
msgid "<classname>Field</classname> inherits <classname>Property.ValueChangeListener</classname> to allow listening for field value changes and <classname>Property.Editor</classname> to allow editing values."
msgstr ""

#. Tag: para
#: chapter-components.xml:1369
#, no-c-format
msgid "When the value of a field changes, a <classname>Property.ValueChangeEvent</classname> is triggered for the field. You should not implement the <methodname>valueChange()</methodname> method in a class inheriting <classname>AbstractField</classname>, as it is already implemented in <classname>AbstractField</classname>. You should instead implement the method explicitly by adding the implementing object as a listener."
msgstr ""

#. Tag: title
#: chapter-components.xml:1381
#, no-c-format
msgid "Field Buffering"
msgstr ""

#. Tag: para
#: chapter-components.xml:1383
#, no-c-format
msgid "Field components implement the <interfacename>Buffered</interfacename> and <interfacename>BufferedValidatable</interfacename> interfaces. When buffering is enabled for a field with <methodname>setBuffered(true)</methodname>, the value is not written to the property data source before the <methodname>commit()</methodname> method is called for the field. Calling <methodname>commit()</methodname> also runs validators added to the field, and if any fail (and the <parameter>invalidCommitted</parameter> is disabled), the value is not written."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1396
#, no-c-format
msgid ""
      "<![CDATA[form.addComponent(new Button(\"Commit\",\n"
      "    new Button.ClickListener() {\n"
      "    @Override\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        try {\n"
      "            editor.commit();\n"
      "        } catch (InvalidValueException e) {\n"
      "            Notification.show(e.getMessage());\n"
      "        }\n"
      "    }\n"
      "}));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1398
#, no-c-format
msgid "Calling <methodname>discard()</methodname> reads the value from the property date source to the current input."
msgstr ""

#. Tag: para
#: chapter-components.xml:1403
#, no-c-format
msgid "If the fields are bound in a <classname>FieldGroup</classname> that has buffering enabled, calling <methodname>commit()</methodname> for the group runs validation on all fields in the group, and if successful, all the field values are written to the item data source. See <xref linkend=\"datamodel.itembinding.buffering\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1413
#, no-c-format
msgid "Field Validation"
msgstr ""

#. Tag: para
#: chapter-components.xml:1415
#, no-c-format
msgid "The input for a field component can be syntactically or semantically invalid. Fields implement the <interfacename>Validatable</interfacename> interface, which allows checking validity of the input with <emphasis>validators</emphasis> that implement the <interfacename>Validator</interfacename> interface. You can add validators to fields with <methodname>addValidator()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1425
#, no-c-format
msgid ""
      "<![CDATA[TextField field = new TextField(\"Name\");\n"
      "field.addValidator(new StringLengthValidator(\n"
      "    \"The name must be 1-10 letters (was {0})\",\n"
      "    1, 10, true));\n"
      "layout.addComponent(field);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1427
#, no-c-format
msgid "Failed validation is indicated with the error indicator of the field, described in <xref linkend=\"application.errors.error-indicator\"/>, unless disabled with <methodname>setValidationVisible(false)</methodname>. Hovering mouse on the field displays the error message given as a parameter for the validator. If validated explicitly with <methodname>validate()</methodname>, as described later, the <classname>InvalidValueException</classname> is thrown if the validation fails, also carrying the error message. The value <literal>{0}</literal> in the error message string is replaced with the invalid input value."
msgstr ""

#. Tag: para
#: chapter-components.xml:1440
#, no-c-format
msgid "Validators validate the property type of the field after a possible conversion, not the presentation type. For example, an <classname>IntegerRangeValidator</classname> requires that the value type of the property data source is <classname>Integer</classname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1448
#, no-c-format
msgid "Built-in Validators"
msgstr ""

#. Tag: para
#: chapter-components.xml:1450
#, no-c-format
msgid "Vaadin includes the following built-in validators. The property value type is indicated."
msgstr ""

#. Tag: classname
#: chapter-components.xml:1459
#, no-c-format
msgid "BeanValidator"
msgstr ""

#. Tag: para
#: chapter-components.xml:1461
#, no-c-format
msgid "Validates a bean property according to annotations defined in the Bean Validation API 1.0 (JSR-303). This validator is usually not used explicitly, but they are created implicitly when binding fields in a <classname>BeanFieldGroup</classname>. Using bean validation requires an implementation library of the API. See <xref linkend=\"datamodel.itembinding.beanvalidation\"/> for details."
msgstr ""

#. Tag: classname
#: chapter-components.xml:1475
#, no-c-format
msgid "CompositeValidator"
msgstr ""

#. Tag: para
#: chapter-components.xml:1477
#, no-c-format
msgid "Combines validators using logical AND and OR operators."
msgstr ""

#. Tag: term
#: chapter-components.xml:1483
#, no-c-format
msgid "<classname>DateRangeValidator</classname>: <classname>Date</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1485
#, no-c-format
msgid "Checks that the date value is within the range at or between two given dates/times."
msgstr ""

#. Tag: term
#: chapter-components.xml:1492
#, no-c-format
msgid "<classname>DoubleRangeValidator</classname>: <classname>Double</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1494
#, no-c-format
msgid "Checks that the double value is at or between two given values."
msgstr ""

#. Tag: term
#: chapter-components.xml:1500
#, no-c-format
msgid "<classname>EmailValidator</classname>: <classname>String</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1502
#, no-c-format
msgid "Checks that the string value is a syntactically valid email address. The validated syntax is close to the RFC 822 standard regarding email addresses."
msgstr ""

#. Tag: term
#: chapter-components.xml:1510
#, no-c-format
msgid "<classname>IntegerRangeValidator</classname>: <classname>Integer</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1512
#, no-c-format
msgid "Checks that the integer value is at or between two given values."
msgstr ""

#. Tag: classname
#: chapter-components.xml:1518
#, no-c-format
msgid "NullValidator"
msgstr ""

#. Tag: para
#: chapter-components.xml:1520
#, no-c-format
msgid "Checks that the value is or is not a null value."
msgstr ""

#. Tag: term
#: chapter-components.xml:1526
#, no-c-format
msgid "<classname>RegexpValidator</classname>: <classname>String</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1528
#, no-c-format
msgid "Checks that the value matches with the given regular expression."
msgstr ""

#. Tag: term
#: chapter-components.xml:1534
#, no-c-format
msgid "<classname>StringLengthValidator</classname>: <classname>String</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1536
#, no-c-format
msgid "Checks that the length of the input string is at or between two given lengths."
msgstr ""

#. Tag: para
#: chapter-components.xml:1544
#, no-c-format
msgid "Please see the API documentation for more details."
msgstr ""

#. Tag: title
#: chapter-components.xml:1550
#, no-c-format
msgid "Automatic Validation"
msgstr ""

#. Tag: para
#: chapter-components.xml:1552
#, no-c-format
msgid "The validators are normally, when <literal>validationVisible</literal> is true for the field, executed implicitly on the next server request if the input has changed. If the field is in immediate mode, it (and any other fields with changed value) are validated immediately when the focus leaves the field."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1561
#, no-c-format
msgid ""
      "<![CDATA[TextField field = new TextField(\"Name\");\n"
      "field.addValidator(new StringLengthValidator(\n"
      "    \"The name must be 1-10 letters (was {0})\",\n"
      "    1, 10, true));\n"
      "field.setImmediate(true);\n"
      "layout.addComponent(field);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:1565
#, no-c-format
msgid "Explicit Validation"
msgstr ""

#. Tag: para
#: chapter-components.xml:1567
#, no-c-format
msgid "The validators are executed when the <methodname>validate()</methodname> or <methodname>commit()</methodname> methods are called for the field."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1574
#, no-c-format
msgid ""
      "<![CDATA[// A field with automatic validation disabled\n"
      "final TextField field = new TextField(\"Name\");\n"
      "layout.addComponent(field);\n"
      "        \n"
      "// Define validation as usual\n"
      "field.addValidator(new StringLengthValidator(\n"
      "    \"The name must be 1-10 letters (was {0})\",\n"
      "    1, 10, true));\n"
      "        \n"
      "// Run validation explicitly\n"
      "Button validate = new Button(\"Validate\");\n"
      "validate.addClickListener(new ClickListener() {\n"
      "    @Override\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        field.setValidationVisible(false);\n"
      "        try {\n"
      "            field.validate();\n"
      "        } catch (InvalidValueException e) {\n"
      "            Notification.show(e.getMessage());\n"
      "            field.setValidationVisible(true);\n"
      "        }\n"
      "    }\n"
      "});\n"
      "layout.addComponent(validate);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:1579
#, no-c-format
msgid "Implementing a Custom Validator"
msgstr ""

#. Tag: para
#: chapter-components.xml:1581
#, no-c-format
msgid "You can create custom validators by implementing the <interfacename>Validator</interfacename> interface and implementing its <methodname>validate()</methodname> method. If the validation fails, the method should throw either <classname>InvalidValueException</classname> or <classname>EmptyValueException</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1591
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyValidator implements Validator {\n"
      "    @Override\n"
      "    public void validate(Object value)\n"
      "            throws InvalidValueException {\n"
      "        if (!(value instanceof String &&\n"
      "                ((String)value).equals(\"hello\")))\n"
      "            throw new InvalidValueException(\"You're impolite\");\n"
      "    }\n"
      "}\n"
      "\n"
      "final TextField field = new TextField(\"Say hello\");\n"
      "field.addValidator(new MyValidator());\n"
      "field.setImmediate(true);\n"
      "layout.addComponent(field);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:1596
#, no-c-format
msgid "Validation in Field Groups"
msgstr ""

#. Tag: para
#: chapter-components.xml:1598
#, no-c-format
msgid "If the field is bound to a <classname>FieldGroup</classname>, described in <xref linkend=\"datamodel.itembinding\"/>, calling <methodname>commit()</methodname> for the group runs the validation for all the fields in the group, and if successful, writes the input values to the data source."
msgstr ""

#. Tag: title
#: chapter-components.xml:1612
#, no-c-format
msgid "Component Extensions"
msgstr ""

#. Tag: para
#: chapter-components.xml:1614
#, no-c-format
msgid "Components and UIs can have extensions which are attached to the component dynamically. Especially, many add-ons are extensions."
msgstr ""

#. Tag: para
#: chapter-components.xml:1619
#, no-c-format
msgid "How a component is extended depends on the extension. Typically, they have an <methodname>extend()</methodname> method that takes the component to be extended as the parameter."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1625
#, no-c-format
msgid ""
      "<![CDATA[TextField tf = new TextField(\"Hello\");\n"
      "layout.addComponent(tf);\n"
      "\n"
      "// Add a simple extension\n"
      "new CapsLockWarning().extend(tf);\n"
      "\n"
      "// Add an extension that requires some parameters\n"
      "CSValidator validator = new CSValidator();\n"
      "validator.setRegExp(\"[0-9]*\");\n"
      "validator.setErrorMessage(\"Must be a number\");\n"
      "validator.extend(tf);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1627
#, no-c-format
msgid "Development of custom extensions is described in <xref linkend=\"gwt.extension\"/>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:1634
#, no-c-format
msgid "Label"
msgstr ""

#. Tag: para
#: chapter-components.xml:1636
#, no-c-format
msgid "<classname>Label</classname> is a text component that displays non-editable text. In addition to regular text, you can also display preformatted text and HTML, depending on the <emphasis>content mode</emphasis> of the label."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1643
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// A container that is 100% wide by default\n"
      "VerticalLayout layout = new VerticalLayout();\n"
      "\n"
      "Label label = new Label(\"Labeling can be dangerous\");\n"
      "layout.addComponent(label);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1645
#, no-c-format
msgid "The text will wrap around and continue on the next line if it exceeds the width of the <classname>Label</classname>. The default width is 100%, so the containing layout must also have a defined width. Some layout components have undefined width by default, such as <classname>HorizontalLayout</classname>, so you need to pay special care with them."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1654
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// A container with a defined width. The default content layout\n"
      "// of Panel is VerticalLayout, which has 100% default width.\n"
      "Panel panel = new Panel(\"Panel Containing a Label\");\n"
      "panel.setWidth(\"300px\");\n"
      "\n"
      "panel.addComponent(\n"
      "    new Label(\"This is a Label inside a Panel. There is \" +\n"
      "              \"enough text in the label to make the text \" +\n"
      "              \"wrap when it exceeds the width of the panel.\"));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1656
#, no-c-format
msgid "As the size of the <classname>Panel</classname> in the above example is fixed and the width of <classname>Label</classname> is the default 100%, the text in the <classname>Label</classname> will wrap to fit the panel, as shown in <xref linkend=\"figure.components.label\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1664
#, no-c-format
msgid "The Label Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:1675
#, no-c-format
msgid "Setting <classname>Label</classname> to undefined width will cause it to not wrap at the end of the line, as the width of the content defines the width. If placed inside a layout with defined width, the <classname>Label</classname> will overflow the layout horizontally and, normally, be truncated."
msgstr ""

#. Tag: para
#: chapter-components.xml:1682
#, no-c-format
msgid "Even though <classname>Label</classname> is text and often used as a caption, it also has a caption, just like any other component. As with other components, the caption is managed by the containing layout."
msgstr ""

#. Tag: title
#: chapter-components.xml:1689
#, no-c-format
msgid "Content Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:1691
#, no-c-format
msgid "The contents of a label are formatted depending on the content mode. By default, the text is assumed to be plain text and any contained XML-specific characters will be quoted appropriately to allow rendering the contents of a label in HTML in a web browser. The content mode can be set in the constructor or with <methodname>setContentMode()</methodname>, and can have the values defined in the <classname>ContentMode</classname> enumeration type in <package>com.vaadin.shared.ui.label</package> package:"
msgstr ""

#. Tag: constant
#: chapter-components.xml:1703
#, no-c-format
msgid "TEXT"
msgstr ""

#. Tag: para
#: chapter-components.xml:1705
#, no-c-format
msgid "The default content mode where the label contains only plain text. All characters are allowed, including the special <literal>&lt;</literal>, <literal>&gt;</literal>, and <literal>&amp;</literal> characters in XML or HTML, which are quoted properly in HTML while rendering the component. This is the default mode."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1716
#, no-c-format
msgid "PREFORMATTED"
msgstr ""

#. Tag: para
#: chapter-components.xml:1718
#, no-c-format
msgid "Content mode where the label contains preformatted text. It will be, by default, rendered with a fixed-width typewriter font. Preformatted text can contain line breaks, written in Java with the <literal>\\n</literal> escape sequence for a newline character (ASCII 0x0a), or tabulator characters written with <literal>\\t</literal> (ASCII 0x08)."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1729
#, no-c-format
msgid "HTML"
msgstr ""

#. Tag: para
#: chapter-components.xml:1731
#, no-c-format
msgid "Content mode where the label contains (X)HTML. The content will be enclosed in a DIV element having the namespace \"<uri>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</uri>\"."
msgstr ""

#. Tag: para
#: chapter-components.xml:1737
#, no-c-format
msgid "Please note the following security and validity warnings regarding the HTML content mode."
msgstr ""

#. Tag: title
#: chapter-components.xml:1746
#, no-c-format
msgid "Cross-Site Scripting Warning"
msgstr ""

#. Tag: para
#: chapter-components.xml:1748
#, no-c-format
msgid "Having <classname>Label</classname> in <constant>HTML</constant> content mode allows pure HTML content. If the content comes from user input, you should always carefully sanitize it to prevent cross-site scripting (XSS) attacks. Please see <xref linkend=\"advanced.security.sanitizing\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1756
#, no-c-format
msgid "Also, the validity of the HTML content is not checked when rendering the component and any errors can result in an error in the browser. If the content comes from an uncertain source, you should always validate it before displaying it in the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:1764
#, no-c-format
msgid "The following example demonstrates the use of <classname>Label</classname> in different modes."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1769
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[GridLayout labelgrid = new GridLayout (2,1);\n"
      "\n"
      "labelgrid.addComponent (new Label (\"PREFORMATTED\"));\n"
      "labelgrid.addComponent (\n"
      "    new Label (\"This is a preformatted label.\\n\"+\n"
      "               \"The newline character \\\\n breaks the line.\",\n"
      "               Label.ContentMode.PREFORMATTED));\n"
      "\n"
      "labelgrid.addComponent (new Label (\"TEXT\"));\n"
      "labelgrid.addComponent (\n"
      "    new Label (\"This is a label in (plain) text mode\",\n"
      "               Label.ContentMode.TEXT));\n"
      "\n"
      "labelgrid.addComponent (new Label (\"HTML\"));\n"
      "labelgrid.addComponent (\n"
      "    new Label (\"<i>This</i> is an <b>HTML</b> formatted label\",\n"
      "               Label.ContentMode.HTML));\n"
      "\n"
      "layout.addComponent(labelgrid);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1771
#, no-c-format
msgid "The rendering will look as follows:"
msgstr ""

#. Tag: title
#: chapter-components.xml:1776
#, no-c-format
msgid "Label Modes Rendered on Screen"
msgstr ""

#. Tag: title
#: chapter-components.xml:1827
#, no-c-format
msgid "Spacing with a <classname>Label</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1829
#, no-c-format
msgid "You can use a <classname>Label</classname> to create vertical or horizontal space in a layout. If you need a empty \"line\" in a vertical layout, having just a label with empty text is not enough, as it will collapse to zero height. The same goes for a label with only whitespace as the label text. You need to use a non-breaking space character, either <literal>&amp;nbsp;</literal> or <literal>&amp;#160;</literal>:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1838
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[layout.addComponent(new Label(\"&nbsp;\", Label.ContentMode.XHTML));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1840
#, no-c-format
msgid "Using the <parameter>Label.ContentMode.PREFORMATTED</parameter> mode has the same effect; preformatted spaces do not collapse in a vertical layout. In a <classname>HorizontalLayout</classname>, the width of a space character may be unpredictable if the label font is proportional, so you can use the preformatted mode to add em-width wide spaces."
msgstr ""

#. Tag: para
#: chapter-components.xml:1848
#, no-c-format
msgid "If you want a gap that has adjustable width or height, you can use an empty label if you specify a height or width for it. For example, to create vertical space in a <classname>VerticalLayout</classname>:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1854
#, no-c-format
msgid ""
      "<![CDATA[Label gap = new Label();\n"
      "gap.setHeight(\"1em\");\n"
      "verticalLayout.addComponent(gap);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1856
#, no-c-format
msgid "You can make a flexible expanding spacer by having a relatively sized empty label with <literal>100%</literal> height or width and setting the label as expanding in the layout."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1862
#, no-c-format
msgid ""
      "<![CDATA[// A wide component bar\n"
      "HorizontalLayout horizontal = new HorizontalLayout();\n"
      "horizontal.setWidth(\"100%\");\n"
      "\n"
      "// Have a component before the gap (a collapsing cell)\n"
      "Button button1 = new Button(\"I'm on the left\");\n"
      "horizontal.addComponent(button1);\n"
      "\n"
      "// An expanding gap spacer\n"
      "Label expandingGap = new Label();\n"
      "expandingGap.setWidth(\"100%\");\n"
      "horizontal.addComponent(expandingGap);\n"
      "horizontal.setExpandRatio(expandingGap, 1.0f);\n"
      "\n"
      "// A component after the gap (a collapsing cell)\n"
      "Button button2 = new Button(\"I'm on the right\");\n"
      "horizontal.addComponent(button2);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1869
#, no-c-format
msgid "The <classname>Label</classname> component has a <literal>v-label</literal> overall style."
msgstr ""

#. Tag: para
#: chapter-components.xml:1874
#, no-c-format
msgid "The Reindeer theme includes a number of predefined styles for typical formatting cases. These include \"<literal>h1</literal>\" (<methodname>Reindeer.LABEL_H1</methodname>) and \"<literal>h2</literal>\" (<methodname>Reindeer.LABEL_H2</methodname>) heading styles and \"<literal>light</literal>\" (<methodname>Reindeer.LABEL_SMALL</methodname>) style."
msgstr ""

#. Tag: classname
#: chapter-components.xml:1886
#, no-c-format
msgid "Link"
msgstr ""

#. Tag: para
#: chapter-components.xml:1888
#, no-c-format
msgid "The <classname>Link</classname> component allows making hyperlinks. References to locations are represented as resource objects, explained in <xref linkend=\"application.resources\"/>. The <classname>Link</classname> is a regular HTML hyperlink, that is, an <literal>&lt;a href&gt;</literal> anchor element that is handled natively by the browser. Unlike when clicking a <classname>Button</classname>, clicking a <classname>Link</classname> does not cause an event on the server-side."
msgstr ""

#. Tag: para
#: chapter-components.xml:1898
#, no-c-format
msgid "Links to an arbitrary URL can be made by using an <classname>ExternalResource</classname> as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1904
#, no-c-format
msgid ""
      "<![CDATA[// Textual link\n"
      "Link link = new Link(\"Click Me!\",\n"
      "        new ExternalResource(\"http://vaadin.com/\"));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1906
#, no-c-format
msgid "You can use <methodname>setIcon()</methodname> to make image links as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1910
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Image link\n"
      "Link iconic = new Link(null,\n"
      "        new ExternalResource(\"http://vaadin.com/\"));\n"
      "iconic.setIcon(new ThemeResource(\"img/nicubunu_Chain.png\"));\n"
      "\n"
      "// Image + caption\n"
      "Link combo = new Link(\"To appease both literal and visual\",\n"
      "        new ExternalResource(\"http://vaadin.com/\"));\n"
      "combo.setIcon(new ThemeResource(\"img/nicubunu_Chain.png\"));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1912
#, no-c-format
msgid "The resulting links are shown in <xref linkend=\"figure.components.link.basic\"/>. You could add a \"<literal>display: block</literal>\" style for the icon element to place the caption below it."
msgstr ""

#. Tag: title
#: chapter-components.xml:1919
#, no-c-format
msgid "<classname>Link</classname> Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:1930
#, no-c-format
msgid "With the simple constructor used in the above example, the resource is opened in the current window. Using the constructor that takes the target window as a parameter, or by setting the target window with <methodname>setTargetName()</methodname>, you can open the resource in another window, such as a popup browser window/tab. As the target name is an HTML <literal>target</literal> string managed by the browser, the target can be any window, including windows not managed by the application itself. You can use the special underscored target names, such as <literal>_blank</literal> to open the link to a new browser window or tab."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1943
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Hyperlink to a given URL\n"
      "Link link = new Link(\"Take me a away to a faraway land\",\n"
      "        new ExternalResource(\"http://vaadin.com/\"));\n"
      "\n"
      "// Open the URL in a new window/tab\n"
      "link.setTargetName(\"_blank\");\n"
      "        \n"
      "// Indicate visually that it opens in a new window/tab\n"
      "link.setIcon(new ThemeResource(\"icons/external-link.png\"));\n"
      "link.addStyleName(\"icon-after-caption\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1945
#, no-c-format
msgid "Normally, the link icon is before the caption. You can have it right of the caption by reversing the text direction in the containing element."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1950
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* Position icon right of the link caption. */\n"
      ".icon-after-caption {\n"
      "    direction: rtl;\n"
      "}\n"
      "/* Add some padding around the icon. */\n"
      ".icon-after-caption .v-icon {\n"
      "    padding: 0 3px;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1952
#, no-c-format
msgid "The resulting link is shown in <xref linkend=\"figure.components.link.new-window\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1957
#, no-c-format
msgid "Link That Opens a New Window"
msgstr ""

#. Tag: para
#: chapter-components.xml:1968
#, no-c-format
msgid "With the <literal>_blank</literal> target, a normal new browser window is opened. If you wish to open it in a popup window (or tab), you need to give a size for the window with <methodname>setTargetWidth()</methodname> and <methodname>setTargetHeight()</methodname>. You can control the window border style with <methodname>setTargetBorder()</methodname>, which takes any of the defined border styles <parameter>TARGET_BORDER_DEFAULT</parameter>, <parameter>TARGET_BORDER_MINIMAL</parameter>, and <parameter>TARGET_BORDER_NONE</parameter>. The exact result depends on the browser."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1980
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Open the URL in a popup\n"
      "link.setTargetName(\"_blank\");\n"
      "link.setTargetBorder(Link.TARGET_BORDER_NONE);\n"
      "link.setTargetHeight(300);\n"
      "link.setTargetWidth(400);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1984
#, no-c-format
msgid "In addition to the <classname>Link</classname> component, Vaadin allows alternative ways to make hyperlinks. The <classname>Button</classname> component has a <parameter>Reindeer.BUTTON_LINK</parameter> style name that makes it look like a hyperlink, while handling clicks in a server-side click listener instead of in the browser. Also, you can make hyperlinks (or any other HTML) in a <classname>Label</classname> in XHTML content mode."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1996
#, no-c-format
msgid ""
      "<?dbfo-need height=\"3cm\" ?><![CDATA[.v-link { }\n"
      "  a { }\n"
      "    .v-icon {}\n"
      "    span {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1998
#, no-c-format
msgid "The overall style for the <classname>Link</classname> component is <literal>v-link</literal>. The root element contains the <literal>&lt;a href&gt;</literal> hyperlink anchor. Inside the anchor are the icon, with <literal>v-icon</literal> style, and the caption in a text span."
msgstr ""

#. Tag: para
#: chapter-components.xml:2005
#, no-c-format
msgid "Hyperlink anchors have a number of <emphasis>pseudo-classes</emphasis> that are active at different times. An unvisited link has <literal>a:link</literal> class and a visited link <literal>a:visited</literal>. When the mouse pointer hovers over the link, it will have <varname>a:hover</varname>, and when the mouse button is being pressed over the link, the <literal>a:active</literal> class. When combining the pseudo-classes in a selector, please notice that <literal>a:hover</literal> must come after an <literal>a:link</literal> and <literal>a:visited</literal>, and <literal>a:active</literal> after the <literal>a:hover</literal>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2021 chapter-components.xml:2024
#, no-c-format
msgid "TextField"
msgstr ""

#. Tag: para
#: chapter-components.xml:2027
#, no-c-format
msgid "<classname>TextField</classname> is one of the most commonly used user interface components. It is a <classname>Field</classname> component that allows entering textual values using keyboard."
msgstr ""

#. Tag: para
#: chapter-components.xml:2033
#, no-c-format
msgid "The following example creates a simple text field:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2039
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a text field\n"
      "TextField tf = new TextField(\"A Field\");\n"
      "        \n"
      "// Put some initial content in it\n"
      "tf.setValue(\"Stuff in the field\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2041
#, no-c-format
msgid "See the result in <xref linkend=\"figure.components.textfield.basic\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2046
#, no-c-format
msgid "<classname>TextField</classname> Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:2057
#, no-c-format
msgid "Value changes are handled with a <classname>Property.ValueChangeListener</classname>, as in most other fields. The value can be acquired with <methodname>getValue()</methodname> directly from the text field, as is done in the example below, or from the property reference of the event."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2067
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Handle changes in the value\n"
      "tf.addValueChangeListener(new Property.ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        // Assuming that the value type is a String\n"
      "        String value = (String) tf.getValue();\n"
      "\n"
      "        // Do something with the value\n"
      "        Notification.show(\"Value is:\", value);\n"
      "    }\n"
      "});\n"
      "        \n"
      "// Fire value changes immediately when the field loses focus\n"
      "tf.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2069
#, no-c-format
msgid "Much of the API of <classname>TextField</classname> is defined in <classname>AbstractTextField</classname>, which allows different kinds of text input fields, such as rich text editors, which do not share all the features of the single-line text fields."
msgstr ""

#. Tag: title
#: chapter-components.xml:2077
#, no-c-format
msgid "Text Field Class Relationships"
msgstr ""

#. Tag: title
#: chapter-components.xml:2089
#, no-c-format
msgid "Data Binding"
msgstr ""

#. Tag: para
#: chapter-components.xml:2092
#, no-c-format
msgid "<classname>TextField</classname> edits <classname>String</classname> values, but you can bind it to any property type that has a proper converter, as described in <xref linkend=\"datamodel.properties.converter\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2101
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have an initial data model. As Double is unmodificable and\n"
      "// doesn't support assignment from String, the object is\n"
      "// reconstructed in the wrapper when the value is changed.\n"
      "Double trouble = 42.0;\n"
      "        \n"
      "// Wrap it in a property data source\n"
      "final ObjectProperty<Double> property =\n"
      "    new ObjectProperty<Double>(trouble);\n"
      "        \n"
      "// Create a text field bound to it\n"
      "// (StringToDoubleConverter is used automatically)\n"
      "TextField tf = new TextField(\"The Answer\", property);\n"
      "tf.setImmediate(true);\n"
      "\n"
      "// Show that the value is really written back to the\n"
      "// data source when edited by user.\n"
      "Label feedback = new Label(property);\n"
      "feedback.setCaption(\"The Value\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2103
#, no-c-format
msgid "When you put a <classname>Table</classname> in editable mode or create fields with a <classname>FieldGroup</classname>, the <classname>DefaultFieldFactory</classname> creates a <classname>TextField</classname> for almost every property type by default. You often need to make a custom factory to customize the creation and to set the field tooltip, validation, formatting, and so on."
msgstr ""

#. Tag: para
#: chapter-components.xml:2112
#, no-c-format
msgid "See <xref linkend=\"datamodel\"/> for more details on data binding, field factories for <classname>Table</classname> in <xref linkend=\"components.table.editing\"/>, and <xref linkend=\"datamodel.itembinding\"/> regarding forms."
msgstr ""

#. Tag: book-example
#: chapter-components.xml:2119
#, no-c-format
msgid "Bean Binding"
msgstr ""

#. Tag: title
#: chapter-components.xml:2125
#, no-c-format
msgid "String Length"
msgstr ""

#. Tag: para
#: chapter-components.xml:2127
#, no-c-format
msgid "The <methodname>setMaxLength()</methodname> method sets the maximum length of the input string so that the browser prevents the user from entering a longer one. As a security feature, the input value is automatically truncated on the server-side, as the maximum length setting could be bypassed on the client-side. The maximum length property is defined at <classname>AbstractTextField</classname> level."
msgstr ""

#. Tag: para
#: chapter-components.xml:2136
#, no-c-format
msgid "Notice that the maximum length setting does not affect the width of the field. You can set the width with <methodname>setWidth()</methodname>, as with other components. Using <emphasis>em</emphasis> widths is recommended to better approximate the proper width in relation to the size of the used font. There is no standard way in HTML for setting the width exactly to a number of letters (in a monospaced font). You can trick your way around this restriction by putting the text field in an undefined-width <classname>VerticalLayout</classname> together with an undefined-width <classname>Label</classname> that contains a sample text, and setting the width of the text field as 100%. The layout will get its width from the label, and the text field will use that."
msgstr ""

#. Tag: book-example
#: chapter-components.xml:2150
#, no-c-format
msgid "Fitting TextField width to fixed input length"
msgstr ""

#. Tag: title
#: chapter-components.xml:2156
#, no-c-format
msgid "Handling Null Values"
msgstr ""

#. Tag: primary
#: chapter-components.xml:2159
#, no-c-format
msgid "Null representation"
msgstr ""

#. Tag: methodname
#: chapter-components.xml:2163
#, no-c-format
msgid "setNullRepresentation()"
msgstr ""

#. Tag: para
#: chapter-components.xml:2163
#, no-c-format
msgid "As with any field, the value of a <classname>TextField</classname> can be set as <parameter>null</parameter>. This occurs most commonly when you create a new field without setting a value for it or bind the field value to a data source that allows null values. In such case, you might want to show a special value that stands for the null value. You can set the null representation with the <methodname>setNullRepresentation()</methodname> method. Most typically, you use an empty string for the null representation, unless you want to differentiate from a string that is explicitly empty. The default null representation is \"<literal>null</literal>\", which essentially warns that you may have forgotten to initialize your data objects properly."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:2179
#, no-c-format
msgid "setNullSettingAllowed()"
msgstr ""

#. Tag: para
#: chapter-components.xml:2179
#, no-c-format
msgid "The <methodname>setNullSettingAllowed()</methodname> controls whether the user can actually input a null value by using the null value representation. If the setting is <literal>false</literal>, which is the default, inputting the null value representation string sets the value as the literal value of the string, not null. This default assumption is a safeguard for data sources that may not allow null values."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2191
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Create a text field without setting its value\n"
      "TextField tf = new TextField(\"Field Energy (J)\");\n"
      "tf.setNullRepresentation(\"-- null-point energy --\");\n"
      "\n"
      "// The null value is actually the default\n"
      "tf.setValue(null);\n"
      "        \n"
      "// Allow user to input the null value by\n"
      "// its representation\n"
      "tf.setNullSettingAllowed(true);\n"
      "\n"
      "// Feedback to see the value\n"
      "Label value = new Label(tf);\n"
      "value.setCaption(\"Current Value:\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2193
#, no-c-format
msgid "The <classname>Label</classname>, which is bound to the value of the <classname>TextField</classname>, displays a null value as empty. The resulting user interface is shown in <xref linkend=\"figure.components.textfield.nullvalues\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2201
#, no-c-format
msgid "Null Value Representation"
msgstr ""

#. Tag: title
#: chapter-components.xml:2224 chapter-components.xml:2255
#, no-c-format
msgid "Text Change Events"
msgstr ""

#. Tag: classname
#: chapter-components.xml:2227
#, no-c-format
msgid "Text change events"
msgstr ""

#. Tag: para
#: chapter-components.xml:2230
#, no-c-format
msgid "Often you want to receive a change event immediately when the text field value changes. The <emphasis>immediate</emphasis> mode is not literally immediate, as the changes are transmitted only after the field loses focus. In the other extreme, using keyboard events for every keypress would make typing unbearably slow and also processing the keypresses is too complicated for most purposes. <emphasis>Text change events</emphasis> are transmitted asynchronously soon after typing and do not block typing while an event is being processed."
msgstr ""

#. Tag: para
#: chapter-components.xml:2241
#, no-c-format
msgid "Text change events are received with a <classname>TextChangeListener</classname>, as is done in the following example that demonstrates how to create a text length counter:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2248
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Text field with maximum length\n"
      "final TextField tf = new TextField(\"My Eventful Field\");\n"
      "tf.setValue(\"Initial content\");\n"
      "tf.setMaxLength(20);\n"
      "\n"
      "// Counter for input length\n"
      "final Label counter = new Label();\n"
      "counter.setValue(tf.toString().length() +\n"
      "                 \" of \" + tf.getMaxLength());\n"
      "        \n"
      "// Display the current length interactively in the counter\n"
      "tf.addValueChangeListener(new TextChangeListener() {\n"
      "    public void textChange(TextChangeEvent event) {\n"
      "        int len = event.getText().length();\n"
      "        counter.setValue(len + \" of \" + tf.getMaxLength());\n"
      "    }\n"
      "});\n"
      "\n"
      "// This is actually the default\n"
      "tf.setTextChangeEventMode(TextChangeEventMode.LAZY);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2250
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textfield.textchangeevents\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2266
#, no-c-format
msgid "The <emphasis>text change event mode</emphasis> defines how quickly the changes are transmitted to the server and cause a server-side event. Lazier change events allow sending larger changes in one event if the user is typing fast, thereby reducing server requests."
msgstr ""

#. Tag: para
#: chapter-components.xml:2273
#, no-c-format
msgid "You can set the text change event mode of a <classname>TextField</classname> with <methodname>setTextChangeEventMode()</methodname>. The allowed modes are defined in <classname>TextChangeEventMode</classname> class and are the following:"
msgstr ""

#. Tag: term
#: chapter-components.xml:2283
#, no-c-format
msgid "<parameter>TextChangeEventMode.LAZY</parameter> (default)"
msgstr ""

#. Tag: para
#: chapter-components.xml:2285
#, no-c-format
msgid "An event is triggered when there is a pause in editing the text. The length of the pause can be modified with <methodname>setInputEventTimeout()</methodname>. As with the <parameter>TIMEOUT</parameter> mode, a text change event is forced before a possible <classname>ValueChangeEvent</classname>, even if the user did not keep a pause while entering the text."
msgstr ""

#. Tag: para
#: chapter-components.xml:2295
#, no-c-format
msgid "This is the default mode."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:2301
#, no-c-format
msgid "TextChangeEventMode.TIMEOUT"
msgstr ""

#. Tag: para
#: chapter-components.xml:2303
#, no-c-format
msgid "A text change in the user interface causes the event to be communicated to the application after a timeout period. If more changes are made during this period, the event sent to the server-side includes the changes made up to the last change. The length of the timeout can be set with <methodname>setInputEventTimeout()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2312
#, no-c-format
msgid "If a <classname>ValueChangeEvent</classname> would occur before the timeout period, a <classname>TextChangeEvent</classname> is triggered before it, on the condition that the text content has changed since the previous <classname>TextChangeEvent</classname>."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:2322
#, no-c-format
msgid "TextChangeEventMode.EAGER"
msgstr ""

#. Tag: para
#: chapter-components.xml:2324
#, no-c-format
msgid "An event is triggered immediately for every change in the text content, typically caused by a key press. The requests are separate and are processed sequentially one after another. Change events are nevertheless communicated asynchronously to the server, so further input can be typed while event requests are being processed."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2342 chapter-components.xml:2521
#, no-c-format
msgid "<![CDATA[.v-textfield { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2344
#, no-c-format
msgid "The HTML structure of <classname>TextField</classname> is extremely simple, consisting only of an element with <literal>v-textfield</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:2349
#, no-c-format
msgid "For example, the following custom style uses dashed border:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2355
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[.v-textfield-dashing {\n"
      "    border:     thin dashed;\n"
      "    background: white; /* Has shading image by default */\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2357
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textfield.css\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2362
#, no-c-format
msgid "Styling TextField with CSS"
msgstr ""

#. Tag: para
#: chapter-components.xml:2373
#, no-c-format
msgid "The style name for <classname>TextField</classname> is also used in several components that contain a text input field, even if the text input is not an actual <classname>TextField</classname>. This ensures that the style of different text input boxes is similar."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2385
#, no-c-format
msgid "TextArea"
msgstr ""

#. Tag: para
#: chapter-components.xml:2387
#, no-c-format
msgid "<classname>TextArea</classname> is a multi-line version of the <classname>TextField</classname> component described in <xref linkend=\"components.textfield\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2393
#, no-c-format
msgid "The following example creates a simple text area:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2399
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create the area\n"
      "TextArea area = new TextArea(\"Big Area\");\n"
      "        \n"
      "// Put some content in it\n"
      "area.setValue(\"A row\\n\"+\n"
      "              \"Another row\\n\"+\n"
      "              \"Yet another row\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2401
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textarea\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2406
#, no-c-format
msgid "<classname>TextArea</classname> Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:2417
#, no-c-format
msgid "You can set the number of visible rows with <methodname>setRows()</methodname> or use the regular <methodname>setHeight()</methodname> to define the height in other units. If the actual number of rows exceeds the number, a vertical scrollbar will appear. Setting the height with <methodname>setRows()</methodname> leaves space for a horizontal scrollbar, so the actual number of visible rows may be one higher if the scrollbar is not visible."
msgstr ""

#. Tag: para
#: chapter-components.xml:2427
#, no-c-format
msgid "You can set the width with the regular <methodname>setWidth()</methodname> method. Setting the size with the <emphasis>em</emphasis> unit, which is relative to the used font size, is recommended."
msgstr ""

#. Tag: title
#: chapter-components.xml:2434
#, no-c-format
msgid "Word Wrap"
msgstr ""

#. Tag: para
#: chapter-components.xml:2436
#, no-c-format
msgid "The <methodname>setWordwrap()</methodname> sets whether long lines are wrapped (<literal>true</literal> - default) when the line length reaches the width of the writing area. If the word wrap is disabled (<literal>false</literal>), a vertical scrollbar will appear instead. The word wrap is only a visual feature and wrapping a long line does not insert line break characters in the field value; shortening a wrapped line will undo the wrapping."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2448
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[TextArea area1 = new TextArea(\"Wrapping\");\n"
      "area1.setWordwrap(true); // The default\n"
      "area1.setValue(\"A quick brown fox jumps over the lazy dog\");\n"
      "\n"
      "TextArea area2 = new TextArea(\"Nonwrapping\");\n"
      "area2.setWordwrap(false);\n"
      "area2.setValue(\"Victor jagt zw&ouml;lf Boxk&auml;mpfer quer \"+\n"
      "               \"&uuml;ber den Sylter Deich\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2450
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textarea.wordwrap\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2455
#, no-c-format
msgid "Word Wrap in <classname>TextArea</classname>"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2470
#, no-c-format
msgid "<![CDATA[.v-textarea { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2472
#, no-c-format
msgid "The HTML structure of <classname>TextArea</classname> is extremely simple, consisting only of an element with <literal>v-textarea</literal> style."
msgstr ""

#. Tag: book-example
#: chapter-components.xml:2477 chapter-components.xml:2530
#, no-c-format
msgid "CSS Styling"
msgstr ""

#. Tag: classname
#: chapter-components.xml:2482 chapter-components.xml:2498
#, no-c-format
msgid "PasswordField"
msgstr ""

#. Tag: para
#: chapter-components.xml:2484
#, no-c-format
msgid "The <classname>PasswordField</classname> is a variant of <classname>TextField</classname> that hides the typed input from visual inspection."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2491
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[PasswordField tf = new PasswordField(\"Keep it secret\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2493
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.passwordfield.basic\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2509
#, no-c-format
msgid "You should note that the <classname>PasswordField</classname> hides the input only from \"over the shoulder\" visual observation. Unless the server connection is encrypted with a secure connection, such as HTTPS, the input is transmitted in clear text and may be intercepted by anyone with low-level access to the network. Also phishing attacks that intercept the input in the browser may be possible by exploiting JavaScript execution security holes in the browser."
msgstr ""

#. Tag: para
#: chapter-components.xml:2523
#, no-c-format
msgid "The <classname>PasswordField</classname> does not have its own CSS style name but uses the same <literal>v-textfield</literal> style as the regular <classname>TextField</classname>. See <xref linkend=\"components.textfield.css\"/> for information on styling it."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2535
#, no-c-format
msgid "RichTextArea"
msgstr ""

#. Tag: para
#: chapter-components.xml:2537
#, no-c-format
msgid "The <classname>RichTextArea</classname> field allows entering or editing formatted text. The toolbar provides all basic editing functionalities. The text content of <classname>RichTextArea</classname> is represented in HTML format. <classname>RichTextArea</classname> inherits <classname>TextField</classname> and does not add any API functionality over it. You can add new functionality by extending the client-side components <classname>VRichTextArea</classname> and <classname>VRichTextToolbar</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2548
#, no-c-format
msgid "As with <classname>TextField</classname>, the textual content of the rich text area is the <classname>Property</classname> of the field and can be set with <methodname>setValue()</methodname> and read with <methodname>getValue()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2555
#, no-c-format
msgid ""
      "<![CDATA[// Create a rich text area\n"
      "final RichTextArea rtarea = new RichTextArea();\n"
      "rtarea.setCaption(\"My Rich Text Area\");\n"
      "\n"
      "// Set initial content as HTML\n"
      "rtarea.setValue(\"<h1>Hello</h1>\\n\" +\n"
      "    \"<p>This rich text area contains some text.</p>\");]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2558
#, no-c-format
msgid "Rich Text Area Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:2569
#, no-c-format
msgid "Above, we used context-specific tags such as <literal>&lt;h1&gt;</literal> in the initial HTML content. The rich text area component does not allow creating such tags, only formatting tags, but it does preserve them unless the user edits them away. Any non-visible whitespace such as the new line character (<literal>\\n</literal>) are removed from the content. For example, the value set above will be as follows when read from the field with <methodname>getValue()</methodname>:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2579
#, no-c-format
msgid "<![CDATA[<h1>Hello</h1> <p>This rich text area contains some text.</p>]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2581
#, no-c-format
msgid "The rich text area is one of the few components in Vaadin that contain textual labels. The selection boxes in the toolbar are in English and currently can not be localized in any other way than by inheriting or reimplementing the client-side <classname>VRichTextToolbar</classname> widget. The buttons can be localized simply with CSS by downloading a copy of the toolbar background image, editing it, and replacing the default toolbar. The toolbar is a single image file from which the individual button icons are picked, so the order of the icons is different from the rendered. The image file depends on the client-side implementation of the toolbar."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2593
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[\n"
      ".v-richtextarea-richtextexample .gwt-ToggleButton\n"
      ".gwt-Image {\n"
      "  background-image: url(img/richtextarea-toolbar-fi.png)\n"
      "                    !important;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2596
#, no-c-format
msgid "Regular English and a Localized Rich Text Area Toolbar"
msgstr ""

#. Tag: title
#: chapter-components.xml:2610
#, no-c-format
msgid "Cross-Site Scripting with <classname>RichTextArea</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2612
#, no-c-format
msgid "The user input from a <classname>RichTextArea</classname> is transmitted as XHTML from the browser to server-side and is not sanitized. As the entire purpose of the <classname>RichTextArea</classname> component is to allow input of formatted text, you can not sanitize it just by removing all HTML tags. Also many attributes, such as <parameter>style</parameter>, should pass through the sanitization."
msgstr ""

#. Tag: para
#: chapter-components.xml:2621
#, no-c-format
msgid "See <xref linkend=\"advanced.security.sanitizing\"/> for more details on Cross-Site scripting vulnerabilities and sanitization of user input."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2630
#, no-c-format
msgid ""
      "<![CDATA[.v-richtextarea { }\n"
      ".v-richtextarea .gwt-RichTextToolbar { }\n"
      ".v-richtextarea .gwt-RichTextArea { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2632
#, no-c-format
msgid "The rich text area consists of two main parts: the toolbar with overall style <literal>.gwt-RichTextToolbar</literal> and the editor area with style <literal>.gwt-RichTextArea</literal>. The editor area obviously contains all the elements and their styles that the HTML content contains. The toolbar contains buttons and drop-down list boxes with the following respective style names:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2641
#, no-c-format
msgid ""
      "<![CDATA[.gwt-ToggleButton { }\n"
      ".gwt-ListBox { }]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2648
#, no-c-format
msgid "Date and Time Input with <classname>DateField</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2649
#, no-c-format
msgid "The <classname>DateField</classname> component provides the means to display and input date and time. The field comes in two variations: <classname>PopupDateField</classname>, with a numeric input box and a popup calendar view, and <classname>InlineDateField</classname>, with the calendar view always visible. The <classname>DateField</classname> base class defaults to the popup variation."
msgstr ""

#. Tag: para
#: chapter-components.xml:2658
#, no-c-format
msgid "The example below illustrates the use of the <classname>DateField</classname> baseclass, which is equivalent to the <classname>PopupDateField</classname>. We set the initial time of the date field to current time by using the default constructor of the <classname>java.util.Date</classname> class."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2666
#, no-c-format
msgid ""
      "<![CDATA[// Create a DateField with the default style\n"
      "DateField date = new DateField();\n"
      "        \n"
      "// Set the date and time to present\n"
      "date.setValue(new Date());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2668
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.datefield.basic\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2673
#, no-c-format
msgid "<classname>DateField</classname> (<classname>PopupDateField</classname>) for Selecting Date and Time"
msgstr ""

#. Tag: classname
#: chapter-components.xml:2685
#, no-c-format
msgid "PopupDateField"
msgstr ""

#. Tag: para
#: chapter-components.xml:2687
#, no-c-format
msgid "The <classname>PopupDateField</classname> provides date input using a text box for the date and time. As the <classname>DateField</classname> defaults to this component, the use is exactly the same as described earlier. Clicking the handle right of the date opens a popup view for selecting the year, month, and day, as well as time. Also the <keycap>Down</keycap> key opens the popup. Once opened, the user can navigate the calendar using the cursor keys."
msgstr ""

#. Tag: para
#: chapter-components.xml:2697
#, no-c-format
msgid "The date and time selected from the popup are displayed in the text box according to the default date and time format of the current locale, or as specified with <methodname>setDateFormat()</methodname>. The same format definitions are used for parsing user input."
msgstr ""

#. Tag: title
#: chapter-components.xml:2705
#, no-c-format
msgid "Date and Time Format"
msgstr ""

#. Tag: para
#: chapter-components.xml:2707
#, no-c-format
msgid "The date and time are normally displayed according to the default format for the current locale (see <xref linkend=\"components.features.locale\"/>). You can specify a custom format with <methodname>setDateFormat()</methodname>. It takes a format string that follows the format of the <classname>SimpleDateFormat</classname> in Java."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2716
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Display only year, month, and day in ISO format\n"
      "date.setDateFormat(\"yyyy-MM-dd\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2718
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.datefield.popupdatefield.format\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2724
#, no-c-format
msgid "Custom Date Format for <classname>PopupDateField</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2736
#, no-c-format
msgid "The same format specification is also used for parsing user-input date and time, as described later."
msgstr ""

#. Tag: title
#: chapter-components.xml:2743
#, no-c-format
msgid "Handling Malformed User Input"
msgstr ""

#. Tag: para
#: chapter-components.xml:2745
#, no-c-format
msgid "A user can easily input a malformed or otherwise invalid date or time. <classname>DateField</classname> has two validation layers: first on the client-side and then on the server-side."
msgstr ""

#. Tag: para
#: chapter-components.xml:2751
#, no-c-format
msgid "The validity of the entered date is first validated on the client-side, immediately when the input box loses focus. If the date format is invalid, the <literal>v-datefield-parseerror</literal> style is set. Whether this causes a visible indication of a problem depends on the theme. The built-in <literal>reindeer</literal> theme does not shown any indication by default, making server-side handling of the problem more convenient."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2761
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[.mydate.v-datefield-parseerror .v-textfield {\n"
      "    background: pink;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2763
#, no-c-format
msgid "The <methodname>setLenient(true)</methodname> setting enables relaxed interpretation of dates, so that invalid dates, such as February 30th or March 0th, are wrapped to the next or previous month, for example."
msgstr ""

#. Tag: para
#: chapter-components.xml:2769
#, no-c-format
msgid "The server-side validation phase occurs when the date value is sent to the server. If the date field is set in immediate state, it occurs immediately after the field loses focus. Once this is done and if the status is still invalid, an error indicator is displayed beside the component. Hovering the mouse pointer over the indicator shows the error message."
msgstr ""

#. Tag: para
#: chapter-components.xml:2778
#, no-c-format
msgid "You can handle the errors by overriding the <methodname>handleUnparsableDateString()</methodname> method. The method gets the user input as a string parameter and can provide a custom parsing mechanism, as shown in the following example."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2785
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a date field with a custom parsing and a\n"
      "// custom error message for invalid format\n"
      "PopupDateField date = new PopupDateField(\"My Date\") {\n"
      "    @Override\n"
      "    protected Date handleUnparsableDateString(String dateString)\n"
      "    throws Property.ConversionException {\n"
      "        // Try custom parsing\n"
      "        String fields[] = dateString.split(\"/\");\n"
      "        if (fields.length >= 3) {\n"
      "            try {\n"
      "                int year  = Integer.parseInt(fields[0]);\n"
      "                int month = Integer.parseInt(fields[1])-1;\n"
      "                int day   = Integer.parseInt(fields[2]);\n"
      "                GregorianCalendar c =\n"
      "                    new GregorianCalendar(year, month, day);\n"
      "                return c.getTime();\n"
      "            } catch (NumberFormatException e) {\n"
      "                throw new Property.\n"
      "                    ConversionException(\"Not a number\");\n"
      "            }\n"
      "        }\n"
      "        \n"
      "        // Bad date\n"
      "        throw new Property.\n"
      "            ConversionException(\"Your date needs two slashes\");\n"
      "    }\n"
      "};\n"
      "        \n"
      "// Display only year, month, and day in slash-delimited format\n"
      "date.setDateFormat(\"yyyy/MM/dd\");\n"
      "\n"
      "// Don't be too tight about the validity of dates\n"
      "// on the client-side\n"
      "date.setLenient(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2787
#, no-c-format
msgid "The handler method must either return a parsed <classname>Date</classname> object or throw a <classname>ConversionException</classname>. Returning <parameter>null</parameter> will set the field value to <parameter>null</parameter> and clear the input box."
msgstr ""

#. Tag: title
#: chapter-components.xml:2797
#, no-c-format
msgid "Customizing the Error Message"
msgstr ""

#. Tag: para
#: chapter-components.xml:2799
#, no-c-format
msgid "In addition to customized parsing, overriding the handler method for unparseable input is useful for internationalization and other customization of the error message. You can also use it for another way for reporting the errors, as is done in the example below:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2806
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a date field with a custom error message for invalid format\n"
      "PopupDateField date = new PopupDateField(\"My Date\") {\n"
      "    @Override\n"
      "    protected Date handleUnparsableDateString(String dateString)\n"
      "    throws Property.ConversionException {\n"
      "        // Have a notification for the error\n"
      "        Notification.show(\n"
      "                \"Your date needs two slashes\",\n"
      "                Notification.TYPE_WARNING_MESSAGE);\n"
      "        \n"
      "        // A failure must always also throw an exception\n"
      "        throw new Property.ConversionException(\"Bad date\");\n"
      "    }\n"
      "};]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2808
#, no-c-format
msgid "If the input is invalid, you should always throw the exception; returning a <parameter>null</parameter> value would make the input field empty, which is probably undesired."
msgstr ""

#. Tag: title
#: chapter-components.xml:2816
#, no-c-format
msgid "Input Prompt"
msgstr ""

#. Tag: para
#: chapter-components.xml:2818
#, no-c-format
msgid "Like other fields that have a text box, <classname>PopupDateField</classname> allows an input prompt that is visible until the user has input a value. You can set the prompt with <methodname>setInputPrompt</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2825
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[PopupDateField date = new PopupDateField();\n"
      "\n"
      "// Set the prompt\n"
      "date.setInputPrompt(\"Select a date\");\n"
      "        \n"
      "// Set width explicitly to accommodate the prompt\n"
      "date.setWidth(\"10em\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2827
#, no-c-format
msgid "The date field doesn't automatically scale to accommodate the prompt, so you need to set it explicitly with <methodname>setWidth()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2833
#, no-c-format
msgid "The input prompt is not available in the <classname>DateField</classname> superclass."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2842
#, no-c-format
msgid ""
      "<![CDATA[.v-datefield, v-datefield-popupcalendar {}\n"
      "  .v-textfield, v-datefield-textfield {}\n"
      "  .v-datefield-button {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2844
#, no-c-format
msgid "The top-level element of <classname>DateField</classname> and all its variants have <literal>v-datefield</literal> style. The base class and the <classname>PopupDateField</classname> also have the <literal>v-datefield-popupcalendar</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:2851
#, no-c-format
msgid "In addition, the top-level element has a style that indicates the resolution, with <literal>v-datefield-</literal> basename and an extension, which is one of <literal>full</literal>, <literal>day</literal>, <literal>month</literal>, or <literal>year</literal>. The <literal>-full</literal> style is enabled when the resolution is smaller than a day. These styles are used mainly for controlling the appearance of the popup calendar."
msgstr ""

#. Tag: para
#: chapter-components.xml:2861
#, no-c-format
msgid "The text box has <literal>v-textfield</literal> and <literal>v-datefield-textfield</literal> styles, and the calendar button <literal>v-datefield-button</literal>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2867
#, no-c-format
msgid "Once opened, the calendar popup has the following styles at the top level:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2872
#, no-c-format
msgid ""
      "<![CDATA[.v-datefield-popup {}\n"
      "  .v-popupcontent {}\n"
      "    .v-datefield-calendarpanel {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2874
#, no-c-format
msgid "The top-level element of the floating popup calendar has <literal>.v-datefield-popup</literal> style. Observe that the popup frame is outside the HTML structure of the component, hence it is not enclosed in the <literal>v-datefield</literal> element and does not include any custom styles. The content in the <literal>v-datefield-calendarpanel</literal> is the same as in <classname>InlineDateField</classname>, as described in <xref linkend=\"components.datefield.calendar\"/>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2891
#, no-c-format
msgid "InlineDateField"
msgstr ""

#. Tag: para
#: chapter-components.xml:2893
#, no-c-format
msgid "The <classname>InlineDateField</classname> provides a date picker component with a month view. The user can navigate months and years by clicking the appropriate arrows. Unlike with the popup variant, the month view is always visible in the inline field."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2900
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Create a DateField with the default style\n"
      "InlineDateField date = new InlineDateField();\n"
      "    \n"
      "// Set the date and time to present\n"
      "date.setValue(new java.util.Date());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2902
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.datefield.inlinedatefield\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2908
#, no-c-format
msgid "Example of the <classname>InlineDateField</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2919
#, no-c-format
msgid "The user can also navigate the calendar using the cursor keys."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2926
#, no-c-format
msgid ""
      "<![CDATA[.v-datefield {}\n"
      "  .v-datefield-calendarpanel {}\n"
      "    .v-datefield-calendarpanel-header {}\n"
      "      .v-datefield-calendarpanel-prevyear {}\n"
      "      .v-datefield-calendarpanel-prevmonth {}\n"
      "      .v-datefield-calendarpanel-month {}\n"
      "      .v-datefield-calendarpanel-nextmonth {}\n"
      "      .v-datefield-calendarpanel-nextyear {}\n"
      "    .v-datefield-calendarpanel-body {}\n"
      "      .v-datefield-calendarpanel-weekdays,\n"
      "      .v-datefield-calendarpanel-weeknumbers {}\n"
      "        .v-first {}\n"
      "        .v-last {}\n"
      "      .v-datefield-calendarpanel-weeknumber {}\n"
      "      .v-datefield-calendarpanel-day {}\n"
      "    .v-datefield-calendarpanel-time {}\n"
      "      .v-datefield-time {}\n"
      "        .v-select {}\n"
      "        .v-label {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2928
#, no-c-format
msgid "The top-level element has the <literal>v-datefield</literal> style. In addition, the top-level element has a style name that indicates the resolution of the calendar, with <literal>v-datefield-</literal> basename and an extension, which is one of <literal>full</literal>, <literal>day</literal>, <literal>month</literal>, or <literal>year</literal>. The <literal>-full</literal> style is enabled when the resolution is smaller than a day."
msgstr ""

#. Tag: para
#: chapter-components.xml:2938
#, no-c-format
msgid "The <literal>v-datefield-calendarpanel-weeknumbers</literal> and <literal>v-datefield-calendarpanel-weeknumber</literal> styles are enabled when the week numbers are enabled. The former controls the appearance of the weekday header and the latter the actual week numbers."
msgstr ""

#. Tag: para
#: chapter-components.xml:2946
#, no-c-format
msgid "The other style names should be self-explanatory. For weekdays, the <literal>v-first</literal> and <literal>v-last</literal> styles allow making rounded endings for the weekday bar."
msgstr ""

#. Tag: title
#: chapter-components.xml:2955
#, no-c-format
msgid "Time Resolution"
msgstr ""

#. Tag: para
#: chapter-components.xml:2957
#, no-c-format
msgid "The <classname>DateField</classname> displays dates by default. It can also display the time in hours and minutes, or just the month or year. The visibility of the input components is controlled by <emphasis>time resolution</emphasis>, which can be set with <methodname>setResolution()</methodname> method. The method takes as its parameters the lowest visible component, typically <parameter>DateField.Resolution.DAY</parameter> for just dates and <parameter>DateField.Resolution.MIN</parameter> for dates with time in hours and minutes. Please see the API Reference for the complete list of resolution parameters."
msgstr ""

#. Tag: title
#: chapter-components.xml:2972
#, no-c-format
msgid "DateField Locale"
msgstr ""

#. Tag: para
#: chapter-components.xml:2974
#, no-c-format
msgid "The date and time are displayed according to the locale of the user, as reported by the browser. You can set a custom locale with the <methodname>setLocale()</methodname> method of <classname>AbstractComponent</classname>, as described in <xref linkend=\"components.features.locale\"/>. Only Gregorian calendar is supported."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2986
#, no-c-format
msgid "Button"
msgstr ""

#. Tag: para
#: chapter-components.xml:2988
#, no-c-format
msgid "The <classname>Button</classname> component is normally used for initiating some action, such as finalizing input in forms. When the user clicks a button, a <classname>Button.ClickEvent</classname> is fired, which can be handled with a <interfacename>Button.ClickListener</interfacename> in the <methodname>buttonClick()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-components.xml:2996
#, no-c-format
msgid "You can handle button clicks with an anonymous class as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3001
#, no-c-format
msgid ""
      "<![CDATA[Button button = new Button(\"Click Me!\");\n"
      "button.addClickListener(new Button.ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        Notification.show(\"Thank You!\");\n"
      "    }\n"
      "});\n"
      "\n"
      "layout.addComponent(button);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3003
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.component.button.basic\"/>. The listener can also be given in the constructor, which is often perhaps simpler."
msgstr ""

#. Tag: title
#: chapter-components.xml:3009
#, no-c-format
msgid "An Example of a Button"
msgstr ""

#. Tag: para
#: chapter-components.xml:3017
#, no-c-format
msgid "If you handle several buttons in the same listener, you can differentiate between them either by comparing the <classname>Button</classname> object reference returned by the <methodname>getButton()</methodname> method of <classname>Button.ClickEvent</classname> to a kept reference or by using a separate listener method for each button. For a detailed description of these patterns together with some examples, please see <xref linkend=\"architecture.events\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3029
#, no-c-format
msgid ""
      "<![CDATA[.v-button { }\n"
      "  .v-button-wrap { }\n"
      "    .v-button-caption { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3031
#, no-c-format
msgid "A button has an overall <literal>v-button</literal> style. The caption has <literal>v-button-caption</literal> style. There is also an intermediate wrap element, which may help in styling in some cases."
msgstr ""

#. Tag: para
#: chapter-components.xml:3037
#, no-c-format
msgid "Some built-in themes contain a small style, which you can enable by adding <parameter>Reindeer.BUTTON_SMALL</parameter>, etc. The <classname>BaseTheme</classname> also has a <parameter>BUTTON_LINK</parameter> style, which makes the button look like a hyperlink."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3048
#, no-c-format
msgid "CheckBox"
msgstr ""

#. Tag: para
#: chapter-components.xml:3050
#, no-c-format
msgid "<classname>CheckBox</classname> is a two-state selection component that can be either checked or unchecked. The caption of the check box will be placed right of the actual check box. Vaadin provides two ways to create check boxes: individual check boxes with the <classname>CheckBox</classname> component described in this section and check box groups with the <classname>OptionGroup</classname> component in multiple selection mode, as described in <xref linkend=\"components.selecting.optiongroup\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:3060
#, no-c-format
msgid "Clicking on a check box will change its state. The state is a <classname>Boolean</classname> property that you can set with the <methodname>setValue()</methodname> method and obtain with the <methodname>getValue()</methodname> method of the <classname>Property</classname> interface. Changing the value of a check box will cause a <classname>ValueChangeEvent</classname>, which can be handled by a <classname>ValueChangeListener</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3070
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// A check box with default state (not checked, false).\n"
      "final CheckBox checkbox1 = new CheckBox(\"My CheckBox\");\n"
      "main.addComponent(checkbox1);\n"
      "\n"
      "// Another check box with explicitly set checked state.\n"
      "final CheckBox checkbox2 = new CheckBox(\"Checked CheckBox\");\n"
      "checkbox2.setValue(true);\n"
      "main.addComponent(checkbox2);\n"
      "\n"
      "// Make some application logic. We use anonymous listener\n"
      "// classes here. The above references were defined as final\n"
      "// to allow accessing them from inside anonymous classes.\n"
      "checkbox1.addValueChangeListener(new ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        // Copy the value to the other checkbox.\n"
      "        checkbox2.setValue(checkbox1.getValue());\n"
      "    }\n"
      "});\n"
      "checkbox2.addValueChangeListener(new ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        // Copy the value to the other checkbox.\n"
      "        checkbox1.setValue(checkbox2.getValue());\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3073
#, no-c-format
msgid "An Example of a Check Box"
msgstr ""

#. Tag: para
#: chapter-components.xml:3081
#, no-c-format
msgid "For an example on the use of check boxes in a table, see <xref linkend=\"components.table\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3089
#, no-c-format
msgid ""
      "<![CDATA[.v-checkbox { }\n"
      "  .v-checkbox > input { }\n"
      "  .v-checkbox > label { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3091
#, no-c-format
msgid "The top-level element of a <classname>CheckBox</classname> has the <literal>v-checkbox</literal> style. It contains two sub-elements: the actual check box <literal>input</literal> element and the <literal>label</literal> element. If you want to have the label on the left, you can change the positions with \"<literal>direction: rtl</literal>\" for the top element."
msgstr ""

#. Tag: title
#: chapter-components.xml:3103
#, no-c-format
msgid "Selecting Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:3105
#, no-c-format
msgid "Vaadin gives many alternatives for selecting one or more items from a list, using drop-down and regular lists, radio button and check box groups, tables, trees, and so on."
msgstr ""

#. Tag: para
#: chapter-components.xml:3111
#, no-c-format
msgid "The core library includes the following selection components, all based on the <classname>AbstractSelect</classname> class:"
msgstr ""

#. Tag: classname
#: chapter-components.xml:3118
#, no-c-format
msgid "Select"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3119
#, no-c-format
msgid "In single selection mode, a drop-down list with a text input area, which the user can use to filter the displayed items. In multiselect mode, a list box equivalent to <classname>ListSelect</classname>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3126
#, no-c-format
msgid "ComboBox"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3127
#, no-c-format
msgid "A drop-down list for single selection. Otherwise as <classname>Select</classname>, but the user can also enter new items. The component also provides an input prompt."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3134 chapter-components.xml:3542
#, no-c-format
msgid "ListSelect"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3135
#, no-c-format
msgid "A vertical list box for selecting items in either single or multiple selection mode."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3141
#, no-c-format
msgid "NativeSelect"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3142
#, no-c-format
msgid "Provides selection using the native selection component of the browser, typically a drop-down list for single selection and a multi-line list in multiselect mode. This uses the <literal>&lt;select&gt;</literal> element in HTML."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3150 chapter-components.xml:3903
#, no-c-format
msgid "OptionGroup"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3151
#, no-c-format
msgid "Shows the items as a vertically arranged group of radio buttons in the single selection mode and of check boxes in multiple selection mode."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3157
#, no-c-format
msgid "TwinColSelect"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3158
#, no-c-format
msgid "Shows two list boxes side by side where the user can select items from a list of available items and move them to a list of selected items using control buttons."
msgstr ""

#. Tag: para
#: chapter-components.xml:3166
#, no-c-format
msgid "In addition, the <classname>Tree</classname> and <classname>Table</classname> components allow special forms of selection. They also inherit the <classname>AbstractSelect</classname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3173
#, no-c-format
msgid "Binding Selection Components to Data"
msgstr ""

#. Tag: para
#: chapter-components.xml:3175
#, no-c-format
msgid "The selection components are strongly coupled with the Vaadin Data Model. The selectable items in all selection components are objects that implement the <classname>Item</classname> interface and are contained in a <classname>Container</classname>. The current selection is bound to the <classname>Property</classname> interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:3183
#, no-c-format
msgid "Even though the data model is used, the selection components allow simple use in the most common cases. Each selection component is bound to a default container type, which supports management of items without need to implement a container."
msgstr ""

#. Tag: para
#: chapter-components.xml:3190
#, no-c-format
msgid "See <xref linkend=\"datamodel\"/> for a detailed description of the data model, its interfaces, and built-in implementations."
msgstr ""

#. Tag: title
#: chapter-components.xml:3196
#, no-c-format
msgid "Adding New Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:3198
#, no-c-format
msgid "New items are added with the <methodname>addItem()</methodname> method defined in the <classname>Container</classname> interface."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3203
#, no-c-format
msgid ""
      "<![CDATA[// Create a selection component\n"
      "Select select = new Select (\"Select something here\");\n"
      "\n"
      "// Add some items and give each an item ID\n"
      "select.addItem(\"Mercury\");\n"
      "select.addItem(\"Venus\");\n"
      "select.addItem(\"Earth\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3205
#, no-c-format
msgid "The <methodname>addItem()</methodname> method creates an empty <classname>Item</classname>, which is identified by its <emphasis>item identifier</emphasis> (IID) object, given as the parameter. This item ID is by default used also as the caption of the item, as explained in the next section. The identifier is typically a <classname>String</classname>. The item is of a type specific to the container and has itself little relevance for most selection components, as the properties of an item may not be used in any way (except in <classname>Table</classname>), only the item ID."
msgstr ""

#. Tag: para
#: chapter-components.xml:3217
#, no-c-format
msgid "The item identifier can be of any object type. We could as well have given integers for the item identifiers and set the captions explicitly with <methodname>setItemCaption()</methodname>. You could also add an item with the parameterless <methodname>addItem()</methodname>, which returns an automatically generated item ID."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3226
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a selection component\n"
      "Select select = new Select(\"My Select\");\n"
      "        \n"
      "// Add an item with a generated ID\n"
      "Object itemId = select.addItem();\n"
      "select.setItemCaption(itemId, \"The Sun\");\n"
      "        \n"
      "// Select the item\n"
      "select.setValue(itemId);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3228
#, no-c-format
msgid "Some container types may support passing the actual data object to the add method. For example, you can add items to a <classname>BeanItemContainer</classname> with <methodname>addBean()</methodname>. Such implementations can use a separate item ID object, or the data object itself as the item ID, as is done in <methodname>addBean()</methodname>. In the latter case you can not depend on the default way of acquiring the item caption; see the description of the different caption modes later."
msgstr ""

#. Tag: para
#: chapter-components.xml:3239
#, no-c-format
msgid "The following section describes the different options for determining the item captions."
msgstr ""

#. Tag: title
#: chapter-components.xml:3246
#, no-c-format
msgid "Item Captions"
msgstr ""

#. Tag: para
#: chapter-components.xml:3248
#, no-c-format
msgid "The displayed captions of items in a selection component can be set explicitly with <methodname>setItemCaption()</methodname> or determined from the item IDs or item properties. This behaviour is defined with the <emphasis>caption mode</emphasis>, which you can set with <methodname>setItemCaptionMode()</methodname>. The default mode is <parameter>ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID</parameter>, which uses the item identifiers for the captions, unless given explicitly."
msgstr ""

#. Tag: para
#: chapter-components.xml:3259
#, no-c-format
msgid "In addition to a caption, an item can have an icon. The icon is set with <methodname>setItemIcon()</methodname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3265
#, no-c-format
msgid "Caption Modes for Selection Components"
msgstr ""

#. Tag: constant
#: chapter-components.xml:3267
#, no-c-format
msgid "ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID"
msgstr ""

#. Tag: para
#: chapter-components.xml:3269
#, no-c-format
msgid "This is the default caption mode and its flexibility allows using it in most cases. By default, the item identifier will be used as the caption. The identifier object does not necessarily have to be a string; the caption is retrieved with <methodname>toString()</methodname> method. If the caption is specified explicitly with <methodname>setItemCaption()</methodname>, it overrides the item identifier."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3281
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Select select = new Select(\"Moons of Mars\");\n"
      "        \n"
      "// Use the item ID also as the caption of this item\n"
      "select.addItem(new Integer(1));\n"
      "        \n"
      "// Set item caption for this item explicitly\n"
      "select.addItem(2); // same as \"new Integer(2)\"\n"
      "select.setItemCaption(2, \"Deimos\");]]>"
msgstr ""

#. Tag: constant
#: chapter-components.xml:3286
#, no-c-format
msgid "ITEM_CAPTION_MODE_EXPLICIT"
msgstr ""

#. Tag: para
#: chapter-components.xml:3288
#, no-c-format
msgid "Captions must be explicitly specified with <methodname>setItemCaption()</methodname>. If they are not, the caption will be empty. Such items with empty captions will nevertheless be displayed in the <classname>Select</classname> component as empty items. If they have an icon, they will be visible."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3299
#, no-c-format
msgid "ITEM_CAPTION_MODE_ICON_ONLY"
msgstr ""

#. Tag: para
#: chapter-components.xml:3301
#, no-c-format
msgid "Only icons are shown, captions are hidden."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3307
#, no-c-format
msgid "ITEM_CAPTION_MODE_ID"
msgstr ""

#. Tag: para
#: chapter-components.xml:3309
#, no-c-format
msgid "String representation of the item identifier object is used as caption. This is useful when the identifier is a string, and also when the identifier is an complex object that has a string representation. For example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3316
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[Select select = new Select(\"Inner Planets\");\n"
      "select.setItemCaptionMode(Select.ITEM_CAPTION_MODE_ID);\n"
      "        \n"
      "// A class that implements toString()\n"
      "class PlanetId extends Object implements Serializable {\n"
      "    String planetName;\n"
      "    PlanetId (String name) {\n"
      "        planetName = name;\n"
      "    }\n"
      "    public String toString () {\n"
      "        return \"The Planet \" + planetName;\n"
      "    }\n"
      "}\n"
      "\n"
      "// Use such objects as item identifiers\n"
      "String planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"};\n"
      "for (int i=0; i<planets.length; i++)\n"
      "    select.addItem(new PlanetId(planets[i]));]]>"
msgstr ""

#. Tag: constant
#: chapter-components.xml:3320
#, no-c-format
msgid "ITEM_CAPTION_MODE_INDEX"
msgstr ""

#. Tag: para
#: chapter-components.xml:3322
#, no-c-format
msgid "Index number of item is used as caption. This caption mode is applicable only to data sources that implement the <classname>Container.Indexed</classname> interface. If the interface is not available, the component will throw a <classname>ClassCastException</classname>. The <classname>Select</classname> component itself does not implement this interface, so the mode is not usable without a separate data source. An <classname>IndexedContainer</classname>, for example, would work."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3336
#, no-c-format
msgid "ITEM_CAPTION_MODE_ITEM"
msgstr ""

#. Tag: para
#: chapter-components.xml:3338
#, no-c-format
msgid "<classname>String</classname> representation of item, acquired with <methodname>toString()</methodname>, is used as the caption. This is applicable mainly when using a custom <classname>Item</classname> class, which also requires using a custom <classname>Container</classname> that is used as a data source for the <classname>Select</classname> component."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3349
#, no-c-format
msgid "ITEM_CAPTION_MODE_PROPERTY"
msgstr ""

#. Tag: para
#: chapter-components.xml:3351
#, no-c-format
msgid "Item captions are read from the <classname>String</classname> representation of the property with the identifier specified with <methodname>setItemCaptionPropertyId()</methodname>. This is useful, for example, when you have a container that you use as the data source for a <classname>Select</classname>, and you want to use a specific property for caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:3360
#, no-c-format
msgid "In the example below, we bind a selection component to a bean container and use a property of the bean as the caption."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3365
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* A bean with a \"name\" property. */\n"
      "public class Planet implements Serializable {\n"
      "    String name;\n"
      "\n"
      "    public Planet(String name) {\n"
      "        this.name = name;\n"
      "    }\n"
      "\n"
      "    public void setName(String name) {\n"
      "        this.name = name;\n"
      "    }\n"
      "\n"
      "    public String getName() {\n"
      "        return name;\n"
      "    }\n"
      "}\n"
      "\n"
      "void propertyModeExample() {\n"
      "    VerticalLayout layout = new VerticalLayout();\n"
      "\n"
      "    // Have a bean container to put the beans in\n"
      "    BeanItemContainer<Planet> container =\n"
      "        new BeanItemContainer<Planet>(Planet.class);\n"
      "\n"
      "    // Put some example data in it\n"
      "    container.addItem(new Planet(\"Mercury\"));\n"
      "    container.addItem(new Planet(\"Venus\"));\n"
      "    container.addItem(new Planet(\"Earth\"));\n"
      "    container.addItem(new Planet(\"Mars\"));\n"
      "\n"
      "    // Create a selection component bound to the container\n"
      "    Select select = new Select(\"Planets\", container);\n"
      "\n"
      "    // Set the caption mode to read the caption directly\n"
      "    // from the 'name' property of the bean\n"
      "    select.setItemCaptionMode(\n"
      "            Select.ITEM_CAPTION_MODE_PROPERTY);\n"
      "    select.setItemCaptionPropertyId(\"name\");\n"
      "\n"
      "    layout.addComponent(select);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3374
#, no-c-format
msgid "Getting and Setting Selection"
msgstr ""

#. Tag: para
#: chapter-components.xml:3376
#, no-c-format
msgid "A selection component provides the current selection as the property of the component (with the <classname>Property</classname> interface). The property value is an item identifier object that identifies the selected item. You can get the identifier with <methodname>getValue()</methodname> of the <classname>Property</classname> interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:3384
#, no-c-format
msgid "You can select an item with the corresponding <methodname>setValue()</methodname> method. In multiselect mode, the property will be an unmodifiable set of item identifiers. If no item is selected, the property will be <parameter>null</parameter> in single selection mode or an empty collection in multiselect mode."
msgstr ""

#. Tag: para
#: chapter-components.xml:3392
#, no-c-format
msgid "The <classname>Select</classname> and <classname>NativeSelect</classname> components will show \"-\" selection when no actual item is selected. This is the <emphasis>null selection item identifier</emphasis>. You can set an alternative ID with <methodname>setNullSelectionItemId()</methodname>. Setting the alternative null ID is merely a visual text; the <methodname>getValue()</methodname> will still return <parameter>null</parameter> value if no item is selected, or an empty set in multiselect mode."
msgstr ""

#. Tag: para
#: chapter-components.xml:3403
#, no-c-format
msgid "The item identifier of the currently selected item will be set as the property of the <classname>Select</classname> object. You can access it with the <methodname>getValue()</methodname> method of the <classname>Property</classname> interface of the component. Also, when handling changes in a <classname>Select</classname> component with the <classname>Property.ValueChangeListener</classname> interface, the <classname>Property.ValueChangeEvent</classname> will have the selected item as the property of the event, accessible with the <methodname>getProperty()</methodname> method."
msgstr ""

#. Tag: title
#: chapter-components.xml:3416
#, no-c-format
msgid "Selected Item"
msgstr ""

#. Tag: title
#: chapter-components.xml:3436
#, no-c-format
msgid "Basic <classname>Select</classname> Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:3438
#, no-c-format
msgid "The <classname>Select</classname> component allows, in single selection mode, selecting an item from a drop-down list. The component also has a text field area, which allows entering search text by which the items shown in the drop-down list are filtered."
msgstr ""

#. Tag: para
#: chapter-components.xml:3445
#, no-c-format
msgid "In multiple selection mode, the component shows the items in a vertical list box, identical to <classname>ListSelect</classname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3451
#, no-c-format
msgid "The Select Component"
msgstr ""

#. Tag: title
#: chapter-components.xml:3460 chapter-components.xml:3498
#, no-c-format
msgid "Filtered Selection"
msgstr ""

#. Tag: para
#: chapter-components.xml:3462
#, no-c-format
msgid "The <classname>Select</classname> component allows filtering the items available for selection. The component shows as an input box for entering text. The text entered in the input box is used for filtering the available items shown in a drop-down list. Pressing <keycap>Enter</keycap> will complete the item in the input box. Pressing <keycap>Up</keycap>- and <keycap>Down</keycap>-arrows can be used for selecting an item from the drop-down list. The drop-down list is paged and clicking on the scroll buttons will change to the next or previous page. The list selection can also be done with the arrow keys on the keyboard. The shown items are loaded from the server as needed, so the number of items held in the component can be quite large."
msgstr ""

#. Tag: para
#: chapter-components.xml:3477
#, no-c-format
msgid "Vaadin provides two filtering modes: <parameter>FILTERINGMODE_CONTAINS</parameter> matches any item that contains the string given in the text field part of the component and <parameter>FILTERINGMODE_STARTSWITH</parameter> matches only items that begin with the given string. The filtering mode is set with <methodname>setFilteringMode()</methodname>. Setting the filtering mode to the default value <parameter>FILTERINGMODE_OFF</parameter> disables filtering."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3488
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Select select = new Select(\"Enter containing substring\");\n"
      "\n"
      "select.setFilteringMode(AbstractSelect.Filtering.FILTERINGMODE_CONTAINS);\n"
      "\n"
      "/* Fill the component with some items. */\n"
      "final String[] planets = new String[] {\n"
      "        \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n"
      "        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n"
      "\n"
      "for (int i = 0; i < planets.length; i++)\n"
      "    for (int j = 0; j < planets.length; j++) {\n"
      "        select.addItem(planets[j] + \" to \" + planets[i]);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3490
#, no-c-format
msgid "The above example uses the containment filter that matches to all items containing the input string. As shown in <xref linkend=\"figure.select.filter\"/> below, when we type some text in the input area, the drop-down list will show all the matching items."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3510
#, no-c-format
msgid ""
      "<![CDATA[.v-filterselect { }\n"
      ".v-filterselect-input { }\n"
      ".v-filterselect-button { }\n"
      ".v-filterselect-suggestpopup { }\n"
      ".v-filterselect-prefpage-off { }\n"
      ".v-filterselect-suggestmenu { }\n"
      ".v-filterselect-status { }\n"
      ".v-select { }\n"
      ".v-select-select { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3512
#, no-c-format
msgid "In its default state, only the input field of the <classname>Select</classname> component is visible. The entire component is enclosed in <literal>v-filterselect</literal> style, the input field has <literal>v-filterselect-input</literal> style and the button in the right end that opens and closes the drop-down result list has <literal>v-filterselect-button</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:3521
#, no-c-format
msgid "The drop-down result list has an overall <literal>v-filterselect-suggestpopup</literal> style. It contains the list of suggestions with <literal>v-filterselect-suggestmenu</literal> style and a status bar in the bottom with <literal>v-filterselect-status</literal> style. The list of suggestions is padded with an area with <literal>v-filterselect-prefpage-off</literal> style above and below the list."
msgstr ""

#. Tag: para
#: chapter-components.xml:3532
#, no-c-format
msgid "In multiselect-mode, the styles of the component aere identical to <classname>ListSelect</classname> component, with <literal>v-select</literal> overall style and <literal>v-select-select</literal> for the native selection element."
msgstr ""

#. Tag: para
#: chapter-components.xml:3544
#, no-c-format
msgid "The <classname>ListSelect</classname> component is list box that shows the selectable items in a vertical list. If the number of items exceeds the height of the component, a scrollbar is shown. The component allows both single and multiple selection modes, which you can set with <methodname>setMultiSelect()</methodname>. It is visually identical in both modes."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3553
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create the selection component\n"
      "ListSelect select = new ListSelect(\"My Selection\");\n"
      "        \n"
      "// Add some items\n"
      "select.addItem(\"Mercury\");\n"
      "select.addItem(\"Venus\");\n"
      "select.addItem(\"Earth\");\n"
      "...\n"
      "\n"
      "select.setNullSelectionAllowed(false);\n"
      "\n"
      "// Show 5 items and a scrollbar if there are more\n"
      "select.setRows(5);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3555
#, no-c-format
msgid "The number of visible items is set with <methodname>setRows()</methodname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3561
#, no-c-format
msgid "The <classname>ListSelect</classname> Component"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3573 chapter-components.xml:3618
#, no-c-format
msgid ""
      "<![CDATA[.v-select {}\n"
      ".v-select-select {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3575 chapter-components.xml:3620
#, no-c-format
msgid "The component has a <literal>v-select</literal> overall style. The native <literal>select</literal> element has <literal>v-select-select</literal> style."
msgstr ""

#. Tag: title
#: chapter-components.xml:3584
#, no-c-format
msgid "Native Selection Component <classname>NativeSelect</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3586
#, no-c-format
msgid "<classname>NativeSelect</classname> offers the native selection component of web browsers, using the HTML <literal>&lt;select&gt;</literal> element. The component is shown as a drop-down list."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3592
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create the selection component\n"
      "final NativeSelect select = new NativeSelect(\"Native Selection\");\n"
      "        \n"
      "// Add some items\n"
      "select.addItem(\"Mercury\");\n"
      "select.addItem(\"Venus\");\n"
      "...\n"
      "        \n"
      "// Set the width in \"columns\" as in TextField\n"
      "select.setColumns(10);\n"
      "        \n"
      "select.setNullSelectionAllowed(false);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3594
#, no-c-format
msgid "The <methodname>setColumns()</methodname> allows setting the width of the list as \"columns\", which is a measure that depends on the browser."
msgstr ""

#. Tag: title
#: chapter-components.xml:3600
#, no-c-format
msgid "The <classname>NativeSelect</classname> Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:3608
#, no-c-format
msgid "Multiple selection mode is not allowed; you should use the <classname>ListSelect</classname> component instead. Also adding new items, which would be enabled with <methodname>setNewItemsAllowed()</methodname>, is not allowed."
msgstr ""

#. Tag: title
#: chapter-components.xml:3629
#, no-c-format
msgid "Radio Button and Check Box Groups with <classname>OptionGroup</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3630
#, no-c-format
msgid "The <classname>OptionGroup</classname> class provides selection from alternatives using a group of radio buttons in single selection mode. In multiple selection mode, the items show up as check boxes."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3636
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[OptionGroup optiongroup = new OptionGroup(\"My Option Group\");\n"
      "\n"
      "// Use the multiple selection mode.\n"
      "myselect.setMultiSelect(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3638
#, no-c-format
msgid "shows the <classname>OptionGroup</classname> in both single and multiple selection mode."
msgstr ""

#. Tag: title
#: chapter-components.xml:3644
#, no-c-format
msgid "Option Button Group in Single and Multiple Selection Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:3652
#, no-c-format
msgid "You can create check boxes individually using the <classname>CheckBox</classname> class, as described in <xref linkend=\"components.checkbox\"/>. The advantages of the <classname>OptionGroup</classname> component are that as it maintains the individual check box objects, you can get an array of the currently selected items easily, and that you can easily change the appearance of a single component."
msgstr ""

#. Tag: title
#: chapter-components.xml:3663
#, no-c-format
msgid "Disabling Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:3665
#, no-c-format
msgid "You can disable individual items in an <classname>OptionGroup</classname> with <methodname>setItemEnabled()</methodname>. The user can not select or deselect disabled items in multi-select mode, but in single-select mode the use can change the selection from a disabled to an enabled item. The selections can be changed programmatically regardless of whether an item is enabled or disabled. You can find out whether an item is enabled with <methodname>isItemEnabled()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:3676
#, no-c-format
msgid "The <methodname>setItemEnabled()</methodname> identifies the item to be disabled by its item ID."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3681
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have an option group\n"
      "OptionGroup group = new OptionGroup(\"My Disabled Group\");\n"
      "group.addItem(\"One\");\n"
      "group.addItem(\"Two\");\n"
      "group.addItem(\"Three\");\n"
      "\n"
      "// Disable one item\n"
      "group.setItemEnabled(\"Two\", false);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3683
#, no-c-format
msgid "The item IDs are also used for the captions in this example. The result is shown in <xref linkend=\"figure.components.selecting.optiongroup.disabling\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3690
#, no-c-format
msgid "<classname>OptionGroup</classname> with a Disabled Item"
msgstr ""

#. Tag: para
#: chapter-components.xml:3698
#, no-c-format
msgid "Setting an item as disabled turns on the <literal>v-disabled</literal> style for it."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3707
#, no-c-format
msgid ""
      "<![CDATA[.v-select-optiongroup {}\n"
      ".v-select-option.v-checkbox {}\n"
      ".v-select-option.v-radiobutton {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3709
#, no-c-format
msgid "The <literal>v-select-optiongroup</literal> is the overall style for the component. Each check box will have the <literal>v-checkbox</literal> style, borrowed from the <classname>CheckBox</classname> component, and each radio button the <literal>v-radiobutton</literal> style. Both the radio buttons and check boxes will also have the <literal>v-select-option</literal> style that allows styling regardless of the option type. Disabled items have additionally the <literal>v-disabled</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:3720
#, no-c-format
msgid "The options are normally laid out vertically. You can use horizontal layout by setting <literal>display: inline-block</literal> for the options. The <literal>nowrap</literal> setting for the overall element prevents wrapping if there is not enough horizontal space in the layout, or if the horizontal width is undefined."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3728
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* Lay the options horizontally */\n"
      ".v-select-optiongroup-horizontal .v-select-option {\n"
      "    display: inline-block;\n"
      "}\n"
      "\n"
      "/* Avoid wrapping if the layout is too tight */\n"
      ".v-select-optiongroup-horizontal {\n"
      "    white-space: nowrap;\n"
      "}\n"
      "\n"
      "/* Some extra spacing is needed */\n"
      ".v-select-optiongroup-horizontal\n"
      "  .v-select-option.v-radiobutton {\n"
      "    padding-right: 10px;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3730
#, no-c-format
msgid "Use of the above rules requires setting a custom <literal>horizontal</literal> style name for the component. The result is shown in <xref linkend=\"figure.components.selecting.optiongroup.horizontal\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3738
#, no-c-format
msgid "Horizontal <classname>OptionGroup</classname>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3750
#, no-c-format
msgid "Twin Column Selection with <classname>TwinColSelect</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3751
#, no-c-format
msgid "The <classname>TwinColSelect</classname> field provides a multiple selection component that shows two lists side by side, with the left column containing unselected items and the right column the selected items. The user can select items from the list on the left and click on the \"&gt;&gt;\" button to move them to the list on the right. Items can be deselected by selecting them in the right list and clicking on the \"&lt;&lt;\" button."
msgstr ""

#. Tag: para
#: chapter-components.xml:3761
#, no-c-format
msgid "<classname>TwinColSelect</classname> is always in multi-select mode, so its property value is always a collection of the item IDs of the selected items, that is, the items in the right column."
msgstr ""

#. Tag: para
#: chapter-components.xml:3767
#, no-c-format
msgid "The selection columns can have their own captions, separate from the overall component caption, which is managed by the containing layout. You can set the column captions with <methodname>setLeftColumnCaption()</methodname> and <methodname>setRightColumnCaption()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3777
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[final TwinColSelect select =\n"
      "    new TwinColSelect(\"Select Targets to Destroy\");\n"
      "\n"
      "// Set the column captions (optional)\n"
      "select.setLeftColumnCaption(\"These are left\");\n"
      "select.setRightColumnCaption(\"These are done for\");\n"
      "        \n"
      "// Put some data in the select\n"
      "String planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n"
      "        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n"
      "for (int pl=0; pl<planets.length; pl++)\n"
      "    select.addItem(planets[pl]);\n"
      "\n"
      "// Set the number of visible items\n"
      "select.setRows(planets.length);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3779
#, no-c-format
msgid "The resulting component is shown in <xref linkend=\"figure.components.selecting.twincolselect.captions\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3785
#, no-c-format
msgid "Twin Column Selection"
msgstr ""

#. Tag: para
#: chapter-components.xml:3793
#, no-c-format
msgid "The <methodname>setRows()</methodname> method sets the height of the component by the number of visible items in the selection boxes. Setting the height with <methodname>setHeight()</methodname> to a defined value overrides the rows setting."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3803
#, no-c-format
msgid ""
      "<![CDATA[.v-select-twincol {}\n"
      "  .v-select-twincol-options-caption {}\n"
      "  .v-select-twincol-selections-caption {}\n"
      "  .v-select-twincol-options {}\n"
      "  .v-select-twincol-buttons {}\n"
      "    .v-button {}\n"
      "      .v-button-wrap {}\n"
      "        .v-button-caption {}\n"
      "    .v-select-twincol-deco {}\n"
      "  .v-select-twincol-selections {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3805
#, no-c-format
msgid "The <classname>TwinColSelect</classname> component has an overall <literal>v-select-twincol</literal> style. If set, the left and right column captions have <literal>v-select-twincol-options-caption</literal> and <literal>v-select-twincol-options-caption</literal> style names, respectively. The left box, which displays the unselected items, has <literal>v-select-twincol-options-caption</literal> style and the right box, which displays the selected items, has <literal>v-select-twincol-options-selections</literal> style. Between them is the button area, which has overall <literal>v-select-twincol-buttons</literal> style; the actual buttons reuse the styles for the <classname>Button</classname> component. Between the buttons is a divider element with <literal>v-select-twincol-deco</literal> style."
msgstr ""

#. Tag: title
#: chapter-components.xml:3827
#, no-c-format
msgid "Allowing Adding New Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:3829
#, no-c-format
msgid "The selection components allow the user to add new items, with a user interface similar to combo boxes in desktop user interfaces. You need to enable the <parameter>newItemsAllowed</parameter> mode with the <methodname>setNewItemsAllowed()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3836
#, no-c-format
msgid "<![CDATA[myselect.setNewItemsAllowed(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3838
#, no-c-format
msgid "The user interface for adding new items depends on the selection component and the selection mode. The regular <classname>Select</classname> component in single selection mode, which appears as a combo box, allows you to simply type the new item in the combo box and hit <keycap>Enter</keycap> to add it. In most other selection components, as well as in the multiple selection mode of the regular <classname>Select</classname> component, a text field that allows entering new items is shown below the selection list, and clicking the <guibutton>+</guibutton> button will add the item in the list, as illustrated in <xref linkend=\"figure.components.selecting.newitems\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3852
#, no-c-format
msgid "Select Component with Adding New Items Allowed"
msgstr ""

#. Tag: para
#: chapter-components.xml:3860
#, no-c-format
msgid "The identifier of an item added by the user will be a <classname>String</classname> object identical to the caption of the item. You should consider this if the item identifier of automatically filled items is some other type or otherwise not identical to the caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:3867
#, no-c-format
msgid "Adding new items is possible in both single and multiple selection modes and in all styles. Adding new items may not be possible if the <classname>Select</classname> is bound to an external <classname>Container</classname> that does not allow adding new items."
msgstr ""

#. Tag: title
#: chapter-components.xml:3877 chapter-components.xml:4107
#, no-c-format
msgid "Multiple Selection Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:3881
#, no-c-format
msgid "Setting the <classname>Select</classname>, <classname>NativeSelect</classname>, or <classname>OptionGroup</classname> components to multiple selection mode with the <methodname>setMultiSelect()</methodname> method changes their appearance to allow selecting multiple items."
msgstr ""

#. Tag: term
#: chapter-components.xml:3891
#, no-c-format
msgid "<classname>Select</classname> and <classname>NativeSelect</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3893
#, no-c-format
msgid "These components appear as a native HTML selection list, as shown in <xref linkend=\"figure.components.selecting.newitems\"/>. By holding the <keycap>Ctrl</keycap> or <keycap>Shift</keycap> key pressed, the user can select multiple items."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3904
#, no-c-format
msgid "The option group, which is a radio button group in single selection mode, will show as a check box group in multiple selection mode. See <xref linkend=\"components.selecting.optiongroup\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:3913
#, no-c-format
msgid "The <classname>TwinColSelect</classname>, described in <xref linkend=\"components.selecting.twincolselect\"/>, is a special multiple selection mode that is not meaningful for single selection."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3919
#, no-c-format
msgid "<![CDATA[myselect.setMultiSelect(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3921
#, no-c-format
msgid "As in single selection mode, the selected items are set as the property of the <classname>Select</classname> object. In multiple selection mode, the property is a <classname>Collection</classname> of currently selected items. You can get and set the property with the <methodname>getValue()</methodname> and <methodname>setValue()</methodname> methods as usual."
msgstr ""

#. Tag: para
#: chapter-components.xml:3930
#, no-c-format
msgid "A change in the selection will trigger a <classname>ValueChangeEvent</classname>, which you can handle with a <classname>Propery.ValueChangeListener</classname>. As usual, you should use <methodname>setImmediate(true)</methodname> to trigger the event immediately when the user changes the selection. The following example shows how to handle selection changes with a listener."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3939
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class SelectExample\n"
      "           extends CustomComponent\n"
      "           implements Property.ValueChangeListener {\n"
      "    // Create a Select object with a caption.\n"
      "    Select select = new Select(\"This is a Select component\");\n"
      "\n"
      "    VerticalLayout layout = new VerticalLayout();\n"
      "    Label status = new Label(\"-\");\n"
      "    \n"
      "    SelectExample () {\n"
      "        setCompositionRoot (layout);\n"
      "        layout.addComponent(select);\n"
      "\n"
      "        // Fill the component with some items.\n"
      "        final String[] planets = new String[] {\n"
      "            \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n"
      "            \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n"
      "        for (int i=0; i<planets.length; i++)\n"
      "            select.addItem(planets[i]);\n"
      "\n"
      "        // By default, the change event is not triggered\n"
      "        // immediately when the selection changes.\n"
      "        // This enables the immediate events.\n"
      "        select.setImmediate(true);\n"
      "        \n"
      "        // Listen for changes in the selection.\n"
      "        select.addValueChangeListener(this);\n"
      "\n"
      "        layout.addComponent(status);\n"
      "    }\n"
      "\n"
      "    /* Respond to change in the selection. */\n"
      "    public void valueChange(Property.ValueChangeEvent event) {\n"
      "        // The event.getProperty() returns the Item ID (IID) \n"
      "        // of the currently selected item in the component.\n"
      "        status.setValue(\"Currently selected item ID: \" +\n"
      "                        event.getProperty());\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3944
#, no-c-format
msgid "Other Common Features"
msgstr ""

#. Tag: title
#: chapter-components.xml:3947
#, no-c-format
msgid "Item Icons"
msgstr ""

#. Tag: para
#: chapter-components.xml:3949
#, no-c-format
msgid "You can set an icon for each item with <methodname>setItemIcon()</methodname>, or define an item property that provides the icon resource with <methodname>setItemIconPropertyId()</methodname>, in a fashion similar to captions. Notice, however, that icons are not supported in <classname>NativeSelect</classname>, <classname>TwinColSelect</classname>, and some other selection components and modes. This is because HTML does not support images inside the native <literal>select</literal> elements. Icons are also not really visually applicable."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3971 chapter-components.xml:3974
#, no-c-format
msgid "Table"
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:3978
#, no-c-format
msgid "Because of pressing release schedules to get this edition to your hands, we were unable to completely update this section. The description of the <classname>Table</classname> component should be mostly up-to-date, but some data binding related topics still require significant revision. Please consult the web version once it is updated, or the next print edition."
msgstr ""

#. Tag: para
#: chapter-components.xml:3985
#, no-c-format
msgid "The <classname>Table</classname> component is intended for presenting tabular data organized in rows and columns. The <classname>Table</classname> is one of the most versatile components in Vaadin. Table cells can include text or arbitrary UI components. You can easily implement editing of the table data, for example clicking on a cell could change it to a text field for editing."
msgstr ""

#. Tag: para
#: chapter-components.xml:3993
#, no-c-format
msgid "The data contained in a <classname>Table</classname> is managed using the Data Model of Vaadin (see <xref linkend=\"datamodel\"/>), through the <classname>Container</classname> interface of the <classname>Table</classname>. This makes it possible to bind a table directly to a data source, such as a database query. Only the visible part of the table is loaded into the browser and moving the visible window with the scrollbar loads content from the server. While the data is being loaded, a tooltip will be displayed that shows the current range and total number of items in the table. The rows of the table are <emphasis>items</emphasis> in the container and the columns are <emphasis>properties</emphasis>. Each table row (item) is identified with an <emphasis>item identifier</emphasis> (IID), and each column (property) with a <emphasis>property identifier</emphasis> (PID)."
msgstr ""

#. Tag: para
#: chapter-components.xml:4008
#, no-c-format
msgid "When creating a table, you first need to define columns with <methodname>addContainerProperty()</methodname>. This method comes in two flavors. The simpler one takes the property ID of the column and uses it also as the caption of the column. The more complex one allows differing PID and header for the column. This may make, for example, internationalization of table headers easier, because if a PID is internationalized, the internationalization has to be used everywhere where the PID is used. The complex form of the method also allows defining an icon for the column from a resource. The \"default value\" parameter is used when new properties (columns) are added to the table, to fill in the missing values. (This default has no meaning in the usual case, such as below, where we add items after defining the properties.)"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4023
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* Create the table with a caption. */\n"
      "Table table = new Table(\"This is my Table\");\n"
      "\n"
      "/* Define the names and data types of columns.\n"
      " * The \"default value\" parameter is meaningless here. */\n"
      "table.addContainerProperty(\"First Name\", String.class,  null);\n"
      "table.addContainerProperty(\"Last Name\",  String.class,  null);\n"
      "table.addContainerProperty(\"Year\",       Integer.class, null);\n"
      "\n"
      "/* Add a few items in the table. */\n"
      "table.addItem(new Object[] {\n"
      "    \"Nicolaus\",\"Copernicus\",new Integer(1473)}, new Integer(1));\n"
      "table.addItem(new Object[] {\n"
      "    \"Tycho\",   \"Brahe\",     new Integer(1546)}, new Integer(2));\n"
      "table.addItem(new Object[] {\n"
      "    \"Giordano\",\"Bruno\",     new Integer(1548)}, new Integer(3));\n"
      "table.addItem(new Object[] {\n"
      "    \"Galileo\", \"Galilei\",   new Integer(1564)}, new Integer(4));\n"
      "table.addItem(new Object[] {\n"
      "    \"Johannes\",\"Kepler\",    new Integer(1571)}, new Integer(5));\n"
      "table.addItem(new Object[] {\n"
      "    \"Isaac\",   \"Newton\",    new Integer(1643)}, new Integer(6));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4025
#, no-c-format
msgid "In this example, we used an increasing <classname>Integer</classname> object as the Item Identifier, given as the second parameter to <methodname>addItem()</methodname>. The actual rows are given simply as object arrays, in the same order in which the properties were added. The objects must be of the correct class, as defined in the <methodname>addContainerProperty()</methodname> calls."
msgstr ""

#. Tag: title
#: chapter-components.xml:4035
#, no-c-format
msgid "Basic Table Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:4043
#, no-c-format
msgid "Scalability of the <classname>Table</classname> is largely dictated by the container. The default <classname>IndexedContainer</classname> is relatively heavy and can cause scalability problems, for example, when updating the values. Use of an optimized application-specific container is recommended. Table does not have a limit for the number of items and is just as fast with hundreds of thousands of items as with just a few. With the current implementation of scrolling, there is a limit of around 500 000 rows, depending on the browser and the pixel height of rows."
msgstr ""

#. Tag: title
#: chapter-components.xml:4056
#, no-c-format
msgid "Selecting Items in a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:4058
#, no-c-format
msgid "The <classname>Table</classname> allows selecting one or more items by clicking them with the mouse. When the user selects an item, the IID of the item will be set as the property of the table and a <classname>ValueChangeEvent</classname> is triggered. To enable selection, you need to set the table <emphasis>selectable</emphasis>. You will also need to set it as <emphasis>immediate</emphasis> in most cases, as we do below, because without it, the change in the property will not be communicated immediately to the server."
msgstr ""

#. Tag: para
#: chapter-components.xml:4069
#, no-c-format
msgid "The following example shows how to enable the selection of items in a <classname>Table</classname> and how to handle <classname>ValueChangeEvent</classname> events that are caused by changes in selection. You need to handle the event with the <methodname>valueChange()</methodname> method of the <classname>Property.ValueChangeListener</classname> interface."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4078
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Allow selecting items from the table.\n"
      "table.setSelectable(true);\n"
      "\n"
      "// Send changes in selection immediately to server.\n"
      "table.setImmediate(true);\n"
      "\n"
      "// Shows feedback from selection.\n"
      "final Label current = new Label(\"Selected: -\");\n"
      "\n"
      "// Handle selection change.\n"
      "table.addValueChangeListener(new Property.ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        current.setValue(\"Selected: \" + table.getValue());\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:4081
#, no-c-format
msgid "Table Selection Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:4089
#, no-c-format
msgid "If the user clicks on an already selected item, the selection will deselected and the table property will have <parameter>null</parameter> value. You can disable this behaviour by setting <methodname>setNullSelectionAllowed(false)</methodname> for the table."
msgstr ""

#. Tag: para
#: chapter-components.xml:4096
#, no-c-format
msgid "The selection is the value of the table's property, so you can get it with <methodname>getValue()</methodname>. You can get it also from a reference to the table itself. In single selection mode, the value is the item identifier of the selected item or <parameter>null</parameter> if no item is selected. In multiple selection mode (see below), the value is a <classname>Set</classname> of item identifiers. Notice that the set is unmodifiable, so you can not simply change it to change the selection."
msgstr ""

#. Tag: para
#: chapter-components.xml:4109
#, no-c-format
msgid "A table can also be in <emphasis>multiselect</emphasis> mode, where a user can select multiple items by clicking them with left mouse button while holding the <keycap>Ctrl</keycap> key (or <keycap>Meta</keycap> key) pressed. If <keycap>Ctrl</keycap> is not held, clicking an item will select it and other selected items are deselected. The user can select a range by selecting an item, holding the <keycap>Shift</keycap> key pressed, and clicking another item, in which case all the items between the two are also selected. Multiple ranges can be selected by first selecting a range, then selecting an item while holding <keycap>Ctrl</keycap>, and then selecting another item with both <keycap>Ctrl</keycap> and <keycap>Shift</keycap> pressed."
msgstr ""

#. Tag: para
#: chapter-components.xml:4124
#, no-c-format
msgid "The multiselect mode is enabled with the <methodname>setMultiSelect()</methodname> method of the <classname>Select</classname> interface of <classname>Table</classname>. Setting table in multiselect mode does not implicitly set it as <emphasis>selectable</emphasis>, so it must be set separately."
msgstr ""

#. Tag: para
#: chapter-components.xml:4133
#, no-c-format
msgid "The <methodname>setMultiSelectMode()</methodname> property affects the control of multiple selection: <parameter>MultiSelectMode.DEFAULT</parameter> is the default behaviour, which requires holding the <keycap>Ctrl</keycap> (or <keycap>Meta</keycap>) key pressed while selecting items, while in <parameter>MultiSelectMode.SIMPLE</parameter> holding the <keycap>Ctrl</keycap> key is not needed. In the simple mode, items can only be deselected by clicking them."
msgstr ""

#. Tag: title
#: chapter-components.xml:4147
#, no-c-format
msgid "Table Features"
msgstr ""

#. Tag: title
#: chapter-components.xml:4150
#, no-c-format
msgid "Page Length and Scrollbar"
msgstr ""

#. Tag: para
#: chapter-components.xml:4152
#, no-c-format
msgid "The default style for <classname>Table</classname> provides a table with a scrollbar. The scrollbar is located at the right side of the table and becomes visible when the number of items in the table exceeds the page length, that is, the number of visible items. You can set the page length with <methodname>setPageLength()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4160
#, no-c-format
msgid "Setting the page length to zero makes all the rows in a table visible, no matter how many rows there are. Notice that this also effectively disables buffering, as all the entire table is loaded to the browser at once. Using such tables to generate reports does not scale up very well, as there is some inevitable overhead in rendering a table with Ajax. For very large reports, generating HTML directly is a more scalable solution."
msgstr ""

#. Tag: title
#: chapter-components.xml:4172 chapter-components.xml:4197
#, no-c-format
msgid "Resizing Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4174
#, no-c-format
msgid "You can set the width of a column programmatically from the server-side with <methodname>setColumnWidth()</methodname>. The column is identified by the property ID and the width is given in pixels."
msgstr ""

#. Tag: para
#: chapter-components.xml:4180
#, no-c-format
msgid "The user can resize table columns by dragging the resize handle between two columns. Resizing a table column causes a <classname>ColumnResizeEvent</classname>, which you can handle with a <classname>Table.ColumnResizeListener</classname>. The table must be set in immediate mode if you want to receive the resize events immediately, which is typical."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4189
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[table.addColumnResizeListener(new Table.ColumnResizeListener(){\n"
      "    public void columnResize(ColumnResizeEvent event) {\n"
      "        // Get the new width of the resized column\n"
      "        int width = event.getCurrentWidth();\n"
      "        \n"
      "        // Get the property ID of the resized column\n"
      "        String column = (String) event.getPropertyId();\n"
      "\n"
      "        // Do something with the information\n"
      "        table.setColumnFooter(column, String.valueOf(width) + \"px\");\n"
      "    }\n"
      "});\n"
      "        \n"
      "// Must be immediate to send the resize events immediately\n"
      "table.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4191
#, no-c-format
msgid "See <xref linkend=\"figure.component.table.columnresize\"/> for a result after the columns of a table has been resized."
msgstr ""

#. Tag: title
#: chapter-components.xml:4207
#, no-c-format
msgid "Reordering Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4209
#, no-c-format
msgid "If <methodname>setColumnReorderingAllowed(true)</methodname> is set, the user can reorder table columns by dragging them with the mouse from the column header,"
msgstr ""

#. Tag: title
#: chapter-components.xml:4217 chapter-components.xml:4242
#, no-c-format
msgid "Collapsing Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4219
#, no-c-format
msgid "When <methodname>setColumnCollapsingAllowed(true)</methodname> is set, the right side of the table header shows a drop-down list that allows selecting which columns are shown. Collapsing columns is different than hiding columns with <methodname>setVisibleColumns()</methodname>, which hides the columns completely so that they can not be made visible (uncollapsed) from the user interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:4228
#, no-c-format
msgid "You can collapse columns programmatically with <methodname>setColumnCollapsed()</methodname>. Collapsing must be enabled before collapsing columns with the method or it will throw an <classname>IllegalAccessException</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4235
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Allow the user to collapse and uncollapse columns\n"
      "table.setColumnCollapsingAllowed(true);\n"
      "\n"
      "// Collapse this column programmatically\n"
      "try {\n"
      "    table.setColumnCollapsed(\"born\", true);\n"
      "} catch (IllegalAccessException e) {\n"
      "    // Can't occur - collapsing was allowed above\n"
      "    System.err.println(\"Something horrible occurred\");\n"
      "}\n"
      "        \n"
      "// Give enough width for the table to accommodate the\n"
      "// initially collapsed column later\n"
      "table.setWidth(\"250px\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4237
#, no-c-format
msgid "See <xref linkend=\"figure.component.table.columncollapsing\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4250
#, no-c-format
msgid "If the table has undefined width, it minimizes its width to fit the width of the visible columns. If some columns are initially collapsed, the width of the table may not be enough to accomodate them later, which will result in an ugly horizontal scrollbar. You should consider giving the table enough width to accomodate columns uncollapsed by the user."
msgstr ""

#. Tag: title
#: chapter-components.xml:4261
#, no-c-format
msgid "Components Inside a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:4263
#, no-c-format
msgid "The cells of a <classname>Table</classname> can contain any user interface components, not just strings. If the rows are higher than the row height defined in the default theme, you have to define the proper row height in a custom theme."
msgstr ""

#. Tag: para
#: chapter-components.xml:4270
#, no-c-format
msgid "When handling events for components inside a <classname>Table</classname>, such as for the <classname>Button</classname> in the example below, you usually need to know the item the component belongs to. Components do not themselves know about the table or the specific item in which a component is contained. Therefore, the handling method must use some other means for finding out the Item ID of the item. There are a few possibilities. Usually the easiest way is to use the <methodname>setData()</methodname> method to attach an arbitrary object to a component. You can subclass the component and include the identity information there. You can also simply search the entire table for the item with the component, although that solution may not be so scalable."
msgstr ""

#. Tag: para
#: chapter-components.xml:4286
#, no-c-format
msgid "The example below includes table rows with a <classname>Label</classname> in XHTML formatting mode, a multiline <classname>TextField</classname>, a <classname>CheckBox</classname>, and a <classname>Button</classname> that shows as a link."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4293
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a table and add a style to allow setting the row height in theme.\n"
      "final Table table = new Table();\n"
      "table.addStyleName(\"components-inside\");\n"
      "\n"
      "/* Define the names and data types of columns.\n"
      " * The \"default value\" parameter is meaningless here. */\n"
      "table.addContainerProperty(\"Sum\",            Label.class,     null);\n"
      "table.addContainerProperty(\"Is Transferred\", CheckBox.class,  null);\n"
      "table.addContainerProperty(\"Comments\",       TextField.class, null);\n"
      "table.addContainerProperty(\"Details\",        Button.class,    null);\n"
      "\n"
      "/* Add a few items in the table. */\n"
      "for (int i=0; i<100; i++) {\n"
      "    // Create the fields for the current table row\n"
      "    Label sumField = new Label(String.format(\n"
      "                   \"Sum is <b>$%04.2f</b><br/><i>(VAT incl.)</i>\",\n"
      "                   new Object[] {new Double(Math.random()*1000)}),\n"
      "                               Label.CONTENT_XHTML);\n"
      "    CheckBox transferredField = new CheckBox(\"is transferred\");\n"
      "    \n"
      "    // Multiline text field. This required modifying the \n"
      "    // height of the table row.\n"
      "    TextField commentsField = new TextField();\n"
      "    commentsField.setRows(3);\n"
      "    \n"
      "    // The Table item identifier for the row.\n"
      "    Integer itemId = new Integer(i);\n"
      "    \n"
      "    // Create a button and handle its click. A Button does not\n"
      "    // know the item it is contained in, so we have to store the\n"
      "    // item ID as user-defined data.\n"
      "    Button detailsField = new Button(\"show details\");\n"
      "    detailsField.setData(itemId);\n"
      "    detailsField.addClickListener(new Button.ClickListener() {\n"
      "        public void buttonClick(ClickEvent event) {\n"
      "            // Get the item identifier from the user-defined data.\n"
      "            Integer iid = (Integer)event.getButton().getData();\n"
      "            Notification.show(\"Link \" +\n"
      "                              iid.intValue() + \" clicked.\");\n"
      "        } \n"
      "    });\n"
      "    detailsField.addStyleName(\"link\");\n"
      "    \n"
      "    // Create the table row.\n"
      "    table.addItem(new Object[] {sumField, transferredField,\n"
      "                                commentsField, detailsField},\n"
      "                  itemId);\n"
      "}\n"
      "\n"
      "// Show just three rows because they are so high.\n"
      "table.setPageLength(3);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4295
#, no-c-format
msgid "The row height has to be set higher than the default with a style rule such as the following:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4300
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* Table rows contain three-row TextField components. */\n"
      ".v-table-components-inside .v-table-cell-content {\n"
      "        height: 54px;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4302
#, no-c-format
msgid "The table will look as shown in <xref linkend=\"figure.components.table.components-inside\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4308
#, no-c-format
msgid "Components in a Table"
msgstr ""

#. Tag: title
#: chapter-components.xml:4318
#, no-c-format
msgid "Iterating Over a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:4320
#, no-c-format
msgid "As the items in a <classname>Table</classname> are not indexed, iterating over the items has to be done using an iterator. The <methodname>getItemIds()</methodname> method of the <classname>Container</classname> interface of <classname>Table</classname> returns a <classname>Collection</classname> of item identifiers over which you can iterate using an <classname>Iterator</classname>. For an example about iterating over a <classname>Table</classname>, please see <xref linkend=\"datamodel.container\"/>. Notice that you may not modify the <classname>Table</classname> during iteration, that is, add or remove items. Changing the data is allowed."
msgstr ""

#. Tag: title
#: chapter-components.xml:4335
#, no-c-format
msgid "Filtering Table Contents"
msgstr ""

#. Tag: para
#: chapter-components.xml:4337
#, no-c-format
msgid "A table can be filtered if its container data source implements the <classname>Filterable</classname> interface, as the default <classname>IndexedContainer</classname> does. See <xref linkend=\"datamodel.container.filtered\"/>."
msgstr ""

#. Tag: primary
#: chapter-components.xml:4343
#, no-c-format
msgid "Container"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:4343
#, no-c-format
msgid "Filterable"
msgstr ""

#. Tag: title
#: chapter-components.xml:4349
#, no-c-format
msgid "Editing the Values in a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:4351
#, no-c-format
msgid "Normally, a <classname>Table</classname> simply displays the items and their fields as text. If you want to allow the user to edit the values, you can either put them inside components as we did above, or you can simply call <methodname>setEditable(true)</methodname> and the cells are automatically turned into editable fields."
msgstr ""

#. Tag: para
#: chapter-components.xml:4359
#, no-c-format
msgid "Let us begin with a regular table with a some columns with usual Java types, namely a <classname>Date</classname>, <classname>Boolean</classname>, and a <classname>String</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4365
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a table. It is by default not editable.\n"
      "final Table table = new Table();\n"
      "\n"
      "// Define the names and data types of columns.\n"
      "table.addContainerProperty(\"Date\",     Date.class,  null);\n"
      "table.addContainerProperty(\"Work\",     Boolean.class, null);\n"
      "table.addContainerProperty(\"Comments\", String.class,  null);\n"
      "\n"
      "// Add a few items in the table.\n"
      "for (int i=0; i<100; i++) {\n"
      "    Calendar calendar = new GregorianCalendar(2008,0,1);\n"
      "    calendar.add(Calendar.DAY_OF_YEAR, i);\n"
      "    \n"
      "    // Create the table row.\n"
      "    table.addItem(new Object[] {calendar.getTime(),\n"
      "                                new Boolean(false),\n"
      "                                \"\"},\n"
      "                  new Integer(i)); // Item identifier\n"
      "}\n"
      "\n"
      "table.setPageLength(8);\n"
      "layout.addComponent(table);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4367
#, no-c-format
msgid "You could put the table in editable mode right away if you need to. We'll continue the example by adding a mechanism to switch the <classname>Table</classname> from and to the editable mode."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4373
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[final CheckBox switchEditable = new CheckBox(\"Editable\");\n"
      "switchEditable.addValueChangeListener(\n"
      "        new Property.ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        table.setEditable(((Boolean)event.getProperty()\n"
      "                             .getValue()).booleanValue());\n"
      "    }\n"
      "});\n"
      "switchEditable.setImmediate(true);\n"
      "layout.addComponent(switchEditable);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4375
#, no-c-format
msgid "Now, when you check to checkbox, the components in the table turn into editable fields, as shown in <xref linkend=\"figure.component.table.editable\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4382
#, no-c-format
msgid "A Table in Normal and Editable Mode"
msgstr ""

#. Tag: title
#: chapter-components.xml:4394
#, no-c-format
msgid "Field Factories"
msgstr ""

#. Tag: para
#: chapter-components.xml:4396
#, no-c-format
msgid "The field components that allow editing the values of particular types in a table are defined in a field factory that implements the <classname>TableFieldFactory</classname> interface. The default implementation is <classname>DefaultFieldFactory</classname>, which offers the following crude mappings:"
msgstr ""

#. Tag: title
#: chapter-components.xml:4405
#, no-c-format
msgid "Type to Field Mappings in <classname>DefaultFieldFactory</classname>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4409
#, no-c-format
msgid "Property Type"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4410
#, no-c-format
msgid "Mapped to Field Class"
msgstr ""

#. Tag: classname
#: chapter-components.xml:4415
#, no-c-format
msgid "Date"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4416
#, no-c-format
msgid "A <classname>DateField</classname>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:4419
#, no-c-format
msgid "Boolean"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4420
#, no-c-format
msgid "A <classname>CheckBox</classname>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:4423
#, no-c-format
msgid "Item"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4425
#, no-c-format
msgid "A <classname>Form</classname> (deprecated in Vaadin 7). The fields of the form are automatically created from the item's properties using a <classname>FormFieldFactory</classname>. The normal use for this property type is inside a <classname>Form</classname> and is less useful inside a <classname>Table</classname>."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:4434
#, no-c-format
msgid "other"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4436
#, no-c-format
msgid "A <classname>TextField</classname>. The text field manages conversions from the basic types, if possible."
msgstr ""

#. Tag: para
#: chapter-components.xml:4444
#, no-c-format
msgid "Field factories are covered with more detail in <xref linkend=\"datamodel.itembinding\"/>. You could just implement the <classname>TableFieldFactory</classname> interface, but we recommend that you extend the <classname>DefaultFieldFactory</classname> according to your needs. In the default implementation, the mappings are defined in the <methodname>createFieldByPropertyType()</methodname> method (you might want to look at the source code) both for tables and forms."
msgstr ""

#. Tag: title
#: chapter-components.xml:4456
#, no-c-format
msgid "Navigation in Editable Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:4458
#, no-c-format
msgid "In the editable mode, the editor fields can have focus. Pressing <keycap>Tab</keycap> moves the focus to next column or, at the last column, to the first column of the next item. Respectively, pressing <keycombo><keycap>Shift</keycap><keycap>Tab</keycap></keycombo> moves the focus backward. If the focus is in the last column of the last visible item, the pressing <keycap>Tab</keycap> moves the focus outside the table. Moving backward from the first column of the first item moves the focus to the table itself. Some updates to the table, such as changing the headers or footers or regenerating a column, can move the focus from an editor component to the table itself."
msgstr ""

#. Tag: para
#: chapter-components.xml:4471
#, no-c-format
msgid "The default behaviour may be undesirable in many cases. For example, the focus also goes through any read-only editor fields and can move out of the table inappropriately. You can provide better navigation is to use event handler for shortcut keys such as <keycap>Tab</keycap>, <keycap>Arrow Up</keycap>, <keycap>Arrow Down</keycap>, and <keycap>Enter</keycap>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4480
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Keyboard navigation\n"
      "class KbdHandler implements Handler {\n"
      "    Action tab_next = new ShortcutAction(\"Tab\",\n"
      "            ShortcutAction.KeyCode.TAB, null);\n"
      "    Action tab_prev = new ShortcutAction(\"Shift+Tab\",\n"
      "            ShortcutAction.KeyCode.TAB,\n"
      "            new int[] {ShortcutAction.ModifierKey.SHIFT});\n"
      "    Action cur_down = new ShortcutAction(\"Down\",\n"
      "            ShortcutAction.KeyCode.ARROW_DOWN, null);\n"
      "    Action cur_up   = new ShortcutAction(\"Up\",\n"
      "            ShortcutAction.KeyCode.ARROW_UP,   null);\n"
      "    Action enter   = new ShortcutAction(\"Enter\",\n"
      "            ShortcutAction.KeyCode.ENTER,      null);\n"
      "    public Action[] getActions(Object target, Object sender) {\n"
      "        return new Action[] {tab_next, tab_prev, cur_down,\n"
      "                             cur_up, enter};\n"
      "    }\n"
      "\n"
      "    public void handleAction(Action action, Object sender,\n"
      "                             Object target) {\n"
      "        if (target instanceof TextField) {\n"
      "            // Move according to keypress\n"
      "            int itemid = (Integer) ((TextField) target).getData();\n"
      "            if (action == tab_next || action == cur_down)\n"
      "                itemid++;\n"
      "            else if (action == tab_prev || action == cur_up)\n"
      "                itemid--;\n"
      "            // On enter, just stay where you were. If we did\n"
      "            // not catch the enter action, the focus would be\n"
      "            // moved to wrong place.\n"
      "            \n"
      "            if (itemid >= 0 && itemid < table.size()) {\n"
      "                TextField newTF = valueFields.get(itemid);\n"
      "                if (newTF != null)\n"
      "                    newTF.focus();\n"
      "            }\n"
      "        }\n"
      "    }\n"
      "}\n"
      "\n"
      "// Panel that handles keyboard navigation\n"
      "Panel navigator = new Panel();\n"
      "navigator.addStyleName(Reindeer.PANEL_LIGHT);\n"
      "navigator.addComponent(table);\n"
      "navigator.addActionHandler(new KbdHandler());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4482
#, no-c-format
msgid "The main issue in implementing keyboard navigation in an editable table is that the editor fields do not know the table they are in. To find the parent table, you can either look up in the component container hierarchy or simply store a reference to the table with <methodname>setData()</methodname> in the field component. The other issue is that you can not acquire a reference to an editor field from the <classname>Table</classname> component. One solution is to use some external collection, such as a <classname>HashMap</classname>, to map item IDs to the editor fields."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4494
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Can't access the editable components from the table so\n"
      "// must store the information\n"
      "final HashMap<Integer,TextField> valueFields =\n"
      "    new HashMap<Integer,TextField>();]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4496
#, no-c-format
msgid "The map has to be filled in a <classname>TableFieldFactory</classname>, such as in the following. You also need to set the reference to the table there and you can also set the initial focus there."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4503
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[table.setTableFieldFactory(new TableFieldFactory () {\n"
      "    public Field createField(Container container, Object itemId,\n"
      "            Object propertyId, Component uiContext) {\n"
      "        TextField field = new TextField((String) propertyId);\n"
      "        \n"
      "        // User can only edit the numeric column\n"
      "        if (\"Source of Fear\".equals(propertyId))\n"
      "            field.setReadOnly(true);\n"
      "        else { // The numeric column\n"
      "            // The field needs to know the item it is in\n"
      "            field.setData(itemId);\n"
      "            \n"
      "            // Remember the field\n"
      "            valueFields.put((Integer) itemId, field);\n"
      "            \n"
      "            // Focus the first editable value\n"
      "            if (((Integer)itemId) == 0)\n"
      "                field.focus();\n"
      "        }\n"
      "        return field;\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4505
#, no-c-format
msgid "The issues are complicated by the fact that the editor fields are not generated for the entire table, but only for a cache window that includes the visible items and some items above and below it. For example, if the beginning of a big scrollable table is visible, the editor component for the last item does not exist. This issue is relevant mostly if you want to have wrap-around navigation that jumps from the last to first item and vice versa."
msgstr ""

#. Tag: title
#: chapter-components.xml:4519
#, no-c-format
msgid "Column Headers and Footers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4521
#, no-c-format
msgid "<classname>Table</classname> supports both column headers and footers; the headers are enabled by default."
msgstr ""

#. Tag: title
#: chapter-components.xml:4527
#, no-c-format
msgid "Headers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4529
#, no-c-format
msgid "The table header displays the column headers at the top of the table. You can use the column headers to reorder or resize the columns, as described earlier. By default, the header of a column is the property ID of the column, unless given explicitly with <methodname>setColumnHeader()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4537
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Define the properties\n"
      "table.addContainerProperty(\"lastname\", String.class, null);\n"
      "table.addContainerProperty(\"born\", Integer.class, null);\n"
      "table.addContainerProperty(\"died\", Integer.class, null);\n"
      "\n"
      "// Set nicer header names\n"
      "table.setColumnHeader(\"lastname\", \"Name\");\n"
      "table.setColumnHeader(\"born\", \"Born\");\n"
      "table.setColumnHeader(\"died\", \"Died\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4539
#, no-c-format
msgid "The text of the column headers and the visibility of the header depends on the <emphasis>column header mode</emphasis>. The header is visible by default, but you can disable it with <methodname>setColumnHeaderMode(Table.COLUMN_HEADER_MODE_HIDDEN)</methodname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4548
#, no-c-format
msgid "Footers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4550
#, no-c-format
msgid "The table footer can be useful for displaying sums or averages of values in a column, and so on. The footer is not visible by default; you can enable it with <methodname>setFooterVisible(true)</methodname>. Unlike in the header, the column headers are empty by default. You can set their value with <methodname>setColumnFooter()</methodname>. The columns are identified by their property ID."
msgstr ""

#. Tag: para
#: chapter-components.xml:4560
#, no-c-format
msgid "The following example shows how to calculate average of the values in a column:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4565
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have a table with a numeric column\n"
      "Table table = new Table(\"Custom Table Footer\");\n"
      "table.addContainerProperty(\"Name\", String.class, null);\n"
      "table.addContainerProperty(\"Died At Age\", Integer.class, null);\n"
      "        \n"
      "// Insert some data\n"
      "Object people[][] = {{\"Galileo\",  77},\n"
      "                     {\"Monnier\",  83},\n"
      "                     {\"Vaisala\",  79},\n"
      "                     {\"Oterma\",   86}};\n"
      "for (int i=0; i<people.length; i++)\n"
      "    table.addItem(people[i], new Integer(i));\n"
      "        \n"
      "// Calculate the average of the numeric column\n"
      "double avgAge = 0;\n"
      "for (int i=0; i<people.length; i++)\n"
      "    avgAge += (Integer) people[i][1];\n"
      "avgAge /= people.length;\n"
      "\n"
      "// Set the footers\n"
      "table.setFooterVisible(true);\n"
      "table.setColumnFooter(\"Name\", \"Average\");\n"
      "table.setColumnFooter(\"Died At Age\", String.valueOf(avgAge));\n"
      "\n"
      "// Adjust the table height a bit\n"
      "table.setPageLength(table.size());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4567
#, no-c-format
msgid "The resulting table is shown in <xref linkend=\"figure.components.table.headersfooters.footer\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4573
#, no-c-format
msgid "A Table with a Footer"
msgstr ""

#. Tag: title
#: chapter-components.xml:4586
#, no-c-format
msgid "Handling Mouse Clicks on Headers and Footers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4588
#, no-c-format
msgid "Normally, when the user clicks a column header, the table will be sorted by the column, assuming that the data source is <classname>Sortable</classname> and sorting is not disabled. In some cases, you might want some other functionality when the user clicks the column header, such as selecting the column in some way."
msgstr ""

#. Tag: para
#: chapter-components.xml:4596
#, no-c-format
msgid "Clicks in the header cause a <classname>HeaderClickEvent</classname>, which you can handle with a <classname>Table.HeaderClickListener</classname>. Click events on the table header (and footer) are, like button clicks, sent immediately to server, so there is no need to set <methodname>setImmediate()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4605
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Handle the header clicks\n"
      "table.addHeaderClickListener(new Table.HeaderClickListener() {\n"
      "    public void headerClick(HeaderClickEvent event) {\n"
      "        String column = (String) event.getPropertyId();\n"
      "        Notification.show(\"Clicked \" + column +\n"
      "                \"with \" + event.getButtonName());\n"
      "    }\n"
      "});\n"
      "        \n"
      "// Disable the default sorting behavior\n"
      "table.setSortDisabled(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4607
#, no-c-format
msgid "Setting a click handler does not automatically disable the sorting behavior of the header; you need to disable it explicitly with <methodname>setSortDisabled(true)</methodname>. Header click events are not sent when the user clicks the column resize handlers to drag them."
msgstr ""

#. Tag: para
#: chapter-components.xml:4616
#, no-c-format
msgid "The <classname>HeaderClickEvent</classname> object provides the identity of the clicked column with <methodname>getPropertyId()</methodname>. The <methodname>getButton()</methodname> reports the mouse button with which the click was made: <parameter>BUTTON_LEFT</parameter>, <parameter>BUTTON_RIGHT</parameter>, or <parameter>BUTTON_MIDDLE</parameter>. The <methodname>getButtonName()</methodname> a human-readable button name in English: \"<parameter>left</parameter>\", \"<parameter>right</parameter>\", or \"<parameter>middle</parameter>\". The <methodname>isShiftKey()</methodname>, <methodname>isCtrlKey()</methodname>, etc., methods indicate if the <keycap>Shift</keycap>, <keycap>Ctrl</keycap>, <keycap>Alt</keycap> or other modifier keys were pressed during the click."
msgstr ""

#. Tag: para
#: chapter-components.xml:4634
#, no-c-format
msgid "Clicks in the footer cause a <classname>FooterClickEvent</classname>, which you can handle with a <classname>Table.FooterClickListener</classname>. Footers do not have any default click behavior, like the sorting in the header. Otherwise, handling clicks in the footer is equivalent to handling clicks in the header."
msgstr ""

#. Tag: title
#: chapter-components.xml:4646
#, no-c-format
msgid "Generated Table Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4648
#, no-c-format
msgid "You might want to have a column that has values calculated from other columns. Or you might want to format table columns in some way, for example if you have columns that display currencies. The <classname>ColumnGenerator</classname> interface allows defining custom generators for such columns."
msgstr ""

#. Tag: para
#: chapter-components.xml:4656
#, no-c-format
msgid "You add new generated columns to a <classname>Table</classname> with <methodname>addGeneratedColumn()</methodname>. It takes the column identifier as its parameters. Usually you want to have a more user-friendly and possibly internationalized column header. You can set the header and a possible icon by calling <methodname>addContainerProperty()</methodname> <emphasis>before</emphasis> adding the generated column."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4666
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Define table columns. \n"
      "table.addContainerProperty(\n"
      "    \"date\",     Date.class,   null, \"Date\",         null, null);\n"
      "table.addContainerProperty(\n"
      "    \"quantity\", Double.class, null, \"Quantity (l)\", null, null);\n"
      "table.addContainerProperty(\n"
      "    \"price\",    Double.class, null, \"Price (e/l)\",  null, null);\n"
      "table.addContainerProperty(\n"
      "    \"total\",    Double.class, null, \"Total (e)\",    null, null);\n"
      "\n"
      "// Define the generated columns and their generators.\n"
      "table.addGeneratedColumn(\"date\",\n"
      "                         new DateColumnGenerator());\n"
      "table.addGeneratedColumn(\"quantity\",\n"
      "                         new ValueColumnGenerator(\"%.2f l\"));\n"
      "table.addGeneratedColumn(\"price\",\n"
      "                         new PriceColumnGenerator());\n"
      "table.addGeneratedColumn(\"total\",\n"
      "                         new ValueColumnGenerator(\"%.2f e\"));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4668
#, no-c-format
msgid "Notice that the <methodname>addGeneratedColumn()</methodname> always places the generated columns as the last column, even if you defined some other order previously. You will have to set the proper order with <methodname>setVisibleColumns()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4675
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[table.setVisibleColumns(new Object[] {\"date\", \"quantity\", \"price\", \"total\"});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4677
#, no-c-format
msgid "The generators are objects that implement the <classname>Table.ColumnGenerator</classname> interface and its <methodname>generateCell()</methodname> method. The method gets the identity of the item and column as its parameters, in addition to the table object. It has to return a component object."
msgstr ""

#. Tag: para
#: chapter-components.xml:4685
#, no-c-format
msgid "The following example defines a generator for formatting <classname>Double</classname> valued fields according to a format string (as in <classname>java.util.Formatter</classname>)."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4691
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/** Formats the value in a column containing Double objects. */\n"
      "class ValueColumnGenerator implements Table.ColumnGenerator {\n"
      "    String format; /* Format string for the Double values. */\n"
      "\n"
      "    /**\n"
      "     * Creates double value column formatter with the given\n"
      "     * format string.\n"
      "     */\n"
      "    public ValueColumnGenerator(String format) {\n"
      "        this.format = format;\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Generates the cell containing the Double value.\n"
      "     * The column is irrelevant in this use case.\n"
      "     */\n"
      "    public Component generateCell(Table source, Object itemId,\n"
      "                                  Object columnId) {\n"
      "        // Get the object stored in the cell as a property\n"
      "        Property prop =\n"
      "            source.getItem(itemId).getItemProperty(columnId);\n"
      "        if (prop.getType().equals(Double.class)) {\n"
      "            Label label = new Label(String.format(format,\n"
      "                    new Object[] { (Double) prop.getValue() }));\n"
      "            \n"
      "            // Set styles for the column: one indicating that it's\n"
      "            // a value and a more specific one with the column\n"
      "            // name in it. This assumes that the column name\n"
      "            // is proper for CSS.\n"
      "            label.addStyleName(\"column-type-value\");\n"
      "            label.addStyleName(\"column-\" + (String) columnId);\n"
      "            return label;\n"
      "        }\n"
      "        return null;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4700
#, no-c-format
msgid "The generator is called for all the visible (or more accurately cached) items in a table. If the user scrolls the table to another position in the table, the columns of the new visible rows are generated dynamically. The columns in the visible (cached) rows are also generated always when an item has a value change. It is therefore usually safe to calculate the value of generated cells from the values of different rows (items)."
msgstr ""

#. Tag: para
#: chapter-components.xml:4709
#, no-c-format
msgid "When you set a table as <parameter>editable</parameter>, regular fields will change to editing fields. When the user changes the values in the fields, the generated columns will be updated automatically. Putting a table with generated columns in editable mode has a few quirks. The editable mode of <classname>Table</classname> does not affect generated columns. You have two alternatives: either you generate the editing fields in the generator or, in case of formatter generators, remove the generator in the editable mode. The example below uses the latter approach."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4720
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have a check box that allows the user\n"
      "// to make the quantity and total columns editable.\n"
      "final CheckBox editable = new CheckBox(\n"
      "    \"Edit the input values - calculated columns are regenerated\");\n"
      "\n"
      "editable.setImmediate(true);\n"
      "editable.addClickListener(new ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        table.setEditable(editable.booleanValue());\n"
      "        \n"
      "        // The columns may not be generated when we want to\n"
      "        // have them editable.\n"
      "        if (editable.booleanValue()) {\n"
      "            table.removeGeneratedColumn(\"quantity\");\n"
      "            table.removeGeneratedColumn(\"total\");\n"
      "        } else { // Not editable\n"
      "            // Show the formatted values.\n"
      "            table.addGeneratedColumn(\"quantity\",\n"
      "                new ValueColumnGenerator(\"%.2f l\"));\n"
      "            table.addGeneratedColumn(\"total\",\n"
      "                new ValueColumnGenerator(\"%.2f e\"));\n"
      "        }\n"
      "        // The visible columns are affected by removal\n"
      "        // and addition of generated columns so we have\n"
      "        // to redefine them.\n"
      "        table.setVisibleColumns(new Object[] {\"date\", \"quantity\",\n"
      "                 \"price\", \"total\", \"consumption\", \"dailycost\"});\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4722
#, no-c-format
msgid "You will also have to set the editing fields in <parameter>immediate</parameter> mode to have the update occur immediately when an edit field loses the focus. You can set the fields in <parameter>immediate</parameter> mode with the a custom <classname>TableFieldFactory</classname>, such as the one given below, that just extends the default implementation to set the mode:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4731
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class ImmediateFieldFactory extends DefaultFieldFactory {\n"
      "    public Field createField(Container container,\n"
      "                             Object itemId,\n"
      "                             Object propertyId,\n"
      "                             Component uiContext) {\n"
      "        // Let the DefaultFieldFactory create the fields...\n"
      "        Field field = super.createField(container, itemId,\n"
      "                                        propertyId, uiContext);\n"
      "        \n"
      "        // ...and just set them as immediate.\n"
      "        ((AbstractField)field).setImmediate(true);\n"
      "        \n"
      "        return field;\n"
      "    }\n"
      "}\n"
      "...\n"
      "table.setTableFieldFactory(new ImmediateFieldFactory());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4733
#, no-c-format
msgid "If you generate the editing fields with the column generator, you avoid having to use such a field factory, but of course have to generate the fields for both normal and editable modes."
msgstr ""

#. Tag: para
#: chapter-components.xml:4739
#, no-c-format
msgid "shows a table with columns calculated (blue) and simply formatted (black) with column generators."
msgstr ""

#. Tag: title
#: chapter-components.xml:4746
#, no-c-format
msgid "Table with Generated Columns in Normal and Editable Mode"
msgstr ""

#. Tag: title
#: chapter-components.xml:4761
#, no-c-format
msgid "Formatting Table Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4763
#, no-c-format
msgid "The displayed values of properties shown in a table are normally formatted using the <methodname>toString()</methodname> method of each property. Customizing the format of a column can be done in several ways:"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4770
#, no-c-format
msgid "Using <classname>ColumnGenerator</classname> to generate a second column that is formatted. The original column needs to be set invisible. See <xref linkend=\"components.table.columngenerator\"/>."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4775
#, no-c-format
msgid "Using a <classname>PropertyFormatter</classname> as a proxy between the table and the data property. This also normally requires using an mediate container in the table."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4779
#, no-c-format
msgid "Overriding the default <methodname>formatPropertyValue()</methodname> in <classname>Table</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4784
#, no-c-format
msgid "As using a <classname>PropertyFormatter</classname> is generally much more awkward than overriding the <methodname>formatPropertyValue()</methodname>, its use is not described here."
msgstr ""

#. Tag: para
#: chapter-components.xml:4791
#, no-c-format
msgid "You can override <methodname>formatPropertyValue()</methodname> as is done in the following example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4796
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a table that overrides the default\n"
      "// property (column) format\n"
      "final Table table = new Table(\"Formatted Table\") {\n"
      "    @Override\n"
      "    protected String formatPropertyValue(Object rowId,\n"
      "            Object colId, Property property) {\n"
      "        // Format by property type\n"
      "        if (property.getType() == Date.class) {\n"
      "            SimpleDateFormat df =\n"
      "                new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n"
      "            return df.format((Date)property.getValue());\n"
      "        }\n"
      "\n"
      "        return super.formatPropertyValue(rowId, colId, property);\n"
      "    }\n"
      "};\n"
      "        \n"
      "// The table has some columns\n"
      "table.addContainerProperty(\"Time\", Date.class, null);\n"
      "        \n"
      "... Fill the table with data ...]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4798
#, no-c-format
msgid "You can also distinguish between columns by the <parameter>colId</parameter> parameter, which is the property ID of the column. <classname>DecimalFormat</classname> is useful for formatting decimal values."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4805
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[... in formatPropertyValue() ...\n"
      "} else if (\"Value\".equals(pid)) {\n"
      "    // Format a decimal value for a specific locale\n"
      "    DecimalFormat df = new DecimalFormat(\"#.00\",\n"
      "            new DecimalFormatSymbols(locale));\n"
      "    return df.format((Double) property.getValue());\n"
      "}\n"
      "...\n"
      "table.addContainerProperty(\"Value\", Double.class, null);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4807
#, no-c-format
msgid "A table with the formatted date and decimal value columns is shown in <xref linkend=\"figure.components.table.columnformatting\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4813
#, no-c-format
msgid "Formatted Table Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4824
#, no-c-format
msgid "You can use CSS for further styling of table rows, columns, and individual cells by using a <classname>CellStyleGenerator</classname>. It is described in <xref linkend=\"components.table.css\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4834
#, no-c-format
msgid "Styling the overall style of a <classname>Table</classname> can be done with the following CSS rules."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4839
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[.v-table {}\n"
      "  .v-table-header-wrap {}\n"
      "    .v-table-header {}\n"
      "      .v-table-header-cell {}\n"
      "        .v-table-resizer {} /* Column resizer handle. */\n"
      "        .v-table-caption-container {}\n"
      "  .v-table-body {}\n"
      "    .v-table-row-spacer {}\n"
      "    .v-table-table {}\n"
      "      .v-table-row {}\n"
      "        .v-table-cell-content {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4841
#, no-c-format
msgid "Notice that some of the widths and heights in a table are calculated dynamically and can not be set in CSS."
msgstr ""

#. Tag: title
#: chapter-components.xml:4847
#, no-c-format
msgid "Setting Individual Cell Styles"
msgstr ""

#. Tag: para
#: chapter-components.xml:4849
#, no-c-format
msgid "The <classname>Table.CellStyleGenerator</classname> interface allows you to set the CSS style for each individual cell in a table. You need to implement the <methodname>getStyle()</methodname>, which gets the row (item) and column (property) identifiers as parameters and can return a style name for the cell. The returned style name will be concatenated to prefix \"<literal>v-table-cell-content-</literal>\"."
msgstr ""

#. Tag: para
#: chapter-components.xml:4858
#, no-c-format
msgid "The <methodname>getStyle()</methodname> is called also for each row, so that the <parameter>propertyId</parameter> parameter is <literal>null</literal>. This allows setting a row style."
msgstr ""

#. Tag: para
#: chapter-components.xml:4864
#, no-c-format
msgid "Alternatively, you can use a <classname>Table.ColumnGenerator</classname> (see <xref linkend=\"components.table.columngenerator\"/>) to generate the actual UI components of the cells and add style names to them."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4871
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Table table = new Table(\"Table with Cell Styles\");\n"
      "table.addStyleName(\"checkerboard\");\n"
      "\n"
      "// Add some columns in the table. In this example, the property\n"
      "// IDs of the container are integers so we can determine the\n"
      "// column number easily.\n"
      "table.addContainerProperty(\"0\", String.class, null, \"\", null, null);\n"
      "for (int i=0; i<8; i++)\n"
      "    table.addContainerProperty(\"\"+(i+1), String.class, null,\n"
      "                         String.valueOf((char) (65+i)), null, null);\n"
      "\n"
      "// Add some items in the table.\n"
      "table.addItem(new Object[]{\n"
      "    \"1\", \"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"}, new Integer(0));\n"
      "table.addItem(new Object[]{\n"
      "    \"2\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"}, new Integer(1));\n"
      "for (int i=2; i<6; i++)\n"
      "    table.addItem(new Object[]{String.valueOf(i+1), \n"
      "                 \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"}, new Integer(i));\n"
      "table.addItem(new Object[]{\n"
      "    \"7\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"}, new Integer(6));\n"
      "table.addItem(new Object[]{\n"
      "    \"8\", \"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"}, new Integer(7));\n"
      "table.setPageLength(8);\n"
      "\n"
      "// Set cell style generator\n"
      "table.setCellStyleGenerator(new Table.CellStyleGenerator() {\n"
      "    public String getStyle(Object itemId, Object propertyId) {\n"
      "        // Row style setting, not relevant in this example.\n"
      "        if (propertyId == null)\n"
      "            return \"green\"; // Will not actually be visible\n"
      "\n"
      "        int row = ((Integer)itemId).intValue();\n"
      "        int col = Integer.parseInt((String)propertyId);\n"
      "        \n"
      "        // The first column.\n"
      "        if (col == 0)\n"
      "            return \"rowheader\";\n"
      "        \n"
      "        // Other cells.\n"
      "        if ((row+col)%2 == 0)\n"
      "            return \"black\";\n"
      "        else\n"
      "            return \"white\";\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4873
#, no-c-format
msgid "You can then style the cells, for example, as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4877
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* Center the text in header. */\n"
      ".v-table-header-cell {\n"
      "    text-align: center;\n"
      "}\n"
      "\n"
      "/* Basic style for all cells. */\n"
      ".v-table-checkerboard .v-table-cell-content {\n"
      "    text-align: center;\n"
      "    vertical-align: middle;\n"
      "    padding-top: 12px;\n"
      "    width: 20px;\n"
      "    height: 28px;\n"
      "}\n"
      "\n"
      "/* Style specifically for the row header cells. */\n"
      ".v-table-cell-content-rowheader {\n"
      "        background: #E7EDF3\n"
      "     url(../default/table/img/header-bg.png) repeat-x scroll 0 0;\n"
      "}\n"
      "\n"
      "/* Style specifically for the \"white\" cells. */\n"
      ".v-table-cell-content-white {\n"
      "    background: white;\n"
      "    color: black;\n"
      "}\n"
      "\n"
      "/* Style specifically for the \"black\" cells. */\n"
      ".v-table-cell-content-black {\n"
      "    background: black;\n"
      "    color: white;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4879
#, no-c-format
msgid "The table will look as shown in <xref linkend=\"figure.components.table.cell-style\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4885
#, no-c-format
msgid "Cell Style Generator for a Table"
msgstr ""

#. Tag: classname
#: chapter-components.xml:4903
#, no-c-format
msgid "Tree"
msgstr ""

#. Tag: para
#: chapter-components.xml:4905
#, no-c-format
msgid "The <classname>Tree</classname> component allows a natural way to represent data that has hierarchical relationships, such as filesystems or message threads. The <classname>Tree</classname> component in Vaadin works much like the tree components of most modern desktop user interface toolkits, for example in directory browsing."
msgstr ""

#. Tag: para
#: chapter-components.xml:4913
#, no-c-format
msgid "The typical use of the <classname>Tree</classname> component is for displaying a hierachical menu, like a menu on the left side of the screen, as in <xref linkend=\"figure.components.tree\"/>, or for displaying filesystems or other hierarchical datasets. The <parameter>menu</parameter> style makes the appearance of the tree more suitable for this purpose."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4921
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[final Object[][] planets = new Object[][]{\n"
      "        new Object[]{\"Mercury\"}, \n"
      "        new Object[]{\"Venus\"},\n"
      "        new Object[]{\"Earth\", \"The Moon\"},    \n"
      "        new Object[]{\"Mars\", \"Phobos\", \"Deimos\"},\n"
      "        new Object[]{\"Jupiter\", \"Io\", \"Europa\", \"Ganymedes\",\n"
      "                                \"Callisto\"},\n"
      "        new Object[]{\"Saturn\",  \"Titan\", \"Tethys\", \"Dione\",\n"
      "                                \"Rhea\", \"Iapetus\"},\n"
      "        new Object[]{\"Uranus\",  \"Miranda\", \"Ariel\", \"Umbriel\",\n"
      "                                \"Titania\", \"Oberon\"},\n"
      "        new Object[]{\"Neptune\", \"Triton\", \"Proteus\", \"Nereid\",\n"
      "                                \"Larissa\"}};\n"
      "        \n"
      "Tree tree = new Tree(\"The Planets and Major Moons\");\n"
      "\n"
      "/* Add planets as root items in the tree. */\n"
      "for (int i=0; i<planets.length; i++) {\n"
      "    String planet = (String) (planets[i][0]);\n"
      "    tree.addItem(planet);\n"
      "    \n"
      "    if (planets[i].length == 1) {\n"
      "        // The planet has no moons so make it a leaf.\n"
      "        tree.setChildrenAllowed(planet, false);\n"
      "    } else {\n"
      "        // Add children (moons) under the planets.\n"
      "        for (int j=1; j<planets[i].length; j++) {\n"
      "            String moon = (String) planets[i][j];\n"
      "            \n"
      "            // Add the item as a regular item.\n"
      "            tree.addItem(moon);\n"
      "            \n"
      "            // Set it to be a child.\n"
      "            tree.setParent(moon, planet);\n"
      "            \n"
      "            // Make the moons look like leaves.\n"
      "            tree.setChildrenAllowed(moon, false);\n"
      "        }\n"
      "\n"
      "        // Expand the subtree.\n"
      "        tree.expandItemsRecursively(planet);\n"
      "    }\n"
      "}\n"
      "\n"
      "main.addComponent(tree);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4923
#, no-c-format
msgid "below shows the tree from the code example in a practical situation."
msgstr ""

#. Tag: title
#: chapter-components.xml:4929
#, no-c-format
msgid "A <classname>Tree</classname> Component as a Menu"
msgstr ""

#. Tag: para
#: chapter-components.xml:4940
#, no-c-format
msgid "You can read or set the currently selected item by the value property of the <classname>Tree</classname> component, that is, with <methodname>getValue()</methodname> and <methodname>setValue()</methodname>. When the user clicks an item on a tree, the tree will receive an <classname>ValueChangeEvent</classname>, which you can catch with a <classname>ValueChangeListener</classname>. To receive the event immediately after the click, you need to set the tree as <classname>setImmediate(true)</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4951
#, no-c-format
msgid "The <classname>Tree</classname> component uses <classname>Container</classname> data sources much like the <classname>Table</classname> component, with the addition that it also utilizes hierarchy information maintained by a <classname>HierarchicalContainer</classname>. The contained items can be of any item type supported by the container. The default container and its <methodname>addItem()</methodname> assume that the items are strings and the string value is used as the item ID."
msgstr ""

#. Tag: classname
#: chapter-components.xml:4964
#, no-c-format
msgid "MenuBar"
msgstr ""

#. Tag: para
#: chapter-components.xml:4966
#, no-c-format
msgid "The <classname>MenuBar</classname> component allows creating horizontal dropdown menus, much like the main menu in desktop applications."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4971
#, no-c-format
msgid ""
      "<![CDATA[// Create a menu bar\n"
      "final MenuBar menubar = new MenuBar();\n"
      "main.addComponent(menubar);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4973
#, no-c-format
msgid "You insert the top-level menu items to a <classname>MenuBar</classname> object with the <methodname>addItem()</methodname> method. It takes a string label, an icon resource, and a command as its parameters. The icon and command are not required and can be <parameter>null</parameter>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4980
#, no-c-format
msgid ""
      "<![CDATA[MenuBar.MenuItem beverages =\n"
      "      menubar.addItem(\"Beverages\", null, null);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4982
#, no-c-format
msgid "The command is called when the user clicks the item. A menu command is a class that implements the <classname>MenuBar.Command</classname> interface."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4987
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// A feedback component\n"
      "final Label selection = new Label(\"-\");\n"
      "main.addComponent(selection);\n"
      "\n"
      "// Define a common menu command for all the menu items.\n"
      "MenuBar.Command mycommand = new MenuBar.Command() {\n"
      "    public void menuSelected(MenuItem selectedItem) {\n"
      "        selection.setValue(\"Ordered a \" +\n"
      "                           selectedItem.getText() +\n"
      "                           \" from menu.\");\n"
      "    }  \n"
      "};]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4989
#, no-c-format
msgid "The <methodname>addItem()</methodname> method returns a <classname>MenuBar.MenuItem</classname> object, which you can use to add sub-menu items. The <classname>MenuItem</classname> has an identical <methodname>addItem()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4996
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Put some items in the menu hierarchically\n"
      "MenuBar.MenuItem beverages =\n"
      "    menubar.addItem(\"Beverages\", null, null);\n"
      "MenuBar.MenuItem hot_beverages =\n"
      "    beverages.addItem(\"Hot\", null, null);\n"
      "hot_beverages.addItem(\"Tea\", null, mycommand);\n"
      "hot_beverages.addItem(\"Coffee\", null, mycommand);\n"
      "MenuBar.MenuItem cold_beverages =\n"
      "    beverages.addItem(\"Cold\", null, null);\n"
      "cold_beverages.addItem(\"Milk\", null, mycommand);\n"
      "\n"
      "// Another top-level item\n"
      "MenuBar.MenuItem snacks =\n"
      "    menubar.addItem(\"Snacks\", null, null);\n"
      "snacks.addItem(\"Weisswurst\", null, mycommand);\n"
      "snacks.addItem(\"Salami\", null, mycommand);\n"
      "\n"
      "// Yet another top-level item\n"
      "MenuBar.MenuItem services =\n"
      "    menubar.addItem(\"Services\", null, null);\n"
      "services.addItem(\"Car Service\", null, mycommand);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4998
#, no-c-format
msgid "The menu will look as follows:"
msgstr ""

#. Tag: title
#: chapter-components.xml:5003
#, no-c-format
msgid "Menu Bar"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5017
#, no-c-format
msgid ""
      "<![CDATA[.v-menubar { }\n"
      ".gwt-MenuItem {}\n"
      ".gwt-MenuItem-selected {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5019
#, no-c-format
msgid "The menu bar has the overall style name <literal>.v-menubar</literal>. Each menu item has <literal>.gwt-MenuItem</literal> style normally and <literal>.gwt-MenuItem-selected</literal> when the item is selected."
msgstr ""

#. Tag: title
#: chapter-components.xml:5030
#, no-c-format
msgid "Embedded Resources"
msgstr ""

#. Tag: para
#: chapter-components.xml:5032
#, no-c-format
msgid "You can embed images in Vaadin UIs with the <classname>Image</classname> component, Adobe Flash graphics with <classname>Flash</classname>, and other web content with <classname>BrowserFrame</classname>. There is also a generic <classname>Embedded</classname> component for embedding other object types. The embedded content is referenced as <emphasis>resources</emphasis>, as described in <xref linkend=\"application.resources\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5041
#, no-c-format
msgid "The following example displays an image as a class resource loaded with the class loader:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5046
#, no-c-format
msgid ""
      "<![CDATA[Image image = new Image(\"Yes, logo:\",\n"
      "    new ClassResource(\"vaadin-logo.png\"));\n"
      "main.addComponent(image);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5048
#, no-c-format
msgid "The caption can be given as null to disable it. An empty string displays an empty caption which takes a bit space. The caption is managed by the containing layout."
msgstr ""

#. Tag: para
#: chapter-components.xml:5054
#, no-c-format
msgid "You can set an altenative text for an embedded resource with <methodname>setAlternateText()</methodname>, which can be shown if images are disabled in the browser for some reason. The text can be used for accessibility purposes, such as for text-to-speech generation."
msgstr ""

#. Tag: title
#: chapter-components.xml:5062
#, no-c-format
msgid "Embedded <classname>Image</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5064
#, no-c-format
msgid "The <classname>Image</classname> component allows embedding an image resource in a Vaadin UI."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5069
#, no-c-format
msgid ""
      "<![CDATA[// Serve the image from the theme\n"
      "Resource res = new ThemeResource(\"img/myimage.png\");\n"
      "\n"
      "// Display the image without caption\n"
      "Image image = new Image(null, res);\n"
      "layout.addComponent(image);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5072
#, no-c-format
msgid "The <classname>Image</classname> component has by default undefined size in both directions, so it will automatically fit the size of the embedded image. <indexterm><primary>scroll bars</primary></indexterm> If you want scrolling with scroll bars, you can put the image inside a <classname>Panel</classname> that has a defined size to enable scrolling, as described in <xref linkend=\"layout.panel.scrolling\"/>. You can also put it inside some other component container and set the <literal>overflow: auto</literal> CSS property for the container element in a theme to enable automatic scrollbars."
msgstr ""

#. Tag: indexterm
#: chapter-components.xml:5084
#, no-c-format
msgid "overflow CSS property"
msgstr ""

#. Tag: title
#: chapter-components.xml:5090
#, no-c-format
msgid "Generating and Reloading Images"
msgstr ""

#. Tag: para
#: chapter-components.xml:5092
#, no-c-format
msgid "You can also generate the image content dynamically using a <classname>StreamResource</classname>, as described in <xref linkend=\"application.resources.stream\"/>, or with a <classname>RequestHandler</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5099
#, no-c-format
msgid "If the image changes, the browser needs to reload it. Simply updating the stream resource is not enough. Because of how caching is handled in some browsers, you can cause a reload easiest by renaming the filename of the resource with a unique name, such as one including a timestamp. You should set cache time to zero with <methodname>setCacheTime()</methodname> for the resource object when you create it."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5111
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create the stream resource with some initial filename\n"
      "StreamResource imageResource =\n"
      "    new StreamResource(imageSource, \"initial-filename.png\");\n"
      "\n"
      "// Instruct browser not to cache the image\n"
      "imageResource.setCacheTime(0);\n"
      "\n"
      "// Display the image\n"
      "Image image = new Image(null, imageResource);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5113
#, no-c-format
msgid "When refreshing, you also need to call <methodname>markAsDirty()</methodname> for the <classname>Image</classname> object."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5119
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// This needs to be done, but is not sufficient\n"
      "image.markAsDirty();\n"
      "\n"
      "// Generate a filename with a timestamp\n"
      "SimpleDateFormat df = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\");\n"
      "String filename = \"myfilename-\" + df.format(new Date()) + \".png\";\n"
      "\n"
      "// Replace the filename in the resource\n"
      "imageResource.setFilename(makeImageFilename());]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5124
#, no-c-format
msgid "Adobe <classname>Flash</classname> Graphics"
msgstr ""

#. Tag: para
#: chapter-components.xml:5126
#, no-c-format
msgid "The <classname>Flash</classname> component allows embedding Adobe Flash animations in Vaadin UIs."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5131
#, no-c-format
msgid ""
      "<![CDATA[Flash flash = new Flash(null,\n"
      "    new ThemeResource(\"img/vaadin_spin.swf\"));\n"
      "layout.addComponent(flash);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5133
#, no-c-format
msgid "You can set Flash parameters with <methodname>setParameter()</methodname>, which takes a parameter's name and value as strings. You can also set the <parameter>codeBase</parameter>, <parameter>archive</parameter>, and <parameter>standBy</parameter> attributes for the Flash object element in HTML."
msgstr ""

#. Tag: classname
#: chapter-components.xml:5143
#, no-c-format
msgid "BrowserFrame"
msgstr ""

#. Tag: para
#: chapter-components.xml:5145
#, no-c-format
msgid "The <classname>BrowserFrame</classname> allows embedding web content inside an HTML <tag>&lt;iframe&gt;</tag> element. You can refer to an external URL with <classname>ExternalResource</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5151
#, no-c-format
msgid "As the <classname>BrowserFrame</classname> has undefined size by default, it is critical that you define a meaningful size for it, either fixed or relative."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5157
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[BrowserFrame browser = new BrowserFrame(\"Browser\",\n"
      "    new ExternalResource(\"http://demo.vaadin.com/sampler/\"));\n"
      "browser.setWidth(\"600px\");\n"
      "browser.setHeight(\"400px\");\n"
      "layout.addComponent(browser);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5159
#, no-c-format
msgid "Notice that web pages can prevent embedding them in an <tag>&lt;iframe&gt;</tag>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5165
#, no-c-format
msgid "Generic <classname>Embedded</classname> Objects"
msgstr ""

#. Tag: para
#: chapter-components.xml:5167
#, no-c-format
msgid "The generic <classname>Embedded</classname> component allows embedding all sorts of objects, such as SVG graphics, Java applets, and PDF documents, in addition to the images, Flash graphics, and browser frames which you can embed with the specialized components."
msgstr ""

#. Tag: para
#: chapter-components.xml:5174
#, no-c-format
msgid "For example, to display a Flash animation:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5178
#, no-c-format
msgid ""
      "<![CDATA[// A resource reference to some object\n"
      "Resource res = new ThemeResource(\"img/vaadin_spin.swf\");\n"
      "\n"
      "// Display the object\n"
      "Embedded object = new Embedded(\"My Object\", res);\n"
      "layout.addComponent(object);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5180
#, no-c-format
msgid "Or an SVG image:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5184
#, no-c-format
msgid ""
      "<![CDATA[// A resource reference to some object\n"
      "Resource res = new ThemeResource(\"img/reindeer.svg\");\n"
      "\n"
      "// Display the object\n"
      "Embedded object = new Embedded(\"My SVG\", res);\n"
      "object.setMimeType(\"image/svg+xml\"); // Unnecessary\n"
      "layout.addComponent(object);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5186
#, no-c-format
msgid "The MIME type of the objects is usually detected automatically from the filename extension with the <classname>FileTypeResolver</classname> utility in Vaadin. If not, you can set it explicitly with <methodname>setMimeType()</methodname>, as was done in the example above (where it was actually unnecessary)."
msgstr ""

#. Tag: para
#: chapter-components.xml:5194
#, no-c-format
msgid "Some embeddable object types may require special support in the browser. You should make sure that there is a proper fallback mechanism if the browser does not support the embedded type."
msgstr ""

#. Tag: classname
#: chapter-components.xml:5203
#, no-c-format
msgid "Upload"
msgstr ""

#. Tag: para
#: chapter-components.xml:5205
#, no-c-format
msgid "The <classname>Upload</classname> component allows a user to upload files to the server. It displays a file name entry box, a file selection button, and an upload submit button. The user can either write the filename in the text area or click the <guibutton>Browse</guibutton> button to select a file. After the file is selected, the user sends the file by clicking the upload submit button."
msgstr ""

#. Tag: para
#: chapter-components.xml:5214
#, no-c-format
msgid "Uploading requires a receiver that implements <interfacename>Upload.Receiver</interfacename> to provide an output stream to which the upload is written by the server."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5220
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[Upload upload = new Upload(\"Upload it here\", receiver);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5223
#, no-c-format
msgid "Upload Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5231
#, no-c-format
msgid "You can set the text of the upload button with <methodname>setButtonCaption()</methodname>. Note that it is difficult to change the caption or look of the <guibutton>Browse</guibutton> button. This is a security feature of web browsers. The language of the <guibutton>Browse</guibutton> button is determined by the browser, so if you wish to have the language of the <classname>Upload</classname> component consistent, you will have to use the same language in your application."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5241
#, no-c-format
msgid "<![CDATA[upload.setButtonCaption(\"Upload Now\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5243
#, no-c-format
msgid "You can also hide the upload button with <literal>.v-upload .v-button {display: none}</literal> in theme, have custom logic for starting the upload, and call <methodname>startUpload()</methodname> to start it. If the upload component has <methodname>setImmediate(true)</methodname> enabled, uploading starts immediately after choosing the file."
msgstr ""

#. Tag: title
#: chapter-components.xml:5255
#, no-c-format
msgid "Receiving Upload Data"
msgstr ""

#. Tag: para
#: chapter-components.xml:5257
#, no-c-format
msgid "The uploaded files are typically stored as files in a file system, in a database, or as temporary objects in memory. The upload component writes the received data to an <classname>java.io.OutputStream</classname> so you have plenty of freedom in how you can process the upload content."
msgstr ""

#. Tag: para
#: chapter-components.xml:5265
#, no-c-format
msgid "To use the <classname>Upload</classname> component, you need to implement the <classname>Upload.Receiver</classname> interface. The <methodname>receiveUpload()</methodname> method of the receiver is called when the user clicks the submit button. The method must return an <classname>OutputStream</classname>. To do this, it typically creates a file or a memory buffer to which the stream is written. The method gets the file name and MIME type of the file, as reported by the browser."
msgstr ""

#. Tag: para
#: chapter-components.xml:5275
#, no-c-format
msgid "While uploading, the upload progress can be monitored with an <interfacename>Upload.ProgressListener</interfacename>. The <methodname>updateProgress()</methodname> method gets the number of read bytes and the content length as parameters. The content length is reported by the browser, is not reliable, and may be -1 if unknown. It is therefore recommended to follow the upload progress and check the allowed size in a progress listener. Upload can be terminated by calling <methodname>interruptUpload()</methodname> on the upload component. You may want to use a <classname>ProgressBar</classname> to visualize the progress, and in indeterminate mode if the content length is not known."
msgstr ""

#. Tag: para
#: chapter-components.xml:5288
#, no-c-format
msgid "When an upload is finished, successfully or unsuccessfully, the <classname>Upload</classname> component will emit the <classname>Upload.FinishedEvent</classname> event, which you can handle with an <classname>Upload.FinishedListener</classname> added to the upload component. The event object will include the file name, MIME type, and final length of the file. More specific <classname>Upload.FailedEvent</classname> and <classname>Upload.SucceededEvent</classname> events will be called in the cases where the upload failed or succeeded, respectively."
msgstr ""

#. Tag: para
#: chapter-components.xml:5299
#, no-c-format
msgid "The following example uploads images to <filename>/tmp/uploads</filename> directory in (UNIX) filesystem (the directory must exist or the upload fails). The component displays the uploaded image in an <classname>Image</classname> component."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5307
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Show uploaded file in this placeholder\n"
      "final Embedded image = new Embedded(\"Uploaded Image\");\n"
      "image.setVisible(false);\n"
      "\n"
      "// Implement both receiver that saves upload in a file and\n"
      "// listener for successful upload\n"
      "class ImageUploader implements Receiver, SucceededListener {\n"
      "    public File file;\n"
      "    \n"
      "    public OutputStream receiveUpload(String filename,\n"
      "                                      String mimeType) {\n"
      "        // Create upload stream\n"
      "        FileOutputStream fos = null; // Stream to write to\n"
      "        try {\n"
      "            // Open the file for writing.\n"
      "            file = new File(\"/tmp/uploads/\" + filename);\n"
      "            fos = new FileOutputStream(file);\n"
      "        } catch (final java.io.FileNotFoundException e) {\n"
      "            new Notification(\"Could not open file<br/>\",\n"
      "                             e.getMessage(),\n"
      "                             Notification.Type.ERROR_MESSAGE)\n"
      "                .show(Page.getCurrent());\n"
      "            return null;\n"
      "        }\n"
      "        return fos; // Return the output stream to write to\n"
      "    }\n"
      "\n"
      "    public void uploadSucceeded(SucceededEvent event) {\n"
      "        // Show the uploaded file in the image viewer\n"
      "        image.setVisible(true);\n"
      "        image.setSource(new FileResource(file));\n"
      "    }\n"
      "};\n"
      "ImageUploader receiver = new ImageUploader(); \n"
      "\n"
      "// Create the upload with a caption and set receiver later\n"
      "Upload upload = new Upload(\"Upload Image Here\", receiver);\n"
      "upload.setButtonCaption(\"Start Upload\");\n"
      "upload.addSucceededListener(receiver);\n"
      "        \n"
      "// Put the components in a panel\n"
      "Panel panel = new Panel(\"Cool Image Storage\");\n"
      "Layout panelContent = new VerticalLayout();\n"
      "panelContent.addComponents(upload, image);\n"
      "panel.setContent(panelContent);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5309
#, no-c-format
msgid "Note that the example does not check the type of the uploaded files in any way, which will cause an error if the content is anything else but an image. The program also assumes that the MIME type of the file is resolved correctly based on the file name extension. After uploading an image, the component will look as shown in <xref linkend=\"figure.ui.upload.example\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5318
#, no-c-format
msgid "Image Upload Example"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5330
#, no-c-format
msgid ""
      "<![CDATA[.v-upload { }\n"
      "  .gwt-FileUpload { }\n"
      "  .v-button { }\n"
      "    .v-button-wrap { }\n"
      "      .v-button-caption { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5332
#, no-c-format
msgid "The <classname>Upload</classname> component has an overall <literal>v-upload</literal> style. The upload button has the same structure and style as a regular <classname>Button</classname> component."
msgstr ""

#. Tag: classname
#: chapter-components.xml:5341
#, no-c-format
msgid "ProgressBar"
msgstr ""

#. Tag: para
#: chapter-components.xml:5343
#, no-c-format
msgid "The <classname>ProgressBar</classname> component allows displaying the progress of a task graphically. The progress is specified as a floating-point value between 0.0 and 1.0."
msgstr ""

#. Tag: title
#: chapter-components.xml:5350
#, no-c-format
msgid "The Progress Bar Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5358
#, no-c-format
msgid "To display upload progress with the <classname>Upload</classname> component, you can update the progress bar in a <interfacename>ProgressListener</interfacename>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5364
#, no-c-format
msgid "When the position of a progress bar is done in a background thread, the change is not shown in the browser immediately. You need to use either polling or server push to update the browser. You can enable polling with <methodname>setPollInterval()</methodname> in the current UI instance. See <xref linkend=\"advanced.push\"/> for instructions about using server push. Whichever method you use to update the UI, it is important to lock the user session by modifying the progress bar value inside <methodname>access()</methodname> call, as illustrated in the following example and described in <xref linkend=\"advanced.push.running\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5376
#, no-c-format
msgid ""
      "<![CDATA[final ProgressBar bar = new ProgressBar(0.0f);\n"
      "layout.addComponent(bar);\n"
      "        \n"
      "layout.addComponent(new Button(\"Increase\",\n"
      "    new ClickListener() {\n"
      "    @Override\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        float current = bar.getValue();\n"
      "        if (current < 1.0f)\n"
      "            bar.setValue(current + 0.10f);\n"
      "    }\n"
      "}));]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5379
#, no-c-format
msgid "Indeterminate Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:5381
#, no-c-format
msgid "In the indeterminate mode, a non-progressive indicator is displayed continuously. The indeterminate indicator is a circular wheel in the built-in themes. The progress value has no meaning in the indeterminate mode."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5388
#, no-c-format
msgid ""
      "<![CDATA[ProgressBar bar = new ProgressBar();\n"
      "bar.setIndeterminate(true);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5391
#, no-c-format
msgid "Indeterminate Progress Bar"
msgstr ""

#. Tag: title
#: chapter-components.xml:5401
#, no-c-format
msgid "Doing Heavy Computation"
msgstr ""

#. Tag: para
#: chapter-components.xml:5403
#, no-c-format
msgid "The progress indicator is often used to display the progress of a heavy server-side computation task, often running in a background thread. The UI, including the progress bar, can be updated either with polling or by using server push. When doing so, you must ensure thread-safety, most easily by updating the UI inside a <methodname>UI.access()</methodname> call in a <interfacename>Runnable</interfacename>, as described in <xref linkend=\"advanced.push.running\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5413
#, no-c-format
msgid "In the following example, we create a thread in the server to do some \"heavy work\" and use polling to update the UI. All the thread needs to do is to set the value of the progress bar with <methodname>setValue()</methodname> and the current progress is displayed automatically when the browser polls the server."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5421
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[HorizontalLayout barbar = new HorizontalLayout();\n"
      "layout.addComponent(barbar);\n"
      "        \n"
      "// Create the indicator, disabled until progress is started\n"
      "final ProgressBar progress = new ProgressBar(new Float(0.0));\n"
      "progress.setEnabled(false);\n"
      "barbar.addComponent(progress);\n"
      "        \n"
      "final Label status = new Label(\"not running\");\n"
      "barbar.addComponent(status);\n"
      "\n"
      "// A button to start progress\n"
      "final Button button = new Button(\"Click to start\");\n"
      "layout.addComponent(button);\n"
      "\n"
      "// A thread to do some work\n"
      "class WorkThread extends Thread {\n"
      "    // Volatile because read in another thread in access()\n"
      "    volatile double current = 0.0;\n"
      "\n"
      "    @Override\n"
      "    public void run() {\n"
      "        // Count up until 1.0 is reached\n"
      "        while (current < 1.0) {\n"
      "            current += 0.01;\n"
      "\n"
      "            // Do some \"heavy work\"\n"
      "            try {\n"
      "                sleep(50); // Sleep for 50 milliseconds\n"
      "            } catch (InterruptedException e) {}\n"
      "\n"
      "            // Update the UI thread-safely\n"
      "            UI.getCurrent().access(new Runnable() {\n"
      "                @Override\n"
      "                public void run() {\n"
      "                    progress.setValue(new Float(current));\n"
      "                    if (current < 1.0)\n"
      "                        status.setValue(\"\" +\n"
      "                            ((int)(current*100)) + \"% done\");\n"
      "                    else\n"
      "                        status.setValue(\"all done\");\n"
      "                }\n"
      "            });\n"
      "        }\n"
      "        \n"
      "        // Show the \"all done\" for a while\n"
      "        try {\n"
      "            sleep(2000); // Sleep for 2 seconds\n"
      "        } catch (InterruptedException e) {}\n"
      "\n"
      "        // Update the UI thread-safely\n"
      "        UI.getCurrent().access(new Runnable() {\n"
      "            @Override\n"
      "            public void run() {\n"
      "                // Restore the state to initial\n"
      "                progress.setValue(new Float(0.0));\n"
      "                progress.setEnabled(false);\n"
      "                        \n"
      "                // Stop polling\n"
      "                UI.getCurrent().setPollInterval(-1);\n"
      "                \n"
      "                button.setEnabled(true);\n"
      "                status.setValue(\"not running\");\n"
      "            }\n"
      "        });\n"
      "    }\n"
      "}\n"
      "\n"
      "// Clicking the button creates and runs a work thread\n"
      "button.addClickListener(new Button.ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        final WorkThread thread = new WorkThread();\n"
      "        thread.start();\n"
      "\n"
      "        // Enable polling and set frequency to 0.5 seconds\n"
      "        UI.getCurrent().setPollInterval(500);\n"
      "\n"
      "        // Disable the button until the work is done\n"
      "        progress.setEnabled(true);\n"
      "        button.setEnabled(false);\n"
      "\n"
      "        status.setValue(\"running...\");\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5423
#, no-c-format
msgid "The example is illustrated in <xref linkend=\"figure.components.progressbar.thread\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5429
#, no-c-format
msgid "Doing Heavy Work"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5441
#, no-c-format
msgid ""
      "<![CDATA[.v-progressbar, v-progressbar-indeterminate {}\n"
      "  .v-progressbar-wrapper {}\n"
      "    .v-progressbar-indicator {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5443
#, no-c-format
msgid "The progress bar has a <literal>v-progressbar</literal> base style. The animation is the background of the element with <literal>v-progressbar-wrapper</literal> style, by default an animated GIF image. The progress is an element with <literal>v-progressbar-indicator</literal> style inside the wrapper, and therefore displayed on top of it. When the progress element grows, it covers more and more of the animated background."
msgstr ""

#. Tag: para
#: chapter-components.xml:5453
#, no-c-format
msgid "In the indeterminate mode, the top element also has the <literal>v-progressbar-indeterminate</literal> style. The built-in themes simply display the animated GIF in the top element and have the inner elements disabled."
msgstr ""

#. Tag: classname
#: chapter-components.xml:5463
#, no-c-format
msgid "Slider"
msgstr ""

#. Tag: para
#: chapter-components.xml:5465
#, no-c-format
msgid "The <classname>Slider</classname> is a vertical or horizontal bar that allows setting a numeric value within a defined range by dragging a bar handle with the mouse. The value is shown when dragging the handle."
msgstr ""

#. Tag: para
#: chapter-components.xml:5471
#, no-c-format
msgid "<classname>Slider</classname> has a number of different constructors that take a combination of the caption, <emphasis>minimum</emphasis> and <emphasis>maximum</emphasis> value, <emphasis>resolution</emphasis>, and the <emphasis>orientation</emphasis> of the slider."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5478
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a vertical slider\n"
      "final Slider vertslider = new Slider(1, 100);\n"
      "vertslider.setOrientation(SliderOrientation.VERTICAL);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5481
#, no-c-format
msgid "Slider Properties"
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5483
#, no-c-format
msgid "<emphasis>min</emphasis>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5485
#, no-c-format
msgid "Minimum value of the slider range. The default is 0.0."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5491
#, no-c-format
msgid "<emphasis>max</emphasis>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5493
#, no-c-format
msgid "Maximum value of the slider range. The default is 100.0."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5499
#, no-c-format
msgid "resolution"
msgstr ""

#. Tag: para
#: chapter-components.xml:5501
#, no-c-format
msgid "The number of digits after the decimal point. The default is 0."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5507
#, no-c-format
msgid "orientation"
msgstr ""

#. Tag: para
#: chapter-components.xml:5509
#, no-c-format
msgid "The orientation can be either horizontal (<parameter>SliderOrientation.HORIZONTAL</parameter>) or vertical (<parameter>SliderOrientation.VERTICAL</parameter>). The default is horizontal."
msgstr ""

#. Tag: para
#: chapter-components.xml:5519
#, no-c-format
msgid "As the <classname>Slider</classname> is a field component, you can handle value changes with a <classname>ValueChangeListener</classname>. The value of the <classname>Slider</classname> field is a <classname>Double</classname> object."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5526
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Shows the value of the vertical slider\n"
      "final Label vertvalue = new Label();\n"
      "vertvalue.setSizeUndefined();\n"
      "\n"
      "// Handle changes in slider value.\n"
      "vertslider.addValueChangeListener(\n"
      "    new Property.ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        double value = (Double) vertslider.getValue();\n"
      "\n"
      "        // Use the value\n"
      "        box.setHeight((float) value, Sizeable.UNITS_PERCENTAGE);\n"
      "        vertvalue.setValue(String.valueOf(value));\n"
      "    }\n"
      "});\n"
      "\n"
      "// The slider has to be immediate to send the changes\n"
      "// immediately after the user drags the handle.\n"
      "vertslider.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5528
#, no-c-format
msgid "You can set the value with the <methodname>setValue()</methodname> method defined in <classname>Slider</classname> that takes the value as a native double value. The setter can throw a <classname>ValueOutOfBoundsException</classname>, which you must handle."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5535
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Set the initial value. This has to be set after the\n"
      "// listener is added if we want the listener to handle\n"
      "// also this value change.\n"
      "try {\n"
      "        vertslider.setValue(50.0);\n"
      "} catch (ValueOutOfBoundsException e) {\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5537
#, no-c-format
msgid "Alternatively, you can use the regular <methodname>setValue(Object)</methodname>, which does not do bounds checking."
msgstr ""

#. Tag: para
#: chapter-components.xml:5542
#, no-c-format
msgid "shows both vertical (from the code examples) and horizontal sliders that control the size of a box. The slider values are displayed also in separate labels."
msgstr ""

#. Tag: title
#: chapter-components.xml:5549
#, no-c-format
msgid "The <classname>Slider</classname> Component"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5563
#, no-c-format
msgid ""
      "<![CDATA[.v-slider {}\n"
      ".v-slider-base {}\n"
      ".v-slider-handle {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5565
#, no-c-format
msgid "The enclosing style for the <classname>Slider</classname> is <literal>v-slider</literal>. The slider bar has style <literal>v-slider-base</literal>. Even though the handle is higher (for horizontal slider) or wider (for vertical slider) than the bar, the handle element is nevertheless contained within the slider bar element. The appearance of the handle comes from a background image defined in the <emphasis>background</emphasis> CSS property."
msgstr ""

#. Tag: classname
#: chapter-components.xml:5578
#, no-c-format
msgid "Calendar"
msgstr ""

#. Tag: para
#: chapter-components.xml:5580
#, no-c-format
msgid "The <classname>Calendar</classname> component allows organizing and displaying calendar events. The main features of the calendar include:"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5586
#, no-c-format
msgid "Monthly, weekly, and daily views"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5589
#, no-c-format
msgid "Two types of events: all-day events and events with a time range"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5592
#, no-c-format
msgid "Add events directly, from a <classname>Container</classname>, or with an event provider"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5595
#, no-c-format
msgid "Control the range of the visible dates"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5598
#, no-c-format
msgid "Selecting and editing date or time range by dragging"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5601
#, no-c-format
msgid "Drag and drop events to calendar"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5604
#, no-c-format
msgid "Support for localization and timezones"
msgstr ""

#. Tag: para
#: chapter-components.xml:5609
#, no-c-format
msgid "User interaction with the calendar elements, such as date and week captions as well as events, is handled with event listeners. Also date/time range selections, event dragging, and event resizing can be listened by the server. The weekly view has navigation buttons to navigate forward and backward in time. These actions are also listened by the server. Custom navigation can be implemented using event handlers<phrase condition=\"web\">, as described in <xref linkend=\"components.calendar.customizing\"/></phrase>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5619
#, no-c-format
msgid "The data source of a calendar can be practically anything, as its events are queried dynamically by the component. You can bind the calendar to a Vaadin container, or to any other data source by implementing an <emphasis>event provider</emphasis>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5626
#, no-c-format
msgid "The <classname>Calendar</classname> has undefined size by default and you usually want to give it a fixed or relative size, for example as follows."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5631
#, no-c-format
msgid ""
      "<![CDATA[Calendar cal = new Calendar(\"My Calendar\");\n"
      "cal.setWidth(\"600px\");\n"
      "cal.setHeight(\"300px\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5633
#, no-c-format
msgid "After creating the calendar, you need to set a time range for it, which also controls the view mode, and set up the data source for calendar events."
msgstr ""

#. Tag: title
#: chapter-components.xml:5639
#, no-c-format
msgid "Date Range and View Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:5641
#, no-c-format
msgid "The Vaadin Calendar has two types of views that are shown depending on the date range of the calendar. The <emphasis>weekly view</emphasis> displays a week by default. It can show anything between one to seven days a week, and is also used as a single-day view. The view mode is determined from the <emphasis>date range</emphasis> of the calendar, defined by a start and an end date. Calendar will be shown in a <emphasis>monthly view</emphasis> when the date range is over than one week (seven days) long. The date range is always calculated in an accuracy of one millisecond."
msgstr ""

#. Tag: title
#: chapter-components.xml:5654
#, no-c-format
msgid "Monthly view with All-Day and Normal Events"
msgstr ""

#. Tag: para
#: chapter-components.xml:5665
#, no-c-format
msgid "The monthly view, shown in <xref linkend=\"figure.components.calendar.daterange.monthly\"/>, can easily be used to control all types of events, but it is best suited for events that last for one or more days. You can drag the events to move them. In the figure, you can see two longer events that are highlighted with a blue and green background color. Other markings are shorter day events that last less than a 24 hours. These events can not be moved by dragging in the monthly view."
msgstr ""

#. Tag: title
#: chapter-components.xml:5677
#, no-c-format
msgid "Weekly View"
msgstr ""

#. Tag: para
#: chapter-components.xml:5688
#, no-c-format
msgid "In <xref linkend=\"figure.components.calendar.daterange.weekly\"/>, you can see four normal day events and also all-day events at the top of the time line grid."
msgstr ""

#. Tag: para
#: chapter-components.xml:5694
#, no-c-format
msgid "In the following, we set the calendar to show only one day, which is the current day."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5699
#, no-c-format
msgid ""
      "<![CDATA[cal.setStartDate(new Date());\n"
      "cal.setEndDate(new Date());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5701
#, no-c-format
msgid "Notice that although the range we set above is actually zero time long, the calendar still renders the time from 00:00 to 23:59. This is normal, as the Vaadin Calendar is guaranteed to render at least the date range provided, but may expand it. This behaviour is important to notice when we implement our own event providers."
msgstr ""

#. Tag: title
#: chapter-components.xml:5711
#, no-c-format
msgid "Calendar Events"
msgstr ""

#. Tag: para
#: chapter-components.xml:5713
#, no-c-format
msgid "All occurrences in a calendar are represented as <emphasis>events</emphasis>. You have three ways to manage the calendar events:"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5720
#, no-c-format
msgid "Add events directly to the <classname>Calendar</classname> object using the <methodname>addEvent()</methodname>"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5725
#, no-c-format
msgid "Use a <interfacename>Container</interfacename> as a data source"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5729
#, no-c-format
msgid "Use the <emphasis>event provider</emphasis> mechanism"
msgstr ""

#. Tag: para
#: chapter-components.xml:5734
#, no-c-format
msgid "You can add events with <methodname>addEvent()</methodname> and remove them with the <methodname>removeEvent()</methodname>. These methods will use the underlying event provider to write the modifications to the data source."
msgstr ""

#. Tag: title
#: chapter-components.xml:5742
#, no-c-format
msgid "Event Interfaces and Providers"
msgstr ""

#. Tag: para
#: chapter-components.xml:5744
#, no-c-format
msgid "Events are handled though the <interfacename>CalendarEvent</interfacename> interface. The concrete class of the event depends on the specific <classname>CalendarEventProvider</classname> used in the calendar."
msgstr ""

#. Tag: para
#: chapter-components.xml:5751
#, no-c-format
msgid "By default, <classname>Calendar</classname> uses a <classname>BasicEventProvider</classname> to provide events, which uses <classname>BasicEvent</classname> instances."
msgstr ""

#. Tag: para
#: chapter-components.xml:5757
#, no-c-format
msgid "Calendar does not depend on any particular data source implementation. Events are queried by the <classname>Calendar</classname> from the provider that just has to implement the <interfacename>CalendarEventProvider</interfacename> interface. It is up to the event provider that <classname>Calendar</classname> gets the correct events."
msgstr ""

#. Tag: para
#: chapter-components.xml:5766
#, no-c-format
msgid "You can bind any Vaadin <classname>Container</classname> to a calendar, in which case a <classname>ContainerEventProvider</classname> is used transparently. The container must be ordered by start date and time of the events. See <xref linkend=\"datamodel.container\"/> for basic information about containers."
msgstr ""

#. Tag: title
#: chapter-components.xml:5777
#, no-c-format
msgid "Event Types"
msgstr ""

#. Tag: para
#: chapter-components.xml:5779
#, no-c-format
msgid "A calendar event requires a start time and an end time. These are the only mandatory properties. In addition, an event can also be set as an all-day event by setting the <literal>all-day</literal> property of the event. You can also set the <literal>description</literal> of an event, which is displayed as a tooltip in the user interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:5787
#, no-c-format
msgid "If the <literal>all-day</literal> field of the event is <literal>true</literal>, then the event is always rendered as an all-day event. In the monthly view, this means that no start time is displayed in the user interface and the event has an colored background. In the weekly view, all-day events are displayed in the upper part of the screen, and rendered similarly to the monthly view. In addition, when the time range of an event is 24 hours or longer, it is rendered as an all-day event in the monthly view."
msgstr ""

#. Tag: para
#: chapter-components.xml:5798
#, no-c-format
msgid "When the time range of an event is equal or less than 24 hours, with the accuracy of one millisecond, the event is considered as a normal day event. Normal event has a start and end times that may be on different days."
msgstr ""

#. Tag: title
#: chapter-components.xml:5807
#, no-c-format
msgid "Basic Events"
msgstr ""

#. Tag: para
#: chapter-components.xml:5809
#, no-c-format
msgid "The easiest way to add and manage events in a calendar is to use the <emphasis>basic event</emphasis> management API. Calendar uses by default a <classname>BasicEventProvider</classname>, which keeps the events in memory in an internal reprensetation."
msgstr ""

#. Tag: para
#: chapter-components.xml:5816
#, no-c-format
msgid "For example, the following adds a two-hour event starting from the current time. The standard Java <classname>GregorianCalendar</classname> provides various ways to manipulate date and time."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5824
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Add a two-hour event\n"
      "GregorianCalendar start = new GregorianCalendar();\n"
      "GregorianCalendar end   = new GregorianCalendar();\n"
      "end.add(java.util.Calendar.HOUR, 2);\n"
      "calendar.addEvent(new BasicEvent(\"Calendar study\",\n"
      "        \"Learning how to use Vaadin Calendar\",\n"
      "        start.getTime(), end.getTime()));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5827
#, no-c-format
msgid "This adds a new event that lasts for 3 hours. As the BasicEventProvider and BasicEvent implement some optional event interfaces provided by the calendar package, there is no need to refresh the calendar. Just create events, set their properties and add them to the Event Provider."
msgstr ""

#. Tag: title
#: chapter-components.xml:5837
#, no-c-format
msgid "Getting Events from a Container"
msgstr ""

#. Tag: para
#: chapter-components.xml:5839
#, no-c-format
msgid "You can use any Vaadin <interfacename>Container</interfacename> that implements the <interfacename>Indexed</interfacename> interface as the data source for calendar events. The <classname>Calendar</classname> will listen to change events from the container as well as write changes to the container. You can attach a container to a <classname>Calendar</classname> with <methodname>setContainerDataSource()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5848
#, no-c-format
msgid "In the following example, we bind a <classname>BeanItemContainer</classname> that contains built-in <classname>BasicEvent</classname> events to a calendar."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5855
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create the calendar\n"
      "Calendar calendar = new Calendar(\"Bound Calendar\");\n"
      "\n"
      "// Use a container of built-in BasicEvents\n"
      "final BeanItemContainer<BasicEvent> container =\n"
      "    new BeanItemContainer<BasicEvent>(BasicEvent.class);        \n"
      "\n"
      "// Create a meeting in the container\n"
      "container.addBean(new BasicEvent(\"The Event\", \"Single Event\",\n"
      "            new GregorianCalendar(2012,1,14,12,00).getTime(),\n"
      "            new GregorianCalendar(2012,1,14,14,00).getTime()));\n"
      "\n"
      "// The container must be ordered by the start time. You\n"
      "// have to sort the BIC every time after you have added\n"
      "// or modified events.\n"
      "container.sort(new Object[]{\"start\"}, new boolean[]{true});\n"
      "\n"
      "calendar.setContainerDataSource(container, \"caption\",\n"
      "    \"description\", \"start\", \"end\", \"styleName\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5857
#, no-c-format
msgid "The container must either use the default property IDs for event data, as defined in the <interfacename>CalendarEvent</interfacename> interface, or provide them as parameters for the <methodname>setContainerDataSource()</methodname> method, as we did in the example above."
msgstr ""

#. Tag: title
#: chapter-components.xml:5866
#, no-c-format
msgid "Keeping the Container Ordered"
msgstr ""

#. Tag: para
#: chapter-components.xml:5868
#, no-c-format
msgid "The events in the container <emphasis>must</emphasis> be kept ordered by their start date/time. Failing to do so may and will result in the events not showing in the calendar properly."
msgstr ""

#. Tag: para
#: chapter-components.xml:5874
#, no-c-format
msgid "Ordering depends on the container. With some containers, such as <classname>BeanItemContainer</classname>, you have to sort the container explicitly every time after you have added or modified events, usually with the <methodname>sort()</methodname> method, as we did in the example above. Some container, such as <classname>JPAContainer</classname>, keep the in container automatically order if you provide a sorting rule."
msgstr ""

#. Tag: para
#: chapter-components.xml:5884
#, no-c-format
msgid "For example, you could order a <classname>JPAContainer</classname> by the following rule, assuming that the start date/time is held in the <literal>startDate</literal> property:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5891
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// The container must be ordered by start date. For JPAContainer\n"
      "// we can just set up sorting once and it will stay ordered.\n"
      "container.sort(new String[]{\"startDate\"}, new boolean[]{true});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5896
#, no-c-format
msgid "Delegation of Event Management"
msgstr ""

#. Tag: para
#: chapter-components.xml:5898
#, no-c-format
msgid "Setting a container as the calendar data source with <methodname>setContainerDataSource()</methodname> automatically switches to <classname>ContainerEventProvider</classname>. You can manipulate the event data through the API in <classname>Calendar</classname> and the user can move and resize event through the user interface. The event provider delegates all such calendar operations to the container."
msgstr ""

#. Tag: para
#: chapter-components.xml:5907
#, no-c-format
msgid "If you add events through the <classname>Calendar</classname> API, notice that you may be unable to create events of the type held in the container or adding them requires some container-specific operations. In such case, you may need to customize the <methodname>addEvent()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-components.xml:5915
#, no-c-format
msgid "For example, <classname>JPAContainer</classname> requires adding new items with <methodname>addEntity()</methodname>. You could first add the entity to the container or entity manager directly and then pass it to the <methodname>addEvent()</methodname>. That does not, however, work if the entity class does not implement <interfacename>CalendarEvent</interfacename>. This is actually the case always if the property names differ from the ones defined in the interface. You could handle creating the underlying entity objects in the <methodname>addEvent()</methodname> as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5927
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a JPAContainer\n"
      "final JPAContainer<MyCalendarEvent> container =\n"
      "    JPAContainerFactory.make(MyCalendarEvent.class,\n"
      "                             \"book-examples\");\n"
      "\n"
      "// Customize the event provider for adding events\n"
      "// as entities\n"
      "ContainerEventProvider cep =\n"
      "        new ContainerEventProvider(container) {\n"
      "    @Override\n"
      "    public void addEvent(CalendarEvent event) {\n"
      "        MyCalendarEvent entity = new MyCalendarEvent(\n"
      "            event.getCaption(), event.getDescription(),\n"
      "            event.getStart(), event.getEnd(),\n"
      "            event.getStyleName());\n"
      "        container.addEntity(entity);\n"
      "    }\n"
      "}\n"
      "\n"
      "// Set the container as the data source\n"
      "calendar.setEventProvider(cep);\n"
      "        \n"
      "// Now we can add events to the database through the calendar\n"
      "BasicEvent event = new BasicEvent(\"The Event\", \"Single Event\",\n"
      "    new GregorianCalendar(2012,1,15,12,00).getTime(),\n"
      "    new GregorianCalendar(2012,1,15,14,00).getTime());\n"
      "calendar.addEvent(event);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5932
#, no-c-format
msgid "Implementing an Event Provider"
msgstr ""

#. Tag: para
#: chapter-components.xml:5934
#, no-c-format
msgid "If the two simple ways of storing and managing events for a calendar are not enough, you may need to implement a custom event provider. It is the most flexible way of providing events. You need to attach the event provider to the <classname>Calendar</classname> using the <methodname>setEventProvider()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-components.xml:5942
#, no-c-format
msgid "Event queries are done by asking the event provider for all the events between two given dates. The range of these dates is guaranteed to be at least as long as the start and end dates set for the component. The component can, however, ask for a longer range to ensure correct rendering. In particular, all start dates are expanded to the start of the day, and all end dates are expanded to the end of the day."
msgstr ""

#. Tag: title
#: chapter-components.xml:5952
#, no-c-format
msgid "Custom Events"
msgstr ""

#. Tag: para
#: chapter-components.xml:5954
#, no-c-format
msgid "An event provider could use the built-in <classname>BasicEvent</classname>, but it is usually more proper to define a custom event type that is bound directly to the data source. Custom events may be useful for some other purposes as well, such as when you need to add extra information to an event or customize how it is acquired."
msgstr ""

#. Tag: para
#: chapter-components.xml:5962
#, no-c-format
msgid "Custom events must implement the <interfacename>CalendarEvent</interfacename> interface or extend an existing event class. The built-in <classname>BasicEvent</classname> class should serve as a good example of implementing simple events. It keeps the data in member variables."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5969
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class BasicEvent\n"
      "       implements CalendarEventEditor, EventChangeNotifier {\n"
      "   ...\n"
      "\n"
      "   public String getCaption() {\n"
      "        return caption;\n"
      "    }\n"
      "\n"
      "    public String getDescription() {\n"
      "        return description;\n"
      "    }\n"
      "\n"
      "    public Date getEnd() {\n"
      "        return end;\n"
      "    }\n"
      "\n"
      "    public Date getStart() {\n"
      "        return start;\n"
      "    }\n"
      "\n"
      "    public String getStyleName() {\n"
      "        return styleName;\n"
      "    }\n"
      "\n"
      "    public boolean isAllDay() {\n"
      "        return isAllDay;\n"
      "    }\n"
      "\n"
      "    public void setCaption(String caption) {\n"
      "        this.caption = caption;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setDescription(String description) {\n"
      "        this.description = description;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setEnd(Date end) {\n"
      "        this.end = end;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setStart(Date start) {\n"
      "        this.start = start;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setStyleName(String styleName) {\n"
      "        this.styleName = styleName;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setAllDay(boolean isAllDay) {\n"
      "        this.isAllDay = isAllDay;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void addEventChangeListener(\n"
      "            EventChangeListener listener) {\n"
      "        ...\n"
      "    }\n"
      "    \n"
      "    public void removeListener(EventChangeListener listener) {\n"
      "        ...\n"
      "    }\n"
      "\n"
      "    protected void fireEventChange() {...}\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5971
#, no-c-format
msgid "You may have noticed that there was some additional code in the <classname>BasicEvent</classname> that was not in the <interfacename>CalendarEvent</interfacename> interface. Namely <classname>BasicEvent</classname> also implements two additional interfaces:"
msgstr ""

#. Tag: interfacename
#: chapter-components.xml:5981
#, no-c-format
msgid "CalendarEditor"
msgstr ""

#. Tag: para
#: chapter-components.xml:5983
#, no-c-format
msgid "This interface defines setters for all the fields, and is required for some of the default handlers to work."
msgstr ""

#. Tag: interfacename
#: chapter-components.xml:5990
#, no-c-format
msgid "EventChangeNotifier"
msgstr ""

#. Tag: para
#: chapter-components.xml:5992
#, no-c-format
msgid "This interface adds the possibility to listen for changes in the event, and enables the <classname>Calendar</classname> to render the changes immediately."
msgstr ""

#. Tag: para
#: chapter-components.xml:6001
#, no-c-format
msgid "The start time and end time are mandatory, but caption, description, and style name are not. The style name is used as a part of the CSS class name for the HTML DOM element of the event."
msgstr ""

#. Tag: para
#: chapter-components.xml:6007
#, no-c-format
msgid "In addition to the basic event interfaces, you can enhance the functionality of your event and event provider classes by using the <classname>EventChange</classname> and <classname>EventSetChange</classname> events. They let the <classname>Calendar</classname> component to know about changes in events and update itself accordingly. The <classname>BasicEvent</classname> and <classname>BasicEventProvider</classname> examples given earlier include a simple implementation of these interfaces."
msgstr ""

#. Tag: title
#: chapter-components.xml:6021
#, no-c-format
msgid "Implementing the Event Provider"
msgstr ""

#. Tag: para
#: chapter-components.xml:6023
#, no-c-format
msgid "An event provider needs to implement the <interfacename>CalendarEventProvider</interfacename> interface. It has only one method to be implemented. Whenever the calendar is painted, <methodname>getEvents(Date, Date)</methodname> method is called and it must return a list of events between the given start and end time."
msgstr ""

#. Tag: para
#: chapter-components.xml:6031
#, no-c-format
msgid "The following example implementation returns only one example event. The event starts from the current time and is five hours long."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6036
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MyEventProvider implements CalendarEventProvider{\n"
      "    public List<Event> getEvents(Date startDate, Date endDate){\n"
      "        List<Event> events = new ArrayList<Event>();\n"
      "        GregorianCalendar cal = new GregorianCalendar();\n"
      "        cal.setTime(new Date());\n"
      "\n"
      "        Date start = cal.getTime();\n"
      "        cal.add(GregorianCalendar.HOUR, 5);\n"
      "        Date end = cal.getTime();\n"
      "        BasicEvent event = new BasicEvent();\n"
      "        event.setCaption(\"My Event\");\n"
      "        event.setDescription(\"My Event Description\");\n"
      "        event.setStart(start);\n"
      "        event.setEnd(end);\n"
      "        events.add(event);\n"
      "\n"
      "        return events;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6038
#, no-c-format
msgid "It is important to notice that the <classname>Calendar</classname> may query for dates beyond the range defined by start date and end date. Particularly, it may expand the date range to make sure the user interface is rendered correctly."
msgstr ""

#. Tag: title
#: chapter-components.xml:6048
#, no-c-format
msgid "Styling a Calendar"
msgstr ""

#. Tag: para
#: chapter-components.xml:6050
#, no-c-format
msgid "Configuring the appearance of the Vaadin Calendar component is one of the basic tasks. At the least, you need to consider its sizing in your user interface. You also quite probably want to use some color or colors for events."
msgstr ""

#. Tag: title
#: chapter-components.xml:6058
#, no-c-format
msgid "Sizing"
msgstr ""

#. Tag: para
#: chapter-components.xml:6060
#, no-c-format
msgid "The Calendar supports component sizing as usual for defined (fixed or relative) sizes. When using an undefined size for the calendar, all the sizes come from CSS. In addition, when the height is undefined, a scrollbar is displayed in the weekly view to better fit the cells to the user interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:6068
#, no-c-format
msgid "Below is a list of style rules that define the size of a Calendar with undefined size (these are the defaults):"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6073
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[.v-calendar-month-sizedheight .v-calendar-month-day {\n"
      "        height: 100px;\n"
      "}\n"
      "\n"
      ".v-calendar-month-sizedwidth .v-calendar-month-day {\n"
      "        width: 100px;\n"
      "}\n"
      "\n"
      ".v-calendar-header-month-Hsized .v-calendar-header-day {\n"
      "        width: 101px;\n"
      "}\n"
      "\n"
      "/* for IE */\n"
      ".v-ie6 .v-calendar-header-month-Hsized .v-calendar-header-day {\n"
      "        width: 104px;\n"
      "}\n"
      "\n"
      "/* for others */\n"
      ".v-calendar-header-month-Hsized td:first-child {\n"
      "        padding-left: 21px;\n"
      "}\n"
      "\n"
      ".v-calendar-header-day-Hsized {\n"
      "        width: 200px;\n"
      "}\n"
      "\n"
      ".v-calendar-week-numbers-Vsized .v-calendar-week-number {\n"
      "        height: 100px;\n"
      "        line-height: 100px;\n"
      "}\n"
      "\n"
      ".v-calendar-week-wrapper-Vsized {\n"
      "        height: 400px;\n"
      "        overflow-x: hidden !important;\n"
      "}\n"
      "\n"
      ".v-calendar-times-Vsized .v-calendar-time {\n"
      "        height: 38px;\n"
      "}\n"
      "\n"
      ".v-calendar-times-Hsized .v-calendar-time {\n"
      "        width: 42px;\n"
      "}\n"
      "\n"
      ".v-calendar-day-times-Vsized .v-slot,.v-calendar-day-times-Vsized .v-slot-even {\n"
      "        height: 18px;\n"
      "}\n"
      "\n"
      ".v-calendar-day-times-Hsized, .v-calendar-day-times-Hsized .v-slot,.v-calendar-day-times-Hsized .v-slot-even {\n"
      "        width: 200px;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6077
#, no-c-format
msgid "Event Style"
msgstr ""

#. Tag: para
#: chapter-components.xml:6079
#, no-c-format
msgid "Events can be styled with CSS by setting them a <emphasis>style name suffix</emphasis>. The suffix is retrieved with the <methodname>getStyleName()</methodname> method in <interfacename>CalendarEvent</interfacename>. If you use <classname>BasicEvent</classname> events, you can set the suffix with <methodname>setStyleName()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6088
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[BasicEvent event = new BasicEvent(\"Wednesday Wonder\", ... );\n"
      "event.setStyleName(\"mycolor\");\n"
      "calendar.addEvent(event);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6090
#, no-c-format
msgid "Suffix <literal>mycolor</literal> would create <literal>v-calendar-event-mycolor</literal> class for regular events and <literal>v-calendar-event-mycolor-add-day</literal> for all-day events. You could style the events with the following rules:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6097
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>.v-calendar .v-calendar-event-mycolor {}\n"
      ".v-calendar .v-calendar-event-mycolor-all-day {}\n"
      ".v-calendar .v-calendar-event-mycolor .v-calendar-event-caption {}\n"
      ".v-calendar .v-calendar-event-mycolor .v-calendar-event-content {}"
msgstr ""

#. Tag: title
#: chapter-components.xml:6103
#, no-c-format
msgid "Visible Hours and Days"
msgstr ""

#. Tag: para
#: chapter-components.xml:6105
#, no-c-format
msgid "As we saw in <xref linkend=\"components.calendar.daterange\"/>, you can set the range of dates that are shown by the Calendar. But what if you wanted to show the entire month but hide the weekends? Or show only hours from 8 to 16 in the weekly view? The <methodname>setVisibleDays()</methodname> and <methodname>setVisibleHours()</methodname> methods allow you to do that."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6113
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>calendar.setVisibleDays(1,5);   // Monday to Friday\n"
      "calendar.setVisibleHours(0,15); // Midnight until 4 pm"
msgstr ""

#. Tag: para
#: chapter-components.xml:6115
#, no-c-format
msgid "After the above settings, only weekdays from Monday to Friday would be shown. And when the calendar is in the weekly view, only the time range from 00:00 to 16:00 would be shown."
msgstr ""

#. Tag: para
#: chapter-components.xml:6121
#, no-c-format
msgid "Note that the excluded times are never shown so you should take care when setting the date range. If the date range contains only dates / times that are excluded, nothing will be displayed. Also note that even if a date is not rendered because these settings, the event provider may still be queried for events for that date."
msgstr ""

#. Tag: title
#: chapter-components.xml:6131
#, no-c-format
msgid "Drag and Drop"
msgstr ""

#. Tag: para
#: chapter-components.xml:6133
#, no-c-format
msgid "Vaadin Calendar can act as a drop target for drag and drop, described in <xref linkend=\"advanced.dragndrop\"/>. With the functionality, the user could drag events, for example, from a table to a calendar."
msgstr ""

#. Tag: para
#: chapter-components.xml:6139
#, no-c-format
msgid "To support dropping, a <classname>Calendar</classname> must have a drop handler. When the drop handler is set, the days in the monthly view and the time slots in the weekly view can receive drops. Other locations, such as day names in the weekly view, can not currently receive drops."
msgstr ""

#. Tag: para
#: chapter-components.xml:6146
#, no-c-format
msgid "Calendar uses its own implementation of <interfacename>TargetDetails</interfacename>: <classname>CalendarTargetdetails</classname>. It holds information about the the drop location, which in the context of <classname>Calendar</classname> means the date and time. The drop target location can be retrieved via the <methodname>getDropTime()</methodname> method. If the drop is done in the monthly view, the returned date does not have exact time information. If the drop happened in the weekly view, the returned date also contains the start time of the slot."
msgstr ""

#. Tag: para
#: chapter-components.xml:6158
#, no-c-format
msgid "Below is a short example of creating a drop handler and using the drop information to create a new event:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6163
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[private Calendar createDDCalendar() {\n"
      "  Calendar calendar = new Calendar();\n"
      "  calendar.setDropHandler(new DropHandler() {\n"
      "    public void drop(DragAndDropEvent event) {\n"
      "      CalendarTargetDetails details = \n"
      "              (CalendarTargetDetails) event.getTargetDetails();\n"
      "      \n"
      "      TableTransferable transferable = \n"
      "              (TableTransferable) event.getTransferable();\n"
      "\n"
      "      createEvent(details, transferable);\n"
      "      removeTableRow(transferable);\n"
      "    }\n"
      "\n"
      "    public AcceptCriterion getAcceptCriterion() {\n"
      "      return AcceptAll.get();\n"
      "    }\n"
      "\n"
      "  });\n"
      "\n"
      "  return calendar;\n"
      "}\n"
      "\n"
      "\n"
      "protected void createEvent(CalendarTargetDetails details,\n"
      "  TableTransferable transferable) {\n"
      "  Date dropTime = details.getDropTime();\n"
      "  java.util.Calendar timeCalendar = details.getTargetCalendar()\n"
      "                                    .getInternalCalendar();\n"
      "  timeCalendar.setTime(dropTime);\n"
      "  timeCalendar.add(java.util.Calendar.MINUTE, 120);\n"
      "  Date endTime = timeCalendar.getTime();\n"
      "\n"
      "  Item draggedItem = transferable.getSourceComponent().\n"
      "                            getItem(transferable.getItemId());\n"
      "\n"
      "  String eventType = (String)draggedItem.\n"
      "                            getItemProperty(\"type\").getValue();\n"
      "\n"
      "  String eventDescription = \"Attending: \"\n"
      "             + getParticipantString(\n"
      "                 (String[]) draggedItem.\n"
      "                   getItemProperty(\"participants\").getValue());\n"
      "\n"
      "  BasicEvent newEvent = new BasicEvent();\n"
      "  newEvent.setAllDay(!details.hasDropTime());\n"
      "  newEvent.setCaption(eventType);\n"
      "  newEvent.setDescription(eventDescription);\n"
      "  newEvent.setStart(dropTime);\n"
      "  newEvent.setEnd(endTime);\n"
      "\n"
      "  BasicEventProvider ep = (BasicEventProvider) details\n"
      "                       .getTargetCalendar().getEventProvider();\n"
      "  ep.addEvent(newEvent);\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6167
#, no-c-format
msgid "Using the Context Menu"
msgstr ""

#. Tag: para
#: chapter-components.xml:6169
#, no-c-format
msgid "Vaadin Calendar allows the use of context menu (mouse right-click) to manage events. As in other context menus in Vaadin, the menu items are handled in Vaadin as <emphasis>actions</emphasis> by an <emphasis>action handler</emphasis>. To enable a context menu, you have to implement a Vaadin <interfacename>Action.Handler</interfacename> and add it to the calendar with <methodname>addActionHandler()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:6178
#, no-c-format
msgid "An action handler must implement two methods: <methodname>getActions()</methodname> and <methodname>handleAction()</methodname>. The <methodname>getActions()</methodname> is called for each day displayed in the calendar view. It should return a list of allowed actions for that day, that is, the items of the context menu. The <parameter>target</parameter> parameter is the context of the click - a <classname>CalendarDateRange</classname> that spans over the day. The <parameter>sender</parameter> is the <classname>Calendar</classname> object."
msgstr ""

#. Tag: para
#: chapter-components.xml:6191
#, no-c-format
msgid "The <methodname>handleActions()</methodname> receives the target context in the <parameter>target</parameter>. If the context menu was opened on an event, the target is the <interfacename>Event</interfacename> object, otherwise it is a <classname>CalendarDateRange</classname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:6200
#, no-c-format
msgid "Localization and Formatting"
msgstr ""

#. Tag: title
#: chapter-components.xml:6203
#, no-c-format
msgid "Setting the Locale and Time Zone"
msgstr ""

#. Tag: para
#: chapter-components.xml:6205
#, no-c-format
msgid "Month and weekday names are shown in the language of the locale setting of the <classname>Calendar</classname>. The translations are acquired from the standard Java locale data. By default, <classname>Calendar</classname> uses the system default locale for its internal calendar, but you can change it with <methodname>setLocale(Locale locale)</methodname>. Setting the locale will update also other location specific date and time settings, such as the first day of the week, time zone, and time format. However, time zone and time format can be overridden by settings in the <classname>Calendar</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:6218
#, no-c-format
msgid "For example, the following would set the language to US English:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6222
#, no-c-format
msgid "<![CDATA[cal.setLocale(Locale.US);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6224
#, no-c-format
msgid "The locale defines the default time zone. You can change it with the <methodname>setTimeZone()</methodname> method, which takes a <classname>java.util.TimeZone</classname> object as its parameter. Setting timezone to null will reset timezone to the locale default."
msgstr ""

#. Tag: para
#: chapter-components.xml:6231
#, no-c-format
msgid "For example, the following would set the Finnish time zone, which is EET"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6235
#, no-c-format
msgid "<![CDATA[cal.setTimeZone(TimeZone.getTimeZone(\"Europe/Helsinki\"));]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6239
#, no-c-format
msgid "Time and Date Caption Format"
msgstr ""

#. Tag: para
#: chapter-components.xml:6241
#, no-c-format
msgid "The time may be shown either in 24 or 12 hour format. The default format is defined by the locale, but you can change it with the <methodname>setTimeFormat()</methodname> method. Giving a <literal>null</literal> setting will reset the time format to the locale default."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6249
#, no-c-format
msgid "<![CDATA[cal.setTimeFormat(TimeFormat.Format12H);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6251
#, no-c-format
msgid "You can change the format of the date captions in the week view with the <methodname>setWeeklyCaptionFormat(String dateFormatPattern)</methodname> method. The date format pattern should follow the format of the standard Java <classname>java.text.SimpleDateFormat</classname> class."
msgstr ""

#. Tag: para
#: chapter-components.xml:6259 chapter-components.xml:6570
#, no-c-format
msgid "For example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6263
#, no-c-format
msgid "<![CDATA[cal.setWeeklyCaptionFormat(\"dd-MM-yyyy\");]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6268
#, no-c-format
msgid "Customizing the Calendar"
msgstr ""

#. Tag: para
#: chapter-components.xml:6270
#, no-c-format
msgid "In this section, we give a tutorial for how to make various basic customizations of the Vaadin Calendar. The event provider and styling was described earlier, so now we concentrate on other features of the Calendar API."
msgstr ""

#. Tag: title
#: chapter-components.xml:6278
#, no-c-format
msgid "Overview of Handlers"
msgstr ""

#. Tag: para
#: chapter-components.xml:6280
#, no-c-format
msgid "Most of the handlers related to calendar events have sensible default handlers. These are found in the <package>com.vaadin.ui.handler</package> package. The default handlers and their functionalities are described below."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:6288
#, no-c-format
msgid "<classname>BasicBackwardHandler</classname>. Handles clicking the back-button of the weekly view so that the viewed month is changed to the previous one."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:6294
#, no-c-format
msgid "<classname>BasicForwardHandler</classname>. Handles clicking the forward-button of the weekly view so that the viewed month is changed to the next one."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:6300
#, no-c-format
msgid "<classname>BasicWeekClickHandler</classname>. Handles clicking the week numbers int the monthly view so that the viewable date range is changed to the clicked week."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:6306
#, no-c-format
msgid "<classname>BasicDateClickHandler</classname>. Handles clicking the dates on both the monthly view and the weekly view. Changes the viewable date range so that only the clicked day is visible."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:6312
#, no-c-format
msgid "<classname>BasicEventMoveHandler</classname>. Handles moving the events in both monthly view and the weekly view. Events can be moved and their start and end dates are changed correctly, but only if the event implements <classname>CalendarEventEditor</classname> (implemented by <classname>BasicEvent</classname>)."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:6321
#, no-c-format
msgid "<classname>BasicEventResizeHandler</classname>. Handles resizing the events in the weekly view. Events can be resized and their start and end dates are changed correctly, but only if the event implements <classname>CalendarEventEditor</classname> (implemented by the <classname>BasicEvent</classname>)."
msgstr ""

#. Tag: para
#: chapter-components.xml:6330
#, no-c-format
msgid "All of these handlers are automatically set when creating a new <classname>Calendar</classname>. If you wish to disable some of the default functionality, you can simply set the corresponding handler to <literal>null</literal>. This will prevent the functionality from ever appearing on the user interface. For example, if you set the <classname>EventMoveHandler</classname> to <literal>null</literal>, the user will be unable to move events in the browser."
msgstr ""

#. Tag: title
#: chapter-components.xml:6342
#, no-c-format
msgid "Creating a Calendar"
msgstr ""

#. Tag: para
#: chapter-components.xml:6344
#, no-c-format
msgid "Let us first create a new <classname>Calendar</classname> instance. Here we use our own event provider, the <classname>MyEventProvider</classname> described in <xref linkend=\"components.calendar.eventprovider.eventprovider\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6351
#, no-c-format
msgid "<![CDATA[Calendar cal = new Calendar(new MyEventProvider());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6353
#, no-c-format
msgid "This initializes the Calendar. To customize the viewable date range, we must set a start and end date to it."
msgstr ""

#. Tag: para
#: chapter-components.xml:6358
#, no-c-format
msgid "There is only one visible event in the timeline, starting from the current time. That is what our event provider passes to the client."
msgstr ""

#. Tag: para
#: chapter-components.xml:6366
#, no-c-format
msgid "It would be nice to also be able to control the navigation forward and backward. The default navigation is provided by the default handlers, but perhaps we want to restrict the users so they can only navigate dates in the current year. Maybe we also want to pose some other restrictions to the clicking week numbers and dates."
msgstr ""

#. Tag: para
#: chapter-components.xml:6374
#, no-c-format
msgid "These restrictions and other custom logic can be defined with custom handlers. You can find the handlers in the <package>com.vaadin.addon.calendar.ui.handler</package> package and they can be easily extended. Note that if you don not want to extend the default handlers, you are free to implement your own. The interfaces are described in <interfacename>CalendarComponentEvents</interfacename>."
msgstr ""

#. Tag: title
#: chapter-components.xml:6387
#, no-c-format
msgid "Backward and Forward Navigation"
msgstr ""

#. Tag: para
#: chapter-components.xml:6389
#, no-c-format
msgid "Vaadin Calendar has only limited built-in navigation support. The weekly view has navigation buttons in the top left and top right corners."
msgstr ""

#. Tag: para
#: chapter-components.xml:6396
#, no-c-format
msgid "You can handle backward and forward navigation with a <interfacename>BackwardListener</interfacename> and <interfacename>ForwardListener</interfacename>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6402
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicBackwardHandler() {\n"
      "  protected void setDates(BackwardEvent event,\n"
      "                          Date start, Date end) {\n"
      "\n"
      "      java.util.Calendar calendar = event.getComponent()\n"
      "                                    .getInternalCalendar();\n"
      "      if (isThisYear(calendar, end) \n"
      "           && isThisYear(calendar, start)) {\n"
      "        super.setDates(event, start, end);\n"
      "      }\n"
      "  }});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6404
#, no-c-format
msgid "The forward navigation handler can be implemented in the same way. The example handler restricts the dates to the current year."
msgstr ""

#. Tag: title
#: chapter-components.xml:6411
#, no-c-format
msgid "Date Click Handling"
msgstr ""

#. Tag: para
#: chapter-components.xml:6413
#, no-c-format
msgid "By default, clicking a date either in month or week view switches to single-day view. The date click event is handled by a <interfacename>DateClickHandler</interfacename>."
msgstr ""

#. Tag: para
#: chapter-components.xml:6419
#, no-c-format
msgid "The following example handles click events so that when the user clicks the date header in the weekly view, it will switch to single-day view, and in the single-day view switch back to the weekly view."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6425
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicDateClickHandler() {\n"
      "  public void dateClick(DateClickEvent event) {\n"
      "    Calendar cal = event.getComponent();\n"
      "    long currentCalDateRange = cal.getEndDate().getTime()\n"
      "                               - cal.getStartDate().getTime();\n"
      "    \n"
      "    if (currentCalDateRange < VCalendar.DAYINMILLIS) {\n"
      "      // Change the date range to the current week\n"
      "      cal.setStartDate(cal.getFirstDateForWeek(event.getDate()));\n"
      "      cal.setEndDate(cal.getLastDateForWeek(event.getDate()));\n"
      "\n"
      "    } else {\n"
      "      // Default behaviour, change date range to one day\n"
      "      super.dateClick(event);\n"
      "    }\n"
      "  }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6429
#, no-c-format
msgid "Handling Week Clicks"
msgstr ""

#. Tag: para
#: chapter-components.xml:6431
#, no-c-format
msgid "The monthly view displays week numbers for each week row on the left side of the date grid. The week number are clickable and you can handle the click events by setting a <interfacename>WeekClickHandler</interfacename> for the <classname>Calendar</classname> object. The default handler changes the date range to be the clicked week."
msgstr ""

#. Tag: para
#: chapter-components.xml:6439
#, no-c-format
msgid "In the following example, we add a week click handler that changes the date range of the calendar to one week only if the start and end dates of the week are in the current month."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6445
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicWeekClickHandler() {\n"
      "    protected void setDates(WeekClick event,\n"
      "                          Date start, Date end) {\n"
      "        java.util.Calendar calendar = event.getComponent()\n"
      "                                  .getInternalCalendar();\n"
      "        if (isThisMonth(calendar, start) \n"
      "            && isThisMonth(calendar,  end)) {\n"
      "            super.setDates(event, start, end);\n"
      "        }\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6449
#, no-c-format
msgid "Handling Event Clicks"
msgstr ""

#. Tag: para
#: chapter-components.xml:6451
#, no-c-format
msgid "The calendar events in all views are are clickable. There is no default handler. Just like the date and week click handlers, event click handling is enabled by setting an <interfacename>EventClickHandler</interfacename> for the <classname>Calendar</classname> object."
msgstr ""

#. Tag: para
#: chapter-components.xml:6459
#, no-c-format
msgid "You can get hold of the clicked event by the <methodname>getCalendarEvent()</methodname> method in the <classname>EventClick</classname> object passed to the handler, as shown in the following example."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6466
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new EventClickHandler() {\n"
      "    public void eventClick(EventClick event) {\n"
      "        BasicEvent e = (BasicEvent) event.getCalendarEvent();\n"
      "\n"
      "        // Do something with it\n"
      "        new Notification(\"Event clicked: \" + e.getCaption(),\n"
      "            e.getDescription()).show(Page.getCurrent());\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6470
#, no-c-format
msgid "Event Dragging"
msgstr ""

#. Tag: para
#: chapter-components.xml:6472
#, no-c-format
msgid "The user can drag an event to change its position in time. The default handler sets the start and end time of the event accordingly. You can do many things with a custom move handler, such as restrict moving events."
msgstr ""

#. Tag: para
#: chapter-components.xml:6478
#, no-c-format
msgid "In the following example, we add a <interfacename>EventMoveHandler</interfacename> to a <classname>Calendar</classname>. The event handler updates the new position to the datasource, but only if the new dates are in the current month. This requires making some changes to the event provider class."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6486
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicEventMoveHandler() {\n"
      "  private java.util.Calendar javaCalendar;\n"
      "\n"
      "  public void eventMove(MoveEvent event) {\n"
      "    javaCalendar = event.getComponent().getInternalCalendar();\n"
      "    super.eventMove(event);\n"
      "  }\n"
      "  \n"
      "  protected void setDates(CalendarEventEditor event,\n"
      "                          Date start, Date end) {\n"
      "    if (isThisMonth(javaCalendar, start)\n"
      "        && isThisMonth(javaCalendar, end)) {\n"
      "      super.setDates(event, start, end);\n"
      "    }\n"
      "  }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6488
#, no-c-format
msgid "For the above example to work, the example event provider presented earlier needs to be changed slightly so that it doesn't always create a new event when <methodname>getEvents()</methodname> is called."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6494
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public static class MyEventProvider\n"
      "              implements CalendarEventProvider {\n"
      "  private List<CalendarEvent> events =\n"
      "        new ArrayList<CalendarEvent>();\n"
      "\n"
      "  public MyEventProvider() {\n"
      "    events = new ArrayList<CalendarEvent>();\n"
      "    GregorianCalendar cal = new GregorianCalendar();\n"
      "    cal.setTime(new Date());\n"
      "\n"
      "    Date start = cal.getTime();\n"
      "    cal.add(GregorianCalendar.HOUR, 5);\n"
      "    Date end = cal.getTime();\n"
      "    BasicEvent event = new BasicEvent();\n"
      "    event.setCaption(\"My Event\");\n"
      "    event.setDescription(\"My Event Description\");\n"
      "    event.setStart(start);\n"
      "    event.setEnd(end);\n"
      "    events.add(event);\n"
      "  }\n"
      "\n"
      "  public void addEvent(CalendarEvent BasicEvent) {\n"
      "    events.add(BasicEvent);\n"
      "  }\n"
      "\n"
      "  public List<CalendarEvent> getEvents(Date startDate, \n"
      "                                       Date endDate) {\n"
      "    return events;\n"
      "  }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6496
#, no-c-format
msgid "After these changes, the user can move events around as earlier, but dropping an event, the start and end dates are checked by the server. Note that as the server-side must move the event in order for it to render to the place it was dropped. The server can also reject moves by not doing anything when the event is received."
msgstr ""

#. Tag: title
#: chapter-components.xml:6506
#, no-c-format
msgid "Handling Drag Selection"
msgstr ""

#. Tag: para
#: chapter-components.xml:6508
#, no-c-format
msgid "Drag selection works both in the monthly and weekly views. To listen for drag selection, you can add a <interfacename>RangeSelectListener</interfacename> to the <classname>Calendar</classname>. There is no default handler for range select."
msgstr ""

#. Tag: para
#: chapter-components.xml:6516
#, no-c-format
msgid "In the code example below, we create an new event when any date range is selected. Drag selection opens a window where the user is asked for a caption for the new event. After confirming, the new event is be passed to the event provider and calendar is updated. Note that as our example event provider and event classes do not implement the event change interface, we must refresh the <classname>Calendar</classname> manually after changing the events."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6526
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new RangeSelectHandler() {\n"
      "  public void rangeSelect(RangeSelectEvent event) {\n"
      "    BasicEvent calendarEvent = new BasicEvent();\n"
      "    calendarEvent.setStart(event.getStart());\n"
      "    calendarEvent.setEnd(event.getEnd());\n"
      "\n"
      "    // Create popup window and add a form in it.\n"
      "    VerticalLayout layout = new VerticalLayout();\n"
      "    layout.setMargin(true);\n"
      "    layout.setSpacing(true);\n"
      "\n"
      "    final Window w = new Window(null, layout);\n"
      "    ...\n"
      "\n"
      "    // Wrap the calendar event to a BeanItem \n"
      "    // and pass it to the form\n"
      "    final BeanItem<CalendarEvent> item = \n"
      "                         new BeanItem<CalendarEvent>(myEvent);\n"
      "\n"
      "    final Form form = new Form();\n"
      "    form.setItemDataSource(item);\n"
      "    ...\n"
      "\n"
      "    layout.addComponent(form);\n"
      "\n"
      "    HorizontalLayout buttons = new HorizontalLayout();\n"
      "    buttons.setSpacing(true);\n"
      "    buttons.addComponent(new Button(\"OK\", new ClickListener() {\n"
      "\n"
      "        public void buttonClick(ClickEvent event) {\n"
      "            form.commit();\n"
      "\n"
      "            // Update event provider's data source\n"
      "            provider.addEvent(item.getBean());\n"
      "\n"
      "            UI.getCurrent().removeWindow(w);\n"
      "        }\n"
      "    }));\n"
      "\n"
      "    ...\n"
      "  }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6530
#, no-c-format
msgid "Resizing Events"
msgstr ""

#. Tag: para
#: chapter-components.xml:6532
#, no-c-format
msgid "The user can resize an event by dragging from both ends to change its start or end time. This offers a convenient way to change event times without the need to type anything. The default resize handler sets the start and end time of the event according to the resize."
msgstr ""

#. Tag: para
#: chapter-components.xml:6539
#, no-c-format
msgid "In the example below, we set a custom handler for resize events. The handler prevents any event to be resized over 12 hours in length. Note that this does not prevent the user from resizing an event over 12 hours in the client. The resize will just be corrected by the server."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6546
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicEventResizeHandler() {\n"
      "  private static final long twelveHoursInMs = 12*60*60*1000;\n"
      "\n"
      "  protected void setDates(CalendarEventEditor event, \n"
      "                          Date start, Date end) {\n"
      "    long eventLength = end.getTime() - start.getTime();\n"
      "    if (eventLength <= twelveHoursInMs) {\n"
      "      super.setDates(event, start, end);\n"
      "    }\n"
      "  }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:6551
#, no-c-format
msgid "Component Composition with <classname>CustomComponent</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6555
#, no-c-format
msgid "The ease of making new user interface components is one of the core features of Vaadin. Typically, you simply combine existing built-in components to produce composite components. In many applications, such composite components make up the majority of the user interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:6562
#, no-c-format
msgid "To create a composite component, you need to inherit the <classname>CustomComponent</classname> and call the <methodname>setCompositionRoot()</methodname> in the constructor to set the <emphasis>composition root</emphasis> component. The root component is typically a layout component that contains multiple components."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6574
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyComposite extends CustomComponent {\n"
      "    public MyComposite(String message) {\n"
      "        // A layout structure used for composition\n"
      "        Panel panel = new Panel(\"My Custom Component\");\n"
      "        panel.setContent(new VerticalLayout());\n"
      "        \n"
      "        // Compose from multiple components\n"
      "        Label label = new Label(message);\n"
      "        label.setSizeUndefined(); // Shrink\n"
      "        panel.addComponent(label);\n"
      "        panel.addComponent(new Button(\"Ok\"));\n"
      "\n"
      "        // Set the size as undefined at all levels\n"
      "        panel.getContent().setSizeUndefined();\n"
      "        panel.setSizeUndefined();\n"
      "        setSizeUndefined();\n"
      "\n"
      "        // The composition root MUST be set\n"
      "        setCompositionRoot(panel);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6576
#, no-c-format
msgid "Take note of the sizing when trying to make a customcomponent that shrinks to fit the contained components. You have to set the size as undefined at all levels; the sizing of the composite component and the composition root are separate."
msgstr ""

#. Tag: para
#: chapter-components.xml:6583
#, no-c-format
msgid "You can use the component as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:6587
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[MyComposite mycomposite = new MyComposite(\"Hello\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6589
#, no-c-format
msgid "The rendered component is shown in <xref linkend=\"figure.components.customcomponent\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:6595
#, no-c-format
msgid "A Custom Composite Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:6603
#, no-c-format
msgid "You can also inherit any other components, such as layouts, to attain similar composition. <indexterm><primary>Google Web Toolkit</primary></indexterm> Even further, you can create entirely new low-level components, by integrating pure client-side components or by extending the client-side functionality of built-in components. Development of new components is covered in <xref linkend=\"gwt\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:6617
#, no-c-format
msgid "Composite Fields with <classname>CustomField</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:6619
#, no-c-format
msgid "The <classname>CustomField</classname> is a way to create composite components like with <classname>CustomComponent</classname>, except that it implements the <interfacename>Field</interfacename> interface and inherit <classname>AbstractField</classname>, described in <xref linkend=\"components.fields\"/>. A field allows editing a property value in the Vaadin data model, and can be bound to data with field groups, as described in <xref linkend=\"datamodel.itembinding\"/>. The field values are buffered and can be validated with validators."
msgstr ""

#. Tag: para
#: chapter-components.xml:6630
#, no-c-format
msgid "A composite field class must implement the <methodname>getType()</methodname> and <methodname>initContent()</methodname> methods. The latter should return the content composite of the field. It is typically a layout component, but can be any component."
msgstr ""

#. Tag: para
#: chapter-components.xml:6639
#, no-c-format
msgid "It is also possible to override <methodname>validate()</methodname>, <methodname>setInternalValue()</methodname>, <methodname>commit()</methodname>, <methodname>setPropertyDataSource</methodname>, <methodname>isEmpty()</methodname> and other methods to implement different functionalities in the field. Methods overriding <methodname>setInternalValue()</methodname> should call the superclass method."
msgstr ""

