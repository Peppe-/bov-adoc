# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-11-13 16:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-clientsideapp.xml:11
#, no-c-format
msgid "Client-Side Applications"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:13
#, no-c-format
msgid "This chapter describes how to develop client-side Vaadin applications."
msgstr ""

#. Tag: emphasis
#: chapter-clientsideapp.xml:18
#, no-c-format
msgid "Currently, we only give a brief introduction to the topic. Please refer to the GWT documentation for a more complete treatment of the many GWT features."
msgstr ""

#. Tag: title
#: chapter-clientsideapp.xml:24
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:26
#, no-c-format
msgid "Vaadin allows developing client-side modules that run in the browser. Client-side modules can use all the GWT widgets and some Vaadin-specific widgets, as well as the same themes as server-side Vaadin applications. Client-side applications run in the browser, even with no further server communications. When paired with a server-side service to gain access to data storage and server-side business logic, client-side applications can be considered \"fat clients\", in comparison to the \"thin client\" approach of the server-side Vaadin applications. The services can use the same back-end services as server-side Vaadin applications. Fat clients are useful for a range of purposes when you have a need for highly responsive UI logic, such as for games or for serving a huge number of clients with possibly stateless server-side code."
msgstr ""

#. Tag: title
#: chapter-clientsideapp.xml:42
#, no-c-format
msgid "Client-Side Application Architecture"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:53
#, no-c-format
msgid "A client-side application is defined as a <emphasis>module</emphasis>, which has an <emphasis>entry-point</emphasis> class. Its <methodname>onModuleLoad()</methodname> method is executed when the JavaScript of the compiled module is loaded in the browser."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:60
#, no-c-format
msgid "Consider the following client-side application:"
msgstr ""

#. Tag: programlisting
#: chapter-clientsideapp.xml:64
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[public class HelloWorld implements EntryPoint {\n"
"    @Override\n"
"    public void onModuleLoad() {\n"
"        RootPanel.get().add(new Label(\"Hello, world!\"));\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:66
#, no-c-format
msgid "The user interface of a client-side application is built under a HTML <emphasis>root element</emphasis>, which can be accessed by <methodname>RootPanel.get()</methodname>. The purpose and use of the entry-point is documented in more detail in <xref linkend=\"clientsideapp.entrypoint\"/>. The user interface is built from <emphasis>widgets</emphasis> hierarchically, just like with server-side Vaadin UIs. The built-in widgets and their relationships are catalogued in <xref linkend=\"widgets\"/>. You can also use many of the widgets in Vaadin add-ons that have them, or make your own."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:78
#, no-c-format
msgid "A client-side module is defined in a <emphasis>module descriptor</emphasis>, as described in <xref linkend=\"clientside.module\"/>. A module is compiled from Java to JavaScript using the Vaadin Compiler, of which use was described in <xref linkend=\"clientside.compiling\"/>. The <xref linkend=\"clientsideapp.compiling\"/> in this chapter gives further information about compiling client-side applications. The resulting JavaScript can be loaded to any web page, as described in <xref linkend=\"clientsideapp.loading\"/>."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:89
#, no-c-format
msgid "The client-side user interface can be built declaratively using the included <emphasis>UI Binder</emphasis>."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:95
#, no-c-format
msgid "The servlet for processing RPC calls from the client-side can be generated automatically using the included compiler."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:100
#, no-c-format
msgid "Even with regular server-side Vaadin applications, it may be useful to provide an off-line mode if the connection is closed. An off-line mode can persist data in a local store in the browser, thereby avoiding the need for server-side storage, and transmit the data to the server when the connection is again available. Such a pattern is commonly used with Vaadin TouchKit."
msgstr ""

#. Tag: title
#: chapter-clientsideapp.xml:112
#, no-c-format
msgid "Client-Side Module Entry-Point"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:114
#, no-c-format
msgid "A client-side application requires an <emphasis>entry-point</emphasis> where the execution starts, much like the <methodname>init()</methodname> method in server-side Vaadin UIs."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:120
#, no-c-format
msgid "Consider the following application:"
msgstr ""

#. Tag: programlisting
#: chapter-clientsideapp.xml:124
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[package com.example.myapp.client;\n"
"\n"
"import com.google.gwt.core.client.EntryPoint;\n"
"import com.google.gwt.event.dom.client.ClickEvent;\n"
"import com.google.gwt.event.dom.client.ClickHandler;\n"
"import com.google.gwt.user.client.ui.RootPanel;\n"
"import com.vaadin.ui.VButton;\n"
"\n"
"public class MyEntryPoint implements EntryPoint {\n"
"    @Override\n"
"    public void onModuleLoad() {\n"
"        // Create a button widget\n"
"        Button button = new Button();\n"
"        button.setText(\"Click me!\");\n"
"        button.addClickHandler(new ClickHandler() {\n"
"            @Override\n"
"            public void onClick(ClickEvent event) {\n"
"                mywidget.setText(\"Hello, world!\");\n"
"            }\n"
"        });\n"
"        RootPanel.get().add(button);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:126
#, no-c-format
msgid "Before compiling, the entry-point needs to be defined in a module descriptor, as described in the next section."
msgstr ""

#. Tag: title
#: chapter-clientsideapp.xml:132
#, no-c-format
msgid "Module Descriptor"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:134
#, no-c-format
msgid "The entry-point of a client-side application is defined, along with any other configuration, in a client-side module descriptor, described in <xref linkend=\"clientside.module\"/>. The descriptor is an XML file with suffix <filename>.gwt.xml</filename>."
msgstr ""

#. Tag: programlisting
#: chapter-clientsideapp.xml:141
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<!DOCTYPE module PUBLIC\n"
"\"-//Google Inc.//DTD Google Web Toolkit 1.7.0//EN\"\n"
"\"http://google-web-toolkit.googlecode.com/svn/tags/1.7.0/distro-source/core/src/gwt-module.dtd\">\n"
"<module>\n"
"    <!-- Builtin Vaadin and GWT widgets -->\n"
"    <inherits name=\"com.vaadin.Vaadin\" />\n"
"\n"
"    <!-- The entry-point for the client-side application -->\n"
"    <entry-point class=\"com.example.myapp.client.MyEntryPoint\"/>\n"
"</module>]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:143
#, no-c-format
msgid "You might rather want to inherit the <classname>com.google.gwt.user.User</classname> to get just the basic GWT widgets, and not the Vaadin-specific widgets and classes, most of which are unusable in pure client-side applications."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:150
#, no-c-format
msgid "You can put static resources, such as images or CSS stylesheets, in a <filename>public</filename> folder (not a Java package) under the folder of the descriptor file. When the module is compiled, the resources are copied to the output folder. Normally in pure client-side application development, it is easier to load them in the HTML host file or in a <classname>ClientBundle</classname> (see GWT documentation), but these methods are not compatible with server-side component integration, if you use the resources for that purpose as well."
msgstr ""

#. Tag: title
#: chapter-clientsideapp.xml:164
#, no-c-format
msgid "Compiling and Running a Client-Side Application"
msgstr ""

#. Tag: emphasis
#: chapter-clientsideapp.xml:167
#, no-c-format
msgid "Compilation of client-side modules other than widget sets with the Vaadin Plugin for Eclipse has recent changes and limitations at the time of writing of this edition and the information given here may not be accurate."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:173
#, no-c-format
msgid "The application needs to be compiled into JavaScript to run it in a browser. For deployment, and also initially for the first time when running the Development Mode, you need to do the compilation with the Vaadin Client Compiler, as described in <xref linkend=\"clientside.compiling\"/>."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:180
#, no-c-format
msgid "During development, it is easiest to compile with the Development Mode, which also allows debugging when you run it in debug mode in an IDE. To launch it, you need to execute the <classname>com.google.clientside.dev.DevMode</classname> class in the Vaadin JAR with the parameters such as the following:"
msgstr ""

#. Tag: programlisting
#: chapter-clientsideapp.xml:188
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[-noserver -war WebContent/clientside com.example.myapp.MyModule\n"
"-startupUrl http://localhost:8080/myproject/loaderpage.html\n"
"-bindAddress 127.0.0.1]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:190
#, no-c-format
msgid "See <xref linkend=\"clientside.debugging.devmode\"/> for a description of the parameters. The <parameter>startupUrl</parameter> should be the URL of the host page described in <xref linkend=\"clientsideapp.loading\"/>."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:196
#, no-c-format
msgid "In Eclipse, you can create a launch configuration to do the task, for example by creating it in the Vaadin section of project preferences and then modifying it appropriately."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:202
#, no-c-format
msgid "The parameter for the <parameter>-war</parameter> should be a path to a deployment folder that contains the compiled client-side module, in Eclipse under <filename>WebContent</filename>."
msgstr ""

#. Tag: title
#: chapter-clientsideapp.xml:210
#, no-c-format
msgid "Loading a Client-Side Application"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:212
#, no-c-format
msgid "You can load the JavaScript code of a client-side application in an HTML <emphasis>host page</emphasis> by including it with a <literal>&lt;script&gt;</literal> tag, for example as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-clientsideapp.xml:218
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
"  <head>\n"
"    <meta http-equiv=\"Content-Type\"\n"
"          content=\"text/html; charset=UTF-8\" />\n"
"\n"
"    <title>Embedding a Vaadin Application in HTML Page</title>\n"
"\n"
"    <!-- Load the Vaadin style sheet -->\n"
"    <link rel=\"stylesheet\"\n"
"          type=\"text/css\"\n"
"          href=\"/myproject/VAADIN/themes/reindeer/legacy-styles.css\"/>\n"
"  </head>\n"
"\n"
"  <body>\n"
"    <h1>A Pure Client-Side Application</h1>\n"
"    \n"
"    <script type=\"text/javascript\" language=\"javascript\"\n"
"            src=\"clientside/com.example.myapp.MyModule/\n"
"                 com.example.myapp.MyModule.nocache.js\">\n"
"    </script>\n"
"  </body>\n"
"</html>]]>"
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:220
#, no-c-format
msgid "The JavaScript module is loaded in a <literal>&lt;script&gt;</literal> element. The <literal>src</literal> parameter should be a relative link from the host page to the compiled JavaScript module."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:226
#, no-c-format
msgid "If the application uses any supplementary Vaadin widgets, and not just core GWT widgets, you need to include the Vaadin theme as was done in the example. The exact path to the style file depends on your project structure - the example is given for a regular Vaadin application where themes are contained in the <filename>VAADIN</filename> folder in the WAR."
msgstr ""

#. Tag: para
#: chapter-clientsideapp.xml:234
#, no-c-format
msgid "In addition to CSS and scripts, you can load any other resources needed by the client-side application in the host page."
msgstr ""
