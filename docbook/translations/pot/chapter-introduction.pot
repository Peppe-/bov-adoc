# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-11-14 14:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-introduction.xml:11
#, no-c-format
msgid "Introduction"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:13
#, no-c-format
msgid "This chapter gives a brief introduction to software development with Vaadin. We also try to give some insight about the design philosophy behind Vaadin and its history."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:20
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:22
#, no-c-format
msgid "Vaadin Framework is a Java web application development framework that is designed to make creation and maintenance of high quality web-based user interfaces easy. Vaadin supports two different programming models: server-side and client-side. The server-driven programming model is the more powerful one. It lets you forget the web and program user interfaces much like you would program a desktop application with conventional Java toolkits such as AWT, Swing, or SWT. But easier."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:32
#, no-c-format
msgid "While traditional web programming is a fun way to spend your time learning new web technologies, you probably want to be productive and concentrate on the application logic. The server-side Vaadin framework takes care of managing the user interface in the browser and the <firstterm>AJAX</firstterm> communications between the browser and the server. With the Vaadin approach, you do not need to learn and deal directly with browser technologies, such as HTML or JavaScript."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:43
#, no-c-format
msgid "Vaadin Application Architecture"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:54
#, no-c-format
msgid "illustrates the basic architectures of web applications made with Vaadin. The server-side application architecture consists of the <emphasis>server-side framework</emphasis> and a <emphasis>client-side engine</emphasis>. The engine runs in the browser as JavaScript code, rendering the user interface, and delivering user interaction to the server. The UI logic of an application runs as a Java Servlet in a Java application server."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:64
#, no-c-format
msgid "As the client-side engine is executed as JavaScript in the browser, no browser plugins are needed for using applications made with Vaadin. This gives it an edge over frameworks based on Flash, Java Applets, or other plugins. Vaadin relies on the support of Google Web Toolkit for a wide range of browsers, so that the developer does not need to worry about browser support."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:72
#, no-c-format
msgid "Because HTML, JavaScript, and other browser technologies are essentially invisible to the application logic, you can think of the web browser as only a thin client platform. A thin client displays the user interface and communicates user events to the server at a low level. The control logic of the user interface runs on a Java-based web server, together with your business logic. By contrast, a normal client-server architecture with a dedicated client application would include a lot of application specific communications between the client and the server. Essentially removing the user interface tier from the application architecture makes our approach a very effective one."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:85
#, no-c-format
msgid "Behind the server-driven development model, Vaadin makes the best use of AJAX (<firstterm>Asynchronous JavaScript and XML</firstterm>, see <xref linkend=\"architecture.technology.ajax\"/> for a description) techniques that make it possible to create Rich Internet Applications (RIA) that are as responsive and interactive as desktop applications."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:93
#, no-c-format
msgid "In addition to the server-side Java application development, you can develop on the client-side by making new widgets in Java, and even pure client-side applications that run solely in the browser. The Vaadin client-side framework includes Google Web Toolkit (GWT), which provides a compiler from Java to the JavaScript that runs in the browser, as well a full-featured user interface framework. With this approach, Vaadin is pure Java on both sides."
msgstr ""

#. Tag: primary
#: chapter-introduction.xml:101 chapter-introduction.xml:364
#, no-c-format
msgid "Google Web Toolkit"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:104
#, no-c-format
msgid "Vaadin uses a client-side engine for rendering the user interface of a server-side application in the browser. All the client-server communications are hidden well under the hood. <indexterm><primary>JavaScript</primary></indexterm> Vaadin is designed to be extensible, and you can indeed use any 3rd-party widgets easily, in addition to the component repertoire offered in Vaadin. If fact, you can find hundreds of add-ons in the Vaadin Directory."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:127
#, no-c-format
msgid "Vaadin Framework defines a clear separation between the structure of the user interface and its appearance and allows you to develop them separately. Our approach to this is <firstterm>themes</firstterm>, which control the appearance by CSS and (optional) HTML page templates. As Vaadin provides excellent default themes, you do not usually need to make much customization, but you can if you need to. For more about themes, see <xref linkend=\"themes\"/>."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:137
#, no-c-format
msgid "We hope that this is enough about the basic architecture and features of Vaadin for now. You can read more about it later in <xref linkend=\"architecture\"/>, or jump straight to more practical things in <xref linkend=\"application\"/>."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:146
#, no-c-format
msgid "Example Application Walkthrough"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:148
#, no-c-format
msgid "Let us follow the long tradition of first saying \"Hello World!\" when learning a new programming framework. First, using the primary server-side API."
msgstr ""

#. Tag: programlisting
#: chapter-introduction.xml:153
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[import com.vaadin.server.VaadinRequest;\n"
"import com.vaadin.ui.Label;\n"
"import com.vaadin.ui.UI;\n"
"\n"
"@Title(\"Hello Window\")\n"
"public class HelloWorld extends UI {\n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        // Create the content root layout for the UI\n"
"        VerticalLayout content = new VerticalLayout();\n"
"        setContent(content);\n"
"\n"
"        // Display the greeting\n"
"        content.addComponent(new Label(\"Hello World!\"));\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:155
#, no-c-format
msgid "A Vaadin application has one or more <emphasis>&ui;</emphasis>s that extend the <classname>com.vaadin.ui.&uiclass;</classname> class. A &ui; is a part of the web page in which the Vaadin application runs. An application can have multiple &ui;s in the same page, especially in portals, or in different windows or tabs. A UI is associated with a user session, and a session is created for each user who uses the application. In the context of our Hello World UI, it is sufficient to know that the underlying session is created when the user first accesses the application by opening the page, and the <methodname>init()</methodname> method is invoked at that time."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:167
#, no-c-format
msgid "In the above example, the page title, which is shown in the caption of the browser window or tab, is defined with an annotation. The example uses a layout component as the root content of the UI, as that is the case with most Vaadin applications, which normally have more than one component. It then creates a new <classname>Label</classname> user interface component, which displays simple text, and sets the text to \"Hello World!\". The label is added to the layout."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:177
#, no-c-format
msgid "The result of the Hello World application, when it is opened in a browser, is shown in <xref linkend=\"figure.intro.walkthrough\"/>."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:183
#, no-c-format
msgid "Hello World Application"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:191
#, no-c-format
msgid "To run the program, you can just package it as a web application WAR package and deploy it to a server, as explained in <xref linkend=\"application.environment\"/>."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:197
#, no-c-format
msgid "Developing a pure client-side application, you could write a Hello World just as easily, and also in Java:"
msgstr ""

#. Tag: programlisting
#: chapter-introduction.xml:202
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[public class HelloWorld implements EntryPoint {\n"
"    @Override\n"
"    public void onModuleLoad() {\n"
"        RootPanel.get().add(new Label(\"Hello, world!\"));\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:204
#, no-c-format
msgid "We do not set the title here, because it is usually defined in the HTML page in which the code is executed. The application would be compiled into JavaScript with the Vaadin Client Compiler (or GWT Compiler). It is more typical, however, to write client-side widgets, which you can then use from a server-side Vaadin application. For more information regarding client-side development, see <xref linkend=\"clientside\"/>."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:215
#, no-c-format
msgid "Support for the Eclipse IDE"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:217
#, no-c-format
msgid "While Vaadin is not bound to any specific IDE, and you can in fact easily use it without any IDE altogether, we provide special support for the Eclipse IDE, which has become the most used environment for Java development. The support is provided in the Vaadin Plugin for Eclipse, which helps you in:"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:226
#, no-c-format
msgid "Creating new Vaadin projects"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:230
#, no-c-format
msgid "Creating custom themes"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:234
#, no-c-format
msgid "Creating custom widgets"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:238
#, no-c-format
msgid "Creating composite components with a visual designer"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:242
#, no-c-format
msgid "Easily upgrading to a newer version of the Vaadin library"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:246
#, no-c-format
msgid "Using the Vaadin Plugin for Eclipse is the recommended way of installing Vaadin for development. Downloading the installation package that contains the JARs or defining Vaadin as a Maven dependency is also possible."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:252
#, no-c-format
msgid "Installing and updating the Eclipse plugin is covered in <xref linkend=\"getting-started.eclipse\"/> and the creation of a new Vaadin project using the plugin in <xref linkend=\"getting-started.first-project.creation\"/>. See <xref linkend=\"themes.eclipse\"/>, <xref linkend=\"gwt.eclipse\"/>, and <xref linkend=\"eclipse\"/> for instructions on using the different features of the plugin."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:264
#, no-c-format
msgid "Goals and Philosophy"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:266
#, no-c-format
msgid "Simply put, Vaadin's ambition is to be the best possible tool when it comes to creating web user interfaces for business applications. It is easy to adopt, as it is designed to support both entry-level and advanced programmers, as well as usability experts and graphic designers."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:273
#, no-c-format
msgid "When designing Vaadin, we have followed the philosophy inscribed in the following rules."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:279
#, no-c-format
msgid "Right tool for the right purpose"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:281
#, no-c-format
msgid "Because our goals are high, the focus must be clear. Vaadin is designed for creating web applications. It is not designed for creating websites or advertisement demos. You may find, for example, JSP/JSF or Flash more suitable for such purposes."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:290
#, no-c-format
msgid "Simplicity and maintainability"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:292
#, no-c-format
msgid "We have chosen to emphasize robustness, simplicity, and maintainability. This involves following the well-established best practices in user interface frameworks and ensuring that our implementation represents an ideal solution for its purpose without clutter or bloat."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:302
#, no-c-format
msgid "XML is not designed for programming"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:303
#, no-c-format
msgid "The Web is inherently document-centered and very much bound to the declarative presentation of user interfaces. The Vaadin framework frees the programmer from these limitations. It is far more natural to create user interfaces by programming them than by defining them in declarative templates, which are not flexible enough for complex and dynamic user interaction."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:314
#, no-c-format
msgid "Tools should not limit your work"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:315
#, no-c-format
msgid "There should not be any limits on what you can do with the framework: if for some reason the user interface components do not support what you need to achieve, it must be easy to add new ones to your application. When you need to create new components, the role of the framework is critical: it makes it easy to create re-usable components that are easy to maintain."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:327
#, no-c-format
msgid "Background"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:329
#, no-c-format
msgid "The Vaadin Framework was not written overnight. After working with web user interfaces since the beginning of the Web, a group of developers got together in 2000 to form IT Mill. The team had a desire to develop a new programming paradigm that would support the creation of real user interfaces for real applications using a real programming language."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:337
#, no-c-format
msgid "The library was originally called Millstone Library. The first version was used in a large production application that IT Mill designed and implemented for an international pharmaceutical company. IT Mill made the application already in the year 2001 and it is still in use. Since then, the company has produced dozens of large business applications with the library and it has proven its ability to solve hard problems easily."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:346
#, no-c-format
msgid "The next generation of the library, IT Mill Toolkit Release 4, was released in 2006. It introduced an entirely new AJAX-based presentation engine. This allowed the development of AJAX applications without the need to worry about communications between the client and the server."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:354
#, no-c-format
msgid "Release 5 Into the Open"
msgstr ""

#. Tag: primary
#: chapter-introduction.xml:357
#, no-c-format
msgid "IT Mill Toolkit"
msgstr ""

#. Tag: primary
#: chapter-introduction.xml:358
#, no-c-format
msgid "AJAX"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:358
#, no-c-format
msgid "IT Mill Toolkit 5, released initially at the end of 2007, took a significant step further into AJAX. The client-side rendering of the user interface was completely rewritten using GWT, the Google Web Toolkit."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:367
#, no-c-format
msgid "IT Mill Toolkit 5 introduced many significant improvements both in the server-side API and in the functionality. Rewriting the Client-Side Engine with GWT allowed the use of Java both on the client and the server-side. The transition from JavaScript to GWT made the development and integration of custom components and customization of existing components much easier than before, and it also allows easy integration of existing GWT components. The adoption of GWT on the client-side did not, by itself, cause any changes in the server-side API, because GWT is a browser technology that is hidden well behind the API. Also theming was completely revised in IT Mill Toolkit 5."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:380
#, no-c-format
msgid "The Release 5 was published under the Apache License 2, an unrestrictive open source license, to create faster expansion of the user base and to make the formation of a developer community possible."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:388
#, no-c-format
msgid "Birth of Vaadin Release 6"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:390
#, no-c-format
msgid "IT Mill Toolkit was renamed as <emphasis>Vaadin Framework</emphasis>, or Vaadin in short, in spring 2009. Later IT Mill, the company, was also renamed as Vaadin Ltd. Vaadin means an adult female semi-domesticated mountain reindeer in Finnish."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:397
#, no-c-format
msgid "With Vaadin 6, the number of developers using the framework exploded. Together with the release, the Vaadin Plugin for Eclipse was released, helping the creation of Vaadin projects. The introduction of Vaadin Directory in early 2010 gave it a further boost, as the number of available components multiplied almost overnight. Many of the originally experimental components have since then matured and are now used by thousands of developers. In 2013, we are seeing tremendous growth in the ecosystem around Vaadin. The size of the user community, at least if measured by forum activity, has already gone past the competing server-side frameworks and even GWT."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:412
#, no-c-format
msgid "The Major Revision with Vaadin 7"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:414
#, no-c-format
msgid "Vaadin 7 is a major revision that changes the Vaadin API much more than Vaadin 6 did. It is certainly more web-oriented than Vaadin 6 was. We are doing everything we can to help Vaadin rise high in the web universe. Some of this work is easy and almost routine - fixing bugs and implementing features. But going higher also requires standing firmer. That was one of the aims of Vaadin 7 - redesigning the product so that the new architecture enables Vaadin to reach over many long-standing challenges. Many of the changes required breaking API compatibility with Vaadin 6, especially in the client-side, but they are made with a strong desire to avoid carrying unnecessary legacy burden far into the future. Vaadin 7 includes a compatibility layer for making adoption of Vaadin 7 in existing applications easier."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:432
#, no-c-format
msgid "Inclusion of the Google Web Toolkit in Vaadin 7 is a significant development, as it means that we now provide support for GWT as well. When Google opened the GWT development in summer 2012, Vaadin (the company) joined the new GWT steering committee. As a member of the committee, Vaadin can work towards the success of GWT as a foundation of the Java web development community."
msgstr ""
