# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-11-13 16:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-charts.xml:4
#, no-c-format
msgid "Vaadin Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:6
#, no-c-format
msgid "This chapter provides the documentation of Vaadin Charts version 1.0. Some changes may apply to the final version."
msgstr ""

#. Tag: title
#: chapter-charts.xml:12
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-charts.xml:14
#, no-c-format
msgid "Vaadin Charts is a feature-rich interactive charting library for Vaadin. It provides a <classname>Chart</classname> and a <classname>Timeline</classname> component. The <classname>Chart</classname> can visualize one- and two-dimensional numeric data in many available chart types. The charts allow flexible configuration of all the chart elements as well as the visual style. The library includes a number of built-in visual themes, which you can extend further. The basic functionalities allow the user to interact with the chart elements in various ways, and you can define custom interaction with click events. The <classname>Timeline</classname> is a specialized component for visualizing time series, and is described in <xref linkend=\"charts.timeline\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:29
#, no-c-format
msgid "Vaadin Charts with Bar, Column, Area, and Pie Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:37
#, no-c-format
msgid "The data displayed in a chart can be one- or two dimensional tabular data, or scatter data with free X and Y values. Data displayed in range charts has minimum and maximum values instead of singular values."
msgstr ""

#. Tag: para
#: chapter-charts.xml:43
#, no-c-format
msgid "This chapter covers the basic use of Vaadin Charts and the chart configuration. For detailed documentation of the configuration parameters and classes, please refer to the JavaDoc API documentation of the library."
msgstr ""

#. Tag: para
#: chapter-charts.xml:49
#, no-c-format
msgid "In the following basic example, which we study further in <xref linkend=\"charts.basic-use\"/>, we demonstrate how to display one-dimensional data in a column graph and customize the X and Y axis labels and titles."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:55
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[\n"
"Chart chart = new Chart(ChartType.BAR);\n"
"chart.setWidth(\"400px\");\n"
"chart.setHeight(\"300px\");\n"
"        \n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Planets\");\n"
"conf.setSubTitle(\"The bigger they are the harder they pull\");\n"
"conf.getLegend().setEnabled(false); // Disable legend\n"
"\n"
"// The data\n"
"ListSeries series = new ListSeries(\"Diameter\");\n"
"series.setData(4900,  12100,  12800,\n"
"               6800,  143000, 125000,\n"
"               51100, 49500);\n"
"conf.addSeries(series);\n"
"\n"
"// Set the category labels on the axis correspondingly\n"
"XAxis xaxis = new XAxis();\n"
"xaxis.setCategories(\"Mercury\", \"Venus\",   \"Earth\",\n"
"                    \"Mars\",    \"Jupiter\", \"Saturn\",\n"
"                    \"Uranus\",  \"Neptune\");\n"
"xaxis.setTitle(\"Planet\");\n"
"conf.addxAxis(xaxis);\n"
"\n"
"// Set the Y axis title\n"
"YAxis yaxis = new YAxis();\n"
"yaxis.setTitle(\"Diameter\");\n"
"yaxis.getLabels().setFormatter(\n"
"  \"function() {return Math.floor(this.value/1000) + \\'Mm\\';}\");\n"
"yaxis.getLabels().setStep(2);\n"
"conf.addyAxis(yaxis);\n"
"        \n"
"layout.addComponent(chart);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:57
#, no-c-format
msgid "The resulting chart is shown in <xref linkend=\"figure.charts.overview.basicexample\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:63
#, no-c-format
msgid "Basic Chart Example"
msgstr ""

#. Tag: para
#: chapter-charts.xml:71
#, no-c-format
msgid "Vaadin Charts is based on Highcharts JS, a charting library written in JavaScript."
msgstr ""

#. Tag: title
#: chapter-charts.xml:77
#, no-c-format
msgid "Licensing"
msgstr ""

#. Tag: para
#: chapter-charts.xml:79
#, no-c-format
msgid "Vaadin Charts is a commercial product licensed under the CVAL License (Commercial Vaadin Add-On License). A license needs to be purchased for all use, including web deployments as well as intranet use. Using Vaadin Charts does not require purchasing a separate Highcharts JS license."
msgstr ""

#. Tag: para
#: chapter-charts.xml:86
#, no-c-format
msgid "The commercial licenses can be purchased from the <link xlink:href=\"https://vaadin.com/directory\">Vaadin Directory</link>, where you can also find the license details and download the Vaadin Charts."
msgstr ""

#. Tag: title
#: chapter-charts.xml:95
#, no-c-format
msgid "Installing Vaadin Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:97
#, no-c-format
msgid "Vaadin Charts is available for both Vaadin 7 and Vaadin 6. It can be installed from an installation package, which you can download from the Vaadin Directory, or as a Maven or Ivy dependency. For detailed instructions, please see <xref linkend=\"addons\"/>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:104
#, no-c-format
msgid "Once you have installed the library in your project, you need to compile the widget set."
msgstr ""

#. Tag: title
#: chapter-charts.xml:111
#, no-c-format
msgid "Basic Use"
msgstr ""

#. Tag: para
#: chapter-charts.xml:113
#, no-c-format
msgid "The <classname>Chart</classname> is a regular Vaadin component, which you can add to a layout. You can give the chart type in the constructor or set it later in the chart model. A chart has a height of 400 pixels and takes full width by default, which settings you may often need to customize."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:120
#, no-c-format
msgid ""
"<![CDATA[Chart chart = new Chart(ChartType.COLUMN);\n"
"chart.setWidth(\"400px\");  // 100% by default\n"
"chart.setHeight(\"300px\"); // 400px by default]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:122
#, no-c-format
msgid "The chart types are described in <xref linkend=\"charts.charttypes\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:127
#, no-c-format
msgid "Configuration"
msgstr ""

#. Tag: para
#: chapter-charts.xml:129
#, no-c-format
msgid "After creating a chart, you need to configure it further. At the least, you need to specify the data series to be displayed in the configuration."
msgstr ""

#. Tag: para
#: chapter-charts.xml:134
#, no-c-format
msgid "Most methods available in the <classname>Chart</classname> object handle its basic Vaadin component properties. All the chart-specific properties are in a separate <classname>Configuration</classname> object, which you can access with the <methodname>getConfiguration()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:141
#, no-c-format
msgid ""
"<![CDATA[Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Reindeer Kills by Predators\");\n"
"conf.setSubTitle(\"Kills Grouped by Counties\");]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:143
#, no-c-format
msgid "The configuration properties are described in more detail in <xref linkend=\"charts.configuration\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:150 chapter-charts.xml:373 chapter-charts.xml:443
#: chapter-charts.xml:574 chapter-charts.xml:642 chapter-charts.xml:882
#: chapter-charts.xml:1188 chapter-charts.xml:1247 chapter-charts.xml:1353
#, no-c-format
msgid "Plot Options"
msgstr ""

#. Tag: para
#: chapter-charts.xml:152
#, no-c-format
msgid "Many chart settings can be configured in the <emphasis>plot options</emphasis> of the chart or data series. Some of the options are chart type specific, as described later for each chart type, while many are shared."
msgstr ""

#. Tag: para
#: chapter-charts.xml:159
#, no-c-format
msgid "For example, for line charts, you could disable the point markers as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:164
#, no-c-format
msgid ""
"<![CDATA[// Disable markers from lines\n"
"PlotOptionsLine plotOptions = new PlotOptionsLine();\n"
"plotOptions.setMarker(new Marker(false));\n"
"conf.setPlotOptions(plotOptions);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:166
#, no-c-format
msgid "You can set the plot options for the entire chart or for each data series separately, allowing also mixed-type charts, as described in <xref linkend=\"charts.basic-use.mixed\"/>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:172
#, no-c-format
msgid "The shared plot options are described in <xref linkend=\"charts.configuration.plotoptions\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:179 chapter-charts.xml:1485
#, no-c-format
msgid "Chart Data"
msgstr ""

#. Tag: para
#: chapter-charts.xml:181
#, no-c-format
msgid "The data displayed in a chart is stored in the chart configuration as a list of <classname>Series</classname> objects. A new data series is added in a chart with the <methodname>addSeries()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:187
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[ListSeries series = new ListSeries(\"Diameter\");\n"
"series.setData(4900,  12100,  12800,\n"
"               6800,  143000, 125000,\n"
"               51100, 49500);\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:189
#, no-c-format
msgid "The data can be specified with a number of different series types <classname>DataSeries</classname>, <classname>ListSeries</classname>, <classname>AreaListSeries</classname>, and <classname>RangeSeries</classname>. The data configuration is described in more detail in <xref linkend=\"charts.data\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:199 chapter-charts.xml:1023
#, no-c-format
msgid "Axis Configuration"
msgstr ""

#. Tag: para
#: chapter-charts.xml:201
#, no-c-format
msgid "One of the most common tasks for charts is customizing its axes. At the least, you usually want to set the axis titles. Usually you also want to specify labels for data values in the axes."
msgstr ""

#. Tag: para
#: chapter-charts.xml:207
#, no-c-format
msgid "When an axis is categorical rather than numeric, you can define category labels for the items. They must be in the same order and the same number as you have values in your data series."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:213
#, no-c-format
msgid ""
"<![CDATA[XAxis xaxis = new XAxis();\n"
"xaxis.setCategories(\"Mercury\", \"Venus\",   \"Earth\",\n"
"                    \"Mars\",    \"Jupiter\", \"Saturn\",\n"
"                    \"Uranus\",  \"Neptune\");\n"
"xaxis.setTitle(\"Planet\");\n"
"conf.addxAxis(xaxis);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:215
#, no-c-format
msgid "Formatting of numeric labels can be done with JavaScript expressions, for example as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:220
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Set the Y axis title\n"
"YAxis yaxis = new YAxis();\n"
"yaxis.setTitle(\"Diameter\");\n"
"yaxis.getLabels().setFormatter(\n"
"  \"function() {return Math.floor(this.value/1000) + \\'Mm\\';}\");\n"
"yaxis.getLabels().setStep(2);\n"
"conf.addyAxis(yaxis);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:224
#, no-c-format
msgid "Displaying Multiple Series"
msgstr ""

#. Tag: para
#: chapter-charts.xml:226
#, no-c-format
msgid "The simplest data, which we saw in the examples earlier in this chapter, is one-dimensional and can be represented with a single data series. Most chart types support multiple data series, which are used for representing two-dimensional data. For example, in line charts, you can have multiple lines and in column charts the columns for different series are grouped by category. Different chart types can offer alternative display modes, such as stacked columns. The legend displays the symbols for each series."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:236
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// The data\n"
"// Source: V. Maijala, H. Norberg, J. Kumpula, M. Nieminen\n"
"// Calf production and mortality in the Finnish\n"
"// reindeer herding area. 2002.\n"
"String predators[] = {\"Bear\", \"Wolf\", \"Wolverine\", \"Lynx\"};\n"
"int kills[][] = {        // Location:\n"
"        {8,   0,  7, 0}, // Muddusjarvi\n"
"        {30,  1, 30, 2}, // Ivalo\n"
"        {37,  0, 22, 2}, // Oraniemi\n"
"        {13, 23,  4, 1}, // Salla\n"
"        {3,  10,  9, 0}, // Alakitka\n"
"};    \n"
"\n"
"// Create a data series for each numeric column in the table\n"
"for (int predator = 0; predator < 4; predator++) {\n"
"    ListSeries series = new ListSeries();\n"
"    series.setName(predators[predator]);\n"
"    \n"
"    // The rows of the table\n"
"    for (int location = 0; location < kills.length; location++)\n"
"        series.addData(kills[location][predator]);\n"
"    conf.addSeries(series);\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:238
#, no-c-format
msgid "The result for both regular and stacked column chart is shown in <xref linkend=\"figure.charts.basic-use.two-dimensional\"/>. Stacking is enabled with <methodname>setStacking()</methodname> in <classname>PlotOptionsColumn</classname>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:246
#, no-c-format
msgid "Multiple Series in a Chart"
msgstr ""

#. Tag: title
#: chapter-charts.xml:256
#, no-c-format
msgid "Mixed Type Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:258
#, no-c-format
msgid "Each data series has a <classname>PlotOptions</classname> object, just like the entire chart has, which allows using different settings for each series. This includes the chart type, so you can mix series with different chart types in the same chart."
msgstr ""

#. Tag: para
#: chapter-charts.xml:265
#, no-c-format
msgid "The chart type of a series is determined by the type of the plot options. For example, to get a line chart, you need to use <classname>PlotOptionsLine</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:271
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// A data series as column graph\n"
"DataSeries series1 = new DataSeries();\n"
"PlotOptionsColumn options1 = new PlotOptionsColumn();\n"
"options1.setFillColor(SolidColor.BLUE);\n"
"series1.setPlotOptions(options1);\n"
"series1.setData(4900,  12100,  12800,\n"
"    6800,  143000, 125000,\n"
"    51100, 49500);\n"
"conf.addSeries(series1);\n"
"\n"
"// A data series as line graph\n"
"ListSeries series2 = new ListSeries(\"Diameter\");\n"
"PlotOptionsLine options2 = new PlotOptionsLine();\n"
"options2.setLineColor(SolidColor.RED);\n"
"series2.setPlotOptions(options2);\n"
"series2.setData(4900,  12100,  12800,\n"
"    6800,  143000, 125000,\n"
"    51100, 49500);\n"
"conf.addSeries(series2);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:276
#, no-c-format
msgid "Chart Themes"
msgstr ""

#. Tag: para
#: chapter-charts.xml:278
#, no-c-format
msgid "The visual style and essentially any other chart configuration can be defined in a <emphasis>theme</emphasis>. All charts shown in a UI may have only one theme, which can be set with <methodname>setTheme()</methodname> in the <classname>ChartOptions</classname>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:285
#, no-c-format
msgid "In Vaadin 7, the <classname>ChartOptions</classname> is a <classname>UI</classname> extension that is created and referenced by calling the <methodname>get()</methodname> as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:291
#, no-c-format
msgid ""
"<![CDATA[// Set Charts theme for the current UI\n"
"ChartOptions.get().setTheme(new SkiesTheme());]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:293
#, no-c-format
msgid "In Vaadin 6, it is an invisible component that you need to create and add to the window. There may be only one such component in the window and it must be before any <classname>Chart</classname> component."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:299
#, no-c-format
msgid ""
"<![CDATA[ChartOptions options = new ChartOptions();\n"
"options.setTheme(new SkiesTheme());\n"
"content.addComponent(options);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:301
#, no-c-format
msgid "The <classname>VaadinTheme</classname> is the default chart theme in Vaadin Charts. Other available themes are <classname>GrayTheme</classname>, <classname>GridTheme</classname>, and <classname>SkiesTheme</classname>. The default theme in Highcharts can be set with the <classname>HighChartsDefaultTheme</classname>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:309
#, no-c-format
msgid "A theme is a Vaadin Charts configuration that is used as a template for the configuration when rendering the chart."
msgstr ""

#. Tag: title
#: chapter-charts.xml:317
#, no-c-format
msgid "Chart Types"
msgstr ""

#. Tag: para
#: chapter-charts.xml:319
#, no-c-format
msgid "Vaadin Charts comes with over a dozen different chart types. You normally specify the chart type in the constructor of the <classname>Chart</classname> object. The available chart types are defined in the <classname>ChartType</classname> enum. You can later read or set the chart type with the <literal>chartType</literal> property of the chart model, which you can get with <methodname>getConfiguration().getChart()</methodname>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:328
#, no-c-format
msgid "Each chart type has its specific plot options and support its specific collection of chart features. They also have specific requirements for the data series."
msgstr ""

#. Tag: para
#: chapter-charts.xml:334
#, no-c-format
msgid "The basic chart types and their variants are covered in the following subsections."
msgstr ""

#. Tag: title
#: chapter-charts.xml:340
#, no-c-format
msgid "Line and Spline Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:342
#, no-c-format
msgid "Line charts connect the series of data points with lines. In the basic line charts the lines are straight, while in spline charts the lines are smooth polynomial interpolations between the data points."
msgstr ""

#. Tag: title
#: chapter-charts.xml:349
#, no-c-format
msgid "Line Chart Subtypes"
msgstr ""

#. Tag: entry
#: chapter-charts.xml:355 chapter-charts.xml:407 chapter-charts.xml:508
#, no-c-format
msgid "ChartType"
msgstr ""

#. Tag: entry
#: chapter-charts.xml:356 chapter-charts.xml:408 chapter-charts.xml:509
#, no-c-format
msgid "Plot Options Class"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:361
#, no-c-format
msgid "LINE"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:362
#, no-c-format
msgid "PlotOptionsLine"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:365
#, no-c-format
msgid "SPLINE"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:366
#, no-c-format
msgid "PlotOptionsSpline"
msgstr ""

#. Tag: para
#: chapter-charts.xml:375 chapter-charts.xml:461
#, no-c-format
msgid "The <parameter>color</parameter> property in the line plot options defines the line color, <parameter>lineWidth</parameter> the line width, and <parameter>dashStyle</parameter> the dash pattern for the lines."
msgstr ""

#. Tag: para
#: chapter-charts.xml:382 chapter-charts.xml:468
#, no-c-format
msgid "See <xref linkend=\"charts.charttypes.scatter\"/> for plot options regarding markers and other data point properties. The markers can also be configured for each data point."
msgstr ""

#. Tag: title
#: chapter-charts.xml:391
#, no-c-format
msgid "Area Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:393
#, no-c-format
msgid "Area charts are like line charts, except that the area between the line and the Y axis is painted with a transparent color. In addition to the base type, chart type combinations for spline interpolation and ranges are supported."
msgstr ""

#. Tag: title
#: chapter-charts.xml:401
#, no-c-format
msgid "Area Chart Subtypes"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:413
#, no-c-format
msgid "AREA"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:414
#, no-c-format
msgid "PlotOptionsArea"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:417
#, no-c-format
msgid "AREASPLINE"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:418
#, no-c-format
msgid "PlotOptionsAreaSpline"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:421
#, no-c-format
msgid "AREARANGE"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:422
#, no-c-format
msgid "PlotOptionsAreaRange"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:425
#, no-c-format
msgid "AREASPLINERANGE"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:426
#, no-c-format
msgid "PlotOptionsAreaSplineRange"
msgstr ""

#. Tag: para
#: chapter-charts.xml:432
#, no-c-format
msgid "In area range charts, the area between a lower and upper value is painted with a transparent color. The data series must specify the minimum and maximum values for the Y coordinates, defined either with <classname>RangeSeries</classname>, as described in <xref linkend=\"charts.data.rangeseries\"/>, or with <classname>DataSeries</classname>, described in <xref linkend=\"charts.data.dataseries\"/>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:445
#, no-c-format
msgid "Area charts support <emphasis>stacking</emphasis>, so that multiple series are piled on top of each other. You enable stacking from the plot options with <methodname>setStacking()</methodname>. The <parameter>Stacking.NORMAL</parameter> stacking mode does a normal summative stacking, while the <parameter>Stacking.PERCENT</parameter> handles them as proportions."
msgstr ""

#. Tag: para
#: chapter-charts.xml:454
#, no-c-format
msgid "The fill color for the area is defined with the <parameter>fillColor</parameter> property and its transparency with <parameter>fillOpacity</parameter> (the opposite of transparency) with a value between 0.0 and 1.0."
msgstr ""

#. Tag: title
#: chapter-charts.xml:477
#, no-c-format
msgid "Column and Bar Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:479
#, no-c-format
msgid "Column and bar charts illustrate values as vertical or horizontal bars, respectively. The two chart types are essentially equivalent, just as if the orientation of the axes was inverted."
msgstr ""

#. Tag: para
#: chapter-charts.xml:485
#, no-c-format
msgid "Multiple data series, that is, two-dimensional data, are shown with thinner bars or columns grouped by their category, as described in <xref linkend=\"charts.basic-use.two-dimensional\"/>. Enabling stacking with <methodname>setStacking()</methodname> in plot options stacks the columns or bars of different series on top of each other."
msgstr ""

#. Tag: para
#: chapter-charts.xml:493
#, no-c-format
msgid "You can also have <parameter>COLUMNRANGE</parameter> charts that illustrate a range between a lower and an upper value, as described in <xref linkend=\"charts.charttypes.rangecharts\"/>. They require the use of <classname>RangeSeries</classname> for defining the lower and upper values."
msgstr ""

#. Tag: title
#: chapter-charts.xml:502
#, no-c-format
msgid "Column and Bar Chart Subtypes"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:514
#, no-c-format
msgid "COLUMN"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:515
#, no-c-format
msgid "PlotOptionsColumn"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:518
#, no-c-format
msgid "COLUMNRANGE"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:519
#, no-c-format
msgid "PlotOptionsColumnRange"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:522
#, no-c-format
msgid "<parameter>BAR</parameter>"
msgstr ""

#. Tag: classname
#: chapter-charts.xml:523
#, no-c-format
msgid "PlotOptionsBar"
msgstr ""

#. Tag: para
#: chapter-charts.xml:529
#, no-c-format
msgid "See the API documentation for details regarding the plot options."
msgstr ""

#. Tag: title
#: chapter-charts.xml:535
#, no-c-format
msgid "Error Bars"
msgstr ""

#. Tag: para
#: chapter-charts.xml:537
#, no-c-format
msgid "An error bars visualize errors, or high and low values, in statistical data. They typically represent high and low values in data or a multitude of standard deviation, a percentile, or a quantile. The high and low values are represented as horizontal lines, or \"whiskers\", connected by a vertical stem."
msgstr ""

#. Tag: para
#: chapter-charts.xml:545
#, no-c-format
msgid "While error bars technically are a chart type (<literal>ChartType.ERRORBAR</literal>), you normally use them together with some primary chart type, such as a scatter or column chart."
msgstr ""

#. Tag: title
#: chapter-charts.xml:552
#, no-c-format
msgid "Error Bars in a Scatter Chart"
msgstr ""

#. Tag: para
#: chapter-charts.xml:560
#, no-c-format
msgid "To display the error bars for data points, you need to have a separate data series for the low and high values. The data series needs to use the <classname>PlotOptionsErrorBar</classname> plot options type."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:566
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[// Create a chart of some primary type\n"
"Chart chart = new Chart(ChartType.SCATTER);\n"
"chart.setWidth(\"600px\");\n"
"chart.setHeight(\"400px\");\n"
"\n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Average Temperatures in Turku\");\n"
"conf.getLegend().setEnabled(false);\n"
"\n"
"// The primary data series\n"
"ListSeries averages = new ListSeries(\n"
"    -6, -6.5, -4, 3, 9, 14, 17, 16, 11, 6, 2, -2.5);\n"
"\n"
"// Error bar data series with low and high values\n"
"DataSeries errors = new DataSeries();\n"
"errors.add(new DataSeriesItem(0,  -9, -3));\n"
"errors.add(new DataSeriesItem(1, -10, -3));\n"
"errors.add(new DataSeriesItem(2,  -8,  1));\n"
"...\n"
"\n"
"// Configure the stem and whiskers in error bars \n"
"PlotOptionsErrorBar barOptions = new PlotOptionsErrorBar();\n"
"barOptions.setStemColor(SolidColor.GREY);\n"
"barOptions.setStemWidth(2);\n"
"barOptions.setStemDashStyle(DashStyle.DASH);\n"
"barOptions.setWhiskerColor(SolidColor.BROWN);\n"
"barOptions.setWhiskerLength(80); // 80% of category width\n"
"barOptions.setWhiskerWidth(2); // Pixels\n"
"errors.setPlotOptions(barOptions);\n"
"\n"
"// The errors should be drawn lower\n"
"conf.addSeries(errors);\n"
"conf.addSeries(averages);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:568
#, no-c-format
msgid "Note that you should add the error bar series first, to have it rendered lower in the chart."
msgstr ""

#. Tag: para
#: chapter-charts.xml:576
#, no-c-format
msgid "Plot options for error bar charts have type <classname>PlotOptionsErrorBar</classname>. It has the following chart-specific plot option properties:"
msgstr ""

#. Tag: term
#: chapter-charts.xml:584
#, no-c-format
msgid "<parameter>whiskerColor</parameter>, <parameter>whiskerWidth</parameter>, and <parameter>whiskerLength</parameter>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:586
#, no-c-format
msgid "The color, width (vertical thickness), and length of the horizontal \"whiskers\" that indicate high and low values."
msgstr ""

#. Tag: term
#: chapter-charts.xml:593
#, no-c-format
msgid "<parameter>stemColor</parameter>, <parameter>stemWidth</parameter>, and <parameter>stemDashStyle</parameter>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:595
#, no-c-format
msgid "The color, width (thickness), and line style of the vertical \"stems\" that connect the whiskers. In box plot charts, which also have stems, they extend from the quadrintile box."
msgstr ""

#. Tag: title
#: chapter-charts.xml:608
#, no-c-format
msgid "Box Plot Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:610
#, no-c-format
msgid "Box plot charts display the distribution of statistical variables. A data point has a median, represented with a horizontal line, upper and lower quartiles, represented by a box, and a low and high value, represented with T-shaped \"whiskers\". The exact semantics of the box symbols are up to you."
msgstr ""

#. Tag: para
#: chapter-charts.xml:618
#, no-c-format
msgid "Box plot chart is closely related to the error bar chart described in <xref linkend=\"charts.charttypes.errorbar\"/>, sharing the box and whisker elements."
msgstr ""

#. Tag: title
#: chapter-charts.xml:625
#, no-c-format
msgid "Box Plot Chart"
msgstr ""

#. Tag: para
#: chapter-charts.xml:633
#, no-c-format
msgid "The chart type for box plot charts is <literal>ChartType.BOXPLOT</literal>. You normally have just one data series, so it is meaningful to disable the legend."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:639
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[Chart chart = new Chart(ChartType.BOXPLOT);\n"
"chart.setWidth(\"400px\");\n"
"chart.setHeight(\"300px\");\n"
"\n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Orienteering Split Times\");\n"
"conf.getLegend().setEnabled(false);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:644
#, no-c-format
msgid "The plot options for box plots have type <classname>PlotOptionsBoxPlot</classname>, which extends the slightly more generic <classname>PlotOptionsErrorBar</classname>. They have the following plot option properties:"
msgstr ""

#. Tag: term
#: chapter-charts.xml:653
#, no-c-format
msgid "<parameter>medianColor</parameter>, <parameter>medianWidth</parameter>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:655
#, no-c-format
msgid "Color and width (vertical thickness) of the horizontal median indicator line."
msgstr ""

#. Tag: para
#: chapter-charts.xml:663
#, no-c-format
msgid "For example:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:667
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[// Set median line color and thickness\n"
"PlotOptionsBoxPlot plotOptions = new PlotOptionsBoxPlot();\n"
"plotOptions.setMedianColor(SolidColor.BLUE);\n"
"plotOptions.setMedianWidth(3);\n"
"conf.setPlotOptions(plotOptions);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:671 chapter-charts.xml:923
#, no-c-format
msgid "Data Model"
msgstr ""

#. Tag: para
#: chapter-charts.xml:673
#, no-c-format
msgid "As the data points in box plots have five different values instead of the usual one, they require using a special <classname>BoxPlotItem</classname>. You can give the different values with the setters, or all at once in the constructor."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:680
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[// Orienteering control point times for runners\n"
"double data[][] = orienteeringdata(); \n"
"\n"
"DataSeries series = new DataSeries();\n"
"for (double cpointtimes[]: data) {\n"
"    StatAnalysis analysis = new StatAnalysis(cpointtimes);\n"
"    series.add(new BoxPlotItem(analysis.low(),\n"
"                               analysis.firstQuartile(),\n"
"                               analysis.median(),\n"
"                               analysis.thirdQuartile(),\n"
"                               analysis.high()));\n"
"}\n"
"conf.setSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:682
#, no-c-format
msgid "If the \"low\" and \"high\" attributes represent an even smaller quantile, or a larger multiple of standard deviation, you can have outliers. You can plot them with a separate data series, with"
msgstr ""

#. Tag: title
#: chapter-charts.xml:691
#, no-c-format
msgid "Scatter Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:693
#, no-c-format
msgid "Scatter charts display a set of unconnected data points. The name refers to freely given X and Y coordinates, so the <classname>DataSeries</classname> or <classname>ContainerSeries</classname> are usually the most meaningful data series types for scatter charts."
msgstr ""

#. Tag: title
#: chapter-charts.xml:702
#, no-c-format
msgid "Scatter Chart"
msgstr ""

#. Tag: para
#: chapter-charts.xml:710
#, no-c-format
msgid "The chart type of a scatter chart is <parameter>ChartType.SCATTER</parameter>. Its options can be configured in a <classname>PlotOptionsScatter</classname> object, although it does not have any chart-type specific options."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:717
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[Chart chart = new Chart(ChartType.SCATTER);\n"
"chart.setWidth(\"500px\");\n"
"chart.setHeight(\"500px\");\n"
"        \n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Random Sphere\");\n"
"conf.getLegend().setEnabled(false); // Disable legend\n"
"\n"
"PlotOptionsScatter options = new PlotOptionsScatter();\n"
"// ... Give overall plot options here ...\n"
"conf.setPlotOptions(options);\n"
"        \n"
"DataSeries series = new DataSeries();\n"
"for (int i=0; i<300; i++) {\n"
"    double lng = Math.random() * 2 * Math.PI;\n"
"    double lat = Math.random() * Math.PI - Math.PI/2;\n"
"    double x   = Math.cos(lat) * Math.sin(lng);\n"
"    double y   = Math.sin(lat);\n"
"    double z   = Math.cos(lng) * Math.cos(lat);\n"
"    \n"
"    DataSeriesItem point = new DataSeriesItem(x,y);\n"
"    Marker marker = new Marker();\n"
"    // Make settings as described later\n"
"    point.setMarker(marker);\n"
"    series.add(point);\n"
"}\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:719
#, no-c-format
msgid "The result was shown in <xref linkend=\"figure.charts.charttypes.scatter\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:724
#, no-c-format
msgid "Data Point Markers"
msgstr ""

#. Tag: para
#: chapter-charts.xml:726
#, no-c-format
msgid "Scatter charts and other charts that display data points, such as line and spline charts, visualize the points with <emphasis>markers</emphasis>. The markers can be configured with the <classname>Marker</classname> property objects available from the plot options of the relevant chart types, as well as at the level of each data point, in the <classname>DataSeriesItem</classname>. You need to create the marker and apply it with the <methodname>setMarker()</methodname> method in the plot options or the data series item."
msgstr ""

#. Tag: para
#: chapter-charts.xml:738
#, no-c-format
msgid "For example, to set the marker for an individual data point:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:742
#, no-c-format
msgid ""
"<![CDATA[DataSeriesItem point = new DataSeriesItem(x,y);\n"
"Marker marker = new Marker();\n"
"// ... Make any settings ...\n"
"point.setMarker(marker);\n"
"series.add(point);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:746
#, no-c-format
msgid "Marker Shape Properties"
msgstr ""

#. Tag: para
#: chapter-charts.xml:748
#, no-c-format
msgid "A marker has a <parameter>lineColor</parameter> and a <parameter>fillColor</parameter>, which are set using a <classname>Color</classname> object. Both solid colors and gradients are supported. You can use a <classname>SolidColor</classname> to specify a solid fill color by RGB values or choose from a selection of predefined colors in the class."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:757
#, no-c-format
msgid ""
"<![CDATA[// Set line width and color\n"
"marker.setLineWidth(1); // Normally zero width\n"
"marker.setLineColor(SolidColor.BLACK);\n"
"\n"
"// Set RGB fill color\n"
"int level = (int) Math.round((1-z)*127);\n"
"marker.setFillColor(\n"
"        new SolidColor(255-level, 0, level));\n"
"point.setMarker(marker);\n"
"series.add(point);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:759
#, no-c-format
msgid "You can also use a color gradient with <classname>GradientColor</classname>. Both linear and radial gradients are supported, with multiple color stops."
msgstr ""

#. Tag: para
#: chapter-charts.xml:765
#, no-c-format
msgid "Marker size is determined by the <parameter>radius</parameter> parameter, which is given in pixels. The actual visual radius includes also the line width."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:771
#, no-c-format
msgid "<![CDATA[marker.setRadius((z+1)*5);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:775
#, no-c-format
msgid "Marker Symbols"
msgstr ""

#. Tag: para
#: chapter-charts.xml:777
#, no-c-format
msgid "Markers are visualized either with a shape or an image symbol. You can choose the shape from a number of built-in shapes defined in the <classname>MarkerSymbolEnum</classname> enum (<parameter>CIRCLE</parameter>, <parameter>SQUARE</parameter>, <parameter>DIAMOND</parameter>, <parameter>TRIANGLE</parameter>, or <parameter>TRIANGLE_DOWN</parameter>). These shapes are drawn with a line and fill, which you can set as described above."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:787
#, no-c-format
msgid "<![CDATA[marker.setSymbol(MarkerSymbolEnum.DIAMOND);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:789
#, no-c-format
msgid "You can also use any image accessible by a URL by using a <classname>MarkerSymbolUrl</classname> symbol. If the image is deployed with your application, such as in a theme folder, you can determine its URL as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:796
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[String url = VaadinServlet.getCurrent().getServletContext()\n"
"    .getContextPath() + \"/VAADIN/themes/mytheme/img/smiley.png\";\n"
"marker.setSymbol(new MarkerSymbolUrl(url));]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:798
#, no-c-format
msgid "The line, radius, and color properties are not applicable to image symbols."
msgstr ""

#. Tag: title
#: chapter-charts.xml:806
#, no-c-format
msgid "Bubble Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:808
#, no-c-format
msgid "Bubble charts are a special type of scatter charts for representing three-dimensional data points with different point sizes. We demonstrated the same possibility with scatter charts in <xref linkend=\"charts.charttypes.scatter\"/>, but the bubble charts make it easier to define the size of a point by its third (Z) dimension, instead of the radius property. The bubble size is scaled automatically, just like for other dimensions. The default point style is also more bubbly."
msgstr ""

#. Tag: title
#: chapter-charts.xml:819
#, no-c-format
msgid "Bubble Chart"
msgstr ""

#. Tag: para
#: chapter-charts.xml:827
#, no-c-format
msgid "The chart type of a bubble chart is <parameter>ChartType.BUBBLE</parameter>. Its options can be configured in a <classname>PlotOptionsBubble</classname> object, which has a single chart-specific property, <parameter>displayNegative</parameter>, which controls whether bubbles with negative values are displayed at all. More typically, you want to configure the bubble <parameter>marker</parameter>. The bubble tooltip is configured in the basic configuration. The Z coordinate value is available in the formatter JavaScript with <literal>this.point.z</literal> reference."
msgstr ""

#. Tag: para
#: chapter-charts.xml:839
#, no-c-format
msgid "The bubble radius is scaled linearly between a minimum and maximum radius. If you would rather scale by the area of the bubble, you can approximate that by taking square root of the Z values."
msgstr ""

#. Tag: para
#: chapter-charts.xml:845
#, no-c-format
msgid "In the following example, we overlay a bubble chart over a world map background. We customize the bubbles to be more round with spherical color gradient. Note that square root is taken of the Z coordinate to"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:851
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a bubble chart \n"
"Chart chart = new Chart(ChartType.BUBBLE);\n"
"chart.setWidth(\"640px\"); chart.setHeight(\"350px\");\n"
"        \n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Champagne Consumption by Country\");\n"
"conf.getLegend().setEnabled(false); // Disable legend\n"
"conf.getTooltip().setFormatter(\"this.point.name + ': ' + \" +\n"
"  \"Math.round(100*(this.point.z * this.point.z))/100.0 + \" +\n"
"  \"' M bottles'\");\n"
"        \n"
"// World map as background\n"
"String url = VaadinServlet.getCurrent().getServletContext()\n"
"    .getContextPath() + \"/VAADIN/themes/mytheme/img/map.png\";\n"
"conf.getChart().setPlotBackgroundImage(url);\n"
"\n"
"// Show more bubbly bubbles with spherical color gradient\n"
"PlotOptionsBubble plotOptions = new PlotOptionsBubble();\n"
"Marker marker = new Marker();\n"
"GradientColor color = GradientColor.createRadial(0.4, 0.3, 0.7);\n"
"color.addColorStop(0.0, new SolidColor(255, 255, 255, 0.5));\n"
"color.addColorStop(1.0, new SolidColor(170, 70, 67, 0.5));\n"
"marker.setFillColor(color);\n"
"plotOptions.setMarker(marker);\n"
"conf.setPlotOptions(plotOptions);\n"
"        \n"
"// Source: CIVC - Les expeditions de vins de Champagne en 2011\n"
"DataSeries series = new DataSeries(\"Countries\");\n"
"Object data[][] = {\n"
"        {\"France\",         181.6},\n"
"        {\"United Kingdom\",  34.53},\n"
"        {\"United States\",   19.37},\n"
"        ...\n"
"};\n"
"for (Object[] country: data) {\n"
"    String name = (String) country[0];\n"
"    double amount = (Double) country[1];\n"
"    Coordinate pos = getCountryCoordinates(name); \n"
"\n"
"    DataSeriesItem3d item = new DataSeriesItem3d();\n"
"    item.setX(pos.longitude * Math.cos(pos.latitude/2.0 *\n"
"                                       (Math.PI/160)));\n"
"    item.setY(pos.latitude * 1.2);\n"
"    item.setZ(Math.sqrt(amount));\n"
"    item.setName(name);\n"
"    series.add(item);\n"
"}\n"
"conf.addSeries(series);\n"
"        \n"
"// Set the category labels on the axis correspondingly\n"
"XAxis xaxis = new XAxis();\n"
"xaxis.setExtremes(-180, 180);\n"
"...\n"
"conf.addxAxis(xaxis);\n"
"\n"
"// Set the Y axis title\n"
"YAxis yaxis = new YAxis();\n"
"yaxis.setExtremes(-90, 90);\n"
"...\n"
"conf.addyAxis(yaxis);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:855
#, no-c-format
msgid "Pie Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:857
#, no-c-format
msgid "A pie chart illustrates data values as sectors of size proportionate to the sum of all values. The pie chart is enabled with <parameter>ChartType.PIE</parameter> and you can make type-specific settings in the <classname>PlotOptionsPie</classname> object as described later."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:865
#, no-c-format
msgid ""
"<![CDATA[Chart chart = new Chart(ChartType.PIE);\n"
"Configuration conf = chart.getConfiguration();\n"
"...]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:867
#, no-c-format
msgid "A ready pie chart is shown in <xref linkend=\"figure.charts.charttypes.pie\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:873
#, no-c-format
msgid "Pie Chart"
msgstr ""

#. Tag: para
#: chapter-charts.xml:884
#, no-c-format
msgid "The chart-specific options of a pie chart are configured with a <classname>PlotOptionsPie</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:889
#, no-c-format
msgid ""
"<![CDATA[PlotOptionsPie options = new PlotOptionsPie();\n"
"options.setInnerSize(0); // Non-0 results in a donut\n"
"options.setSize(\"75%\");  // Default\n"
"options.setCenter(\"50%\", \"50%\"); // Default\n"
"conf.setPlotOptions(options);]]>"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:893
#, no-c-format
msgid "innerSize"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:894
#, no-c-format
msgid "A pie with inner size greater than zero is a \"donut\". The inner size can be expressed either as number of pixels or as a relative percentage of the chart area with a string (such as \"60%\") See the section later on donuts."
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:902
#, no-c-format
msgid "size"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:903
#, no-c-format
msgid "The size of the pie can be expressed either as number of pixels or as a relative percentage of the chart area with a string (such as \"80%\"). The default size is 75%, to leave space for the labels."
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:911
#, no-c-format
msgid "center"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:912
#, no-c-format
msgid "The X and Y coordinates of the center of the pie can be expressed either as numbers of pixels or as a relative percentage of the chart sizes with a string. The default is \"50%\", \"50%\"."
msgstr ""

#. Tag: para
#: chapter-charts.xml:925
#, no-c-format
msgid "The labels for the pie sectors are determined from the labels of the data points. The <classname>DataSeries</classname> or <classname>ContainerSeries</classname>, which allow labeling the data points, should be used for pie charts."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:932
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[DataSeries series = new DataSeries();\n"
"series.add(new DataSeriesItem(\"Mercury\", 4900));\n"
"series.add(new DataSeriesItem(\"Venus\", 12100));\n"
"...\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:934
#, no-c-format
msgid "If a data point, as defined as a <classname>DataSeriesItem</classname> in a <classname>DataSeries</classname>, has the <emphasis>sliced</emphasis> property enabled, it is shown as slightly cut away from the pie."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:940
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Slice one sector out\n"
"DataSeriesItem earth = new DataSeriesItem(\"Earth\", 12800);\n"
"earth.setSliced(true);\n"
"series.add(earth);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:944
#, no-c-format
msgid "Donut Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:946
#, no-c-format
msgid "Setting the <parameter>innerSize</parameter> of the plot options of a pie chart to a larger than zero value results in an empty hole at the center of the pie."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:952
#, no-c-format
msgid ""
"<![CDATA[PlotOptionsPie options = new PlotOptionsPie();\n"
"options.setInnerSize(\"60%\");\n"
"conf.setPlotOptions(options);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:954
#, no-c-format
msgid "As you can set the plot options also for each data series, you can put two pie charts on top of each other, with a smaller one fitted in the \"hole\" of the donut. This way, you can make pie charts with more details on the outer rim, as done in the example below:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:961
#, no-c-format
msgid ""
"<![CDATA[// The inner pie\n"
"DataSeries innerSeries = new DataSeries();\n"
"innerSeries.setName(\"Browsers\");\n"
"PlotOptionsPie innerOptions = new PlotOptionsPie();\n"
"innerPieOptions.setSize(\"60%\");\n"
"innerSeries.setPlotOptions(innerPieOptions);\n"
"...\n"
"\n"
"DataSeries outerSeries = new DataSeries();\n"
"outerSeries.setName(\"Versions\");\n"
"PlotOptionsPie outerOptions = new PlotOptionsPie();\n"
"outerOptions.setInnerSize(\"60%\");\n"
"outerSeries.setPlotOptions(outerSeriesOptions);\n"
"...]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:963
#, no-c-format
msgid "The result is illustrated in <xref linkend=\"figure.charts.charttypes.pie.donut\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:969
#, no-c-format
msgid "Overlaid Pie and Donut Chart"
msgstr ""

#. Tag: title
#: chapter-charts.xml:980
#, no-c-format
msgid "Gauges"
msgstr ""

#. Tag: para
#: chapter-charts.xml:982
#, no-c-format
msgid "A gauge is an one-dimensional chart with a circular Y-axis, where a rotating pointer points to a value on the axis. A gauge can, in fact, have multiple Y-axes to display multiple scales."
msgstr ""

#. Tag: para
#: chapter-charts.xml:988
#, no-c-format
msgid "Let us consider the following gauge:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:992
#, no-c-format
msgid ""
"<![CDATA[Chart chart = new Chart(ChartType.GAUGE);\n"
"chart.setWidth(\"400px\");\n"
"chart.setHeight(\"400px\");]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:994
#, no-c-format
msgid "After the settings done in the subsequent sections, it will show as in <xref linkend=\"figure.charts.charttypes.gauge\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1000
#, no-c-format
msgid "A Gauge"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1009
#, no-c-format
msgid "Gauge Configuration"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1011
#, no-c-format
msgid "The start and end angles of the gauge can be configured in the <classname>Pane</classname> object of the chart configuration. The angles can be given as -360 to 360 degrees, with 0 at the top of the circle."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1018
#, no-c-format
msgid ""
"<![CDATA[Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Speedometer\");\n"
"conf.getPane().setStartAngle(-135);\n"
"conf.getPane().setEndAngle(135);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1025
#, no-c-format
msgid "A gauge has only an Y-axis. You need to provide both a minimum and maximum value for it."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1030
#, no-c-format
msgid ""
"<![CDATA[YAxis yaxis = new YAxis();\n"
"yaxis.setTitle(\"km/h\");\n"
"\n"
"// The limits are mandatory\n"
"yaxis.setMin(0);\n"
"yaxis.setMax(100);\n"
"\n"
"// Other configuration\n"
"yaxis.getLabels().setStep(1);\n"
"yaxis.setTickInterval(10);\n"
"yaxis.setPlotBands(new PlotBand[]{\n"
"        new PlotBand(0,  60,  SolidColor.GREEN),\n"
"        new PlotBand(60, 80,  SolidColor.YELLOW),\n"
"        new PlotBand(80, 100, SolidColor.RED)});\n"
"\n"
"conf.addyAxis(yaxis);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1032
#, no-c-format
msgid "You can do all kinds of other configuration to the axis - please see the API documentation for all the available parameters."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1039
#, no-c-format
msgid "Setting and Updating Gauge Data"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1041
#, no-c-format
msgid "A gauge only displays a single value, which you can define as a data series of length one, such as as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1046
#, no-c-format
msgid ""
"<![CDATA[ListSeries series = new ListSeries(\"Speed\", 80);\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1048
#, no-c-format
msgid "Gauges are especially meaningful for displaying changing values. You can use the <methodname>updatePoint()</methodname> method in the data series to update the single value."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1054
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[final TextField tf = new TextField(\"Enter a new value\");\n"
"layout.addComponent(tf);\n"
"\n"
"Button update = new Button(\"Update\", new ClickListener() {\n"
"    @Override\n"
"    public void buttonClick(ClickEvent event) {\n"
"        Integer newValue = new Integer((String)tf.getValue());\n"
"        series.updatePoint(0, newValue);\n"
"    }\n"
"}); \n"
"layout.addComponent(update);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1059
#, no-c-format
msgid "Area and Column Range Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1061
#, no-c-format
msgid "Ranged charts display an area or column between a minimum and maximum value, instead of a singular data point. They require the use of <classname>RangeSeries</classname>, as described in <xref linkend=\"charts.data.rangeseries\"/>. An area range is created with <parameter>AREARANGE</parameter> chart type, and a column range with <parameter>COLUMNRANGE</parameter> chart type."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1070
#, no-c-format
msgid "Consider the following example:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1074
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Chart chart = new Chart(ChartType.AREARANGE);\n"
"chart.setWidth(\"400px\");\n"
"chart.setHeight(\"300px\");\n"
"\n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Extreme Temperature Range in Finland\");\n"
"...\n"
"\n"
"// Create the range series\n"
"// Source: http://ilmatieteenlaitos.fi/lampotilaennatyksia\n"
"RangeSeries series = new RangeSeries(\"Temperature Extremes\",\n"
"    new Double[]{-51.5,10.9},\n"
"    new Double[]{-49.0,11.8},\n"
"    ...\n"
"    new Double[]{-47.0,10.8});//\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1076
#, no-c-format
msgid "The resulting chart, as well as the same chart with a column range, is shown in <xref linkend=\"figure.charts.charttypes.rangecharts\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1082
#, no-c-format
msgid "Area and Column Range Chart"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1092
#, no-c-format
msgid "Polar, Wind Rose, and Spiderweb Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1094
#, no-c-format
msgid "Most chart types having two axes can be displayed in <emphasis>polar</emphasis> coordinates, where the X axis is curved on a circle and Y axis from the center of the circle to its rim. Polar chart is not a chart type in itself, but can be enabled for most chart types with <methodname>setPolar(true)</methodname> in the chart model parameters. Therefore all chart type specific features are usable with polar charts."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1104
#, no-c-format
msgid "Vaadin Charts allows many sorts of typical polar chart types, such as <emphasis>wind rose</emphasis>, a polar column graph, or <emphasis>spiderweb</emphasis>, a polar chart with categorical data and a more polygonal visual style."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1111
#, no-c-format
msgid ""
"<![CDATA[// Create a chart of some type\n"
"Chart char = new Chart(ChartType.LINE);\n"
"\n"
"// Enable the polar projection\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.getChart().setPolar(true);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1113
#, no-c-format
msgid "You need to define the sector of the polar projection with a <classname>Pane</classname> object in the configuration. The sector is defined as degrees from the north direction. You also need to define the value range for the X axis with <methodname>setMin()</methodname> and <methodname>setMax()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1121
#, no-c-format
msgid ""
"<![CDATA[// Define the sector of the polar projection\n"
"Pane pane = new Pane(0, 360); // Full circle\n"
"conf.addPane(pane);\n"
"\n"
"// Define the X axis and set its value range\n"
"XAxis axis = new XAxis();\n"
"axis.setMin(0);\n"
"axis.setMax(360);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1123
#, no-c-format
msgid "The polar and spiderweb charts are illustrated in <xref linkend=\"figure.charts.charttypes.polar\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1129
#, no-c-format
msgid "Wind Rose and Spiderweb Charts"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1138
#, no-c-format
msgid "Spiderweb Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1140
#, no-c-format
msgid "A <emphasis>spiderweb</emphasis> chart is a commonly used visual style of a polar chart with a polygonal shape rather than a circle. The data and the X axis should be categorical to make the polygonal interpolation meaningful. The sector is assumed to be full circle, so no angles for the pane need to be specified. <phrase condition=\"web\">Note the style settings done in the axis in the example below:</phrase>"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1149
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[Chart chart = new Chart(ChartType.LINE);\n"
"...\n"
"\n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.getChart().setPolar(true);\n"
"...\n"
"\n"
"// Create the range series\n"
"// Source: http://ilmatieteenlaitos.fi/lampotilaennatyksia\n"
"ListSeries series = new ListSeries(\"Temperature Extremes\",\n"
"    10.9, 11.8, 17.5, 25.5, 31.0, 33.8,\n"
"    37.2, 33.8, 28.8, 19.4, 14.1, 10.8);\n"
"conf.addSeries(series);\n"
"\n"
"// Set the category labels on the X axis correspondingly\n"
"XAxis xaxis = new XAxis();\n"
"xaxis.setCategories(\"Jan\", \"Feb\", \"Mar\",\n"
"    \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\",\n"
"    \"Oct\", \"Nov\", \"Dec\");\n"
"xaxis.setTickmarkPlacement(TickmarkPlacement.ON);\n"
"xaxis.setLineWidth(0);\n"
"conf.addxAxis(xaxis);\n"
"\n"
"// Configure the Y axis\n"
"YAxis yaxis = new YAxis();\n"
"yaxis.setGridLineInterpolation(\"polygon\"); // Webby look\n"
"yaxis.setMin(0);\n"
"yaxis.setTickInterval(10);\n"
"yaxis.getLabels().setStep(1);\n"
"conf.addyAxis(yaxis);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1155 chapter-charts.xml:1167
#, no-c-format
msgid "Funnel Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1157
#, no-c-format
msgid "Funnel charts are typically used to visualize stages in a sales processes, and for other purposes to visualize subsets of diminishing size. A funnel chart has layers much like a stacked column, but has a funnel shape. The top of the funnel has width of the drawing area of the chart, and dinimishes in size down to a neck, and then continues as a column to the bottom."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1175
#, no-c-format
msgid "Funnel charts have chart type <parameter>FUNNEL</parameter>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1179
#, no-c-format
msgid "The labels of the funnel blocks are by default placed on the right side of the blocks, together with a connector. You can configure their style in the plot options<phrase condition=\"web\">, as is done in the following example</phrase>."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1185
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[Chart chart = new Chart(ChartType.FUNNEL);\n"
"chart.setWidth(\"500px\");\n"
"chart.setHeight(\"350px\");\n"
"        \n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Monster Utilization\");\n"
"conf.getLegend().setEnabled(false);\n"
"        \n"
"// Give more room for the labels\n"
"conf.getChart().setSpacingRight(120);\n"
"\n"
"// Configure the funnel neck shape \n"
"PlotOptionsFunnel options = new PlotOptionsFunnel();\n"
"options.setNeckHeightPercentage(20);\n"
"options.setNeckWidthPercentage(20);\n"
"\n"
"// Style the data labels\n"
"Labels dataLabels = new Labels();\n"
"dataLabels.setFormat(\"<b>{point.name}</b> ({point.y:,.0f})\");\n"
"dataLabels.setSoftConnector(false);\n"
"dataLabels.setColor(SolidColor.BLACK);\n"
"options.setDataLabels(dataLabels);\n"
"      \n"
"conf.setPlotOptions(options);\n"
"\n"
"// Create the range series\n"
"DataSeries series = new DataSeries();\n"
"series.add(new DataSeriesItem(\"Monsters Met\", 340));\n"
"series.add(new DataSeriesItem(\"Engaged\", 235));\n"
"series.add(new DataSeriesItem(\"Killed\", 187));\n"
"series.add(new DataSeriesItem(\"Tinned\", 70));\n"
"series.add(new DataSeriesItem(\"Eaten\", 55));\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1190
#, no-c-format
msgid "The chart-specific options of a funnel chart are configured with a <classname>PlotOptionsFunnel</classname>. It extends the generic <classname>AbstractLinePlotOptions</classname> and has the following chart type specific properties:"
msgstr ""

#. Tag: term
#: chapter-charts.xml:1199
#, no-c-format
msgid "<parameter>neckHeight</parameter> or <parameter>neckHeightPercentage</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:1200
#, no-c-format
msgid "Height of the neck part of the funnel either as pixels or as percentage of the entire funnel height."
msgstr ""

#. Tag: term
#: chapter-charts.xml:1206
#, no-c-format
msgid "<parameter>neckWidth</parameter> or <parameter>neckWidthPercentage</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:1207
#, no-c-format
msgid "Width of the neck part of the funnel either as pixels or as percentage of the top of the funnel."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1217 chapter-charts.xml:1227
#, no-c-format
msgid "Waterfall Charts"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1219
#, no-c-format
msgid "Waterfall charts are used for visualizing level changes from an initial level to a final level through a number of changes in the level. The changes are given as delta values, and you can have a number of intermediate totals, which are calculated automatically."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1235
#, no-c-format
msgid "Waterfall charts have chart type <literal>WATERFALL</literal>. <phrase condition=\"web\">For example:</phrase>"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1240
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[Chart chart = new Chart(ChartType.WATERFALL);\n"
"chart.setWidth(\"500px\");\n"
"chart.setHeight(\"350px\");\n"
"\n"
"// Modify the default configuration a bit\n"
"Configuration conf = chart.getConfiguration();\n"
"conf.setTitle(\"Changes in Reindeer Population in 2011\");\n"
"conf.getLegend().setEnabled(false);\n"
"\n"
"// Configure X axis\n"
"XAxis xaxis = new XAxis();\n"
"xaxis.setCategories(\"Start\", \"Predators\", \"Slaughter\",\n"
"    \"Reproduction\", \"End\");\n"
"conf.addxAxis(xaxis);\n"
"\n"
"// Configure Y axis\n"
"YAxis yaxis = new YAxis();\n"
"yaxis.setTitle(\"Population (thousands)\");\n"
"conf.addyAxis(yaxis);\n"
"...]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1242
#, no-c-format
msgid "The example continues in the following subsections."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1249
#, no-c-format
msgid "Waterfall charts have plot options type <classname>PlotOptionsWaterfall</classname>, which extends the more general options defined in <classname>PlotOptionsColumn</classname>. It has the following chart type specific properties:"
msgstr ""

#. Tag: parameter
#: chapter-charts.xml:1259
#, no-c-format
msgid "upColor"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:1260
#, no-c-format
msgid "Color for the positive values. For negative values, the <literal>negativeColor</literal> defined in <classname>PlotOptionsColumn</classname> is used."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1268
#, no-c-format
msgid "In the following, we define the colors, as well as the style and placement of the labels for the columns:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1273
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Define the colors\n"
"final Color balanceColor = SolidColor.BLACK;\n"
"final Color positiveColor = SolidColor.BLUE;\n"
"final Color negativeColor = SolidColor.RED;\n"
"\n"
"// Configure the colors \n"
"PlotOptionsWaterfall options = new PlotOptionsWaterfall();\n"
"options.setUpColor(positiveColor);\n"
"options.setNegativeColor(negativeColor);\n"
"\n"
"// Configure the labels\n"
"Labels labels = new Labels(true);\n"
"labels.setVerticalAlign(VerticalAlign.TOP);\n"
"labels.setY(-20);\n"
"labels.setFormatter(\"Math.floor(this.y/1000) + 'k'\");\n"
"Style style = new Style();\n"
"style.setColor(SolidColor.BLACK);\n"
"style.setFontWeight(FontWeight.BOLD);\n"
"labels.setStyle(style);\n"
"options.setDataLabels(labels);\n"
"options.setPointPadding(0);\n"
"conf.setPlotOptions(options);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1277
#, no-c-format
msgid "Data Series"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1279
#, no-c-format
msgid "The data series for waterfall charts consists of changes (deltas) starting from an initial value and one or more cumulative sums. There should be at least a final sum, and optionally intermediate sums. The sums are represented as <classname>WaterFallSum</classname> data items, and no value is needed for them as they are calculated automatically. For intermediate sums, you should set the <parameter>intermediate</parameter> property to <literal>true</literal>."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1290
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// The data\n"
"DataSeries series = new DataSeries();\n"
"\n"
"// The beginning balance\n"
"DataSeriesItem start = new DataSeriesItem(\"Start\", 306503);\n"
"start.setColor(balanceColor);\n"
"series.add(start);\n"
"\n"
"// Deltas\n"
"series.add(new DataSeriesItem(\"Predators\", -3330));\n"
"series.add(new DataSeriesItem(\"Slaughter\", -103332));\n"
"series.add(new DataSeriesItem(\"Reproduction\", +104052));\n"
"\n"
"WaterFallSum end = new WaterFallSum(\"End\");\n"
"end.setColor(balanceColor);\n"
"end.setIntermediate(false); // Not intermediate (default)\n"
"series.add(end);\n"
"\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1296
#, no-c-format
msgid "Chart Configuration"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1298
#, no-c-format
msgid "All the chart content configuration of charts is defined in a <emphasis>chart model</emphasis> in a <classname>Configuration</classname> object. You can access the model with the <methodname>getConfiguration()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1304
#, no-c-format
msgid "The configuration properties in the <classname>Configuration</classname> class are summarized in the following:"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1311
#, no-c-format
msgid "<methodname>credits</methodname>: <classname>Credits</classname> (text, position, href, enabled)"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1314
#, no-c-format
msgid "<methodname>labels</methodname>: <classname>HTMLLabels</classname> (html, style)"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1317
#, no-c-format
msgid "<methodname>lang</methodname>: <classname>Lang</classname> (decimalPoint, thousandsSep, loading)"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1320
#, no-c-format
msgid "<methodname>legend</methodname>: <classname>Legend</classname> (see <xref linkend=\"charts.configuration.legend\"/>)"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1323
#, no-c-format
msgid "<methodname>pane</methodname>: <classname>Pane</classname>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1326
#, no-c-format
msgid "<methodname>plotoptions</methodname>: <classname>PlotOptions</classname> (see"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1329
#, no-c-format
msgid "<methodname>series</methodname>: <interfacename>Series</interfacename>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1332
#, no-c-format
msgid "<methodname>subTitle</methodname>: <classname>SubTitle</classname>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1335
#, no-c-format
msgid "<methodname>title</methodname>: <classname>Title</classname>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1338
#, no-c-format
msgid "<methodname>tooltip</methodname>: <classname>Tooltip</classname>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1341
#, no-c-format
msgid "<methodname>xAxis</methodname>: <classname>XAxis</classname> (see"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1344
#, no-c-format
msgid "<methodname>yAxis</methodname>: <classname>YAxis</classname> (see"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1348
#, no-c-format
msgid "For data configuration, see <xref linkend=\"charts.data\"/>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1355
#, no-c-format
msgid "The plot options can be set in the configuration of the entire chart or for each data series separately. Some of the plot options are chart type specific, defined in type-specific options classes, which all extend <classname>AbstractPlotOptions</classname>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1362
#, no-c-format
msgid "You need to create the plot options object and set them either for the entire chart or for a data series with <methodname>setPlotOptions()</methodname>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1368
#, no-c-format
msgid "For example, the following enables stacking in column charts:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1372
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[PlotOptionsColumn plotOptions = new PlotOptionsColumn();\n"
"plotOptions.setStacking(Stacking.NORMAL);\n"
"conf.setPlotOptions(plotOptions);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1374
#, no-c-format
msgid "See the API documentation of each chart type and its plot options class for more information about the chart-specific options, and the <classname>AbstractPlotOptions</classname> for the shared plot options."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1383
#, no-c-format
msgid "Axes"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1385
#, no-c-format
msgid "Many chart types have two axes, X and Y, which are represented by <classname>XAxis</classname> and <classname>YAxis</classname> classes. The X axis is usually horizontal, representing the iteration over the data series, and Y vertical, representing the values in the data series. Some chart types invert the axes and they can be explicitly inverted with <methodname>getChart().setInverted()</methodname> in the chart configuration. An axis has a caption and tick marks at intervals indicating either numeric values or symbolic categories. Some chart types, such as gauge, have only Y-axis, which is circular in the gauge, and some such as a pie chart have none."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1398
#, no-c-format
msgid "Axis objects are created and added to the configuration object with <methodname>addxAxis()</methodname> and <methodname>addyAxis()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1404
#, no-c-format
msgid ""
"<![CDATA[XAxis xaxis = new XAxis();\n"
"xaxis.setTitle(\"Axis title\");\n"
"conf.addxAxis(xaxis);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1406
#, no-c-format
msgid "A chart can have more than one Y-axis, usually when different series displayed in a graph have different units or scales. The association of a data series with an axis is done in the data series object with <methodname>setyAxis()</methodname>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1413
#, no-c-format
msgid "For a complete reference of the many configuration parameters for the axes, please refer to the JavaDoc API documentation of Vaadin Charts."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1419
#, no-c-format
msgid "Categories"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1421
#, no-c-format
msgid "The X axis displays, in most chart types, tick marks and labels at some numeric interval by default. If the items in a data series have a symbolic meaning rather than numeric, you can associate <emphasis>categories</emphasis> with the data items. The category label is displayed between two axis tick marks and aligned with the data point. In certain charts, such as column chart, where the corresponding values in different data series are grouped under the same category. You can set the category labels with <methodname>setCategories()</methodname>, which takes the categories as (an ellipsis) parameter list, or as an iterable. The list should match the items in the data series."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1435
#, no-c-format
msgid ""
"<![CDATA[XAxis xaxis = new XAxis();\n"
"xaxis.setCategories(\"Mercury\", \"Venus\", \"Earth\",\n"
"                    \"Mars\", \"Jupiter\", \"Saturn\",\n"
"                    \"Uranus\", \"Neptune\");]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1439
#, no-c-format
msgid "Labels"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1441
#, no-c-format
msgid "The axes display, in most chart types, tick marks and labels at some numeric interval by default. The format and style of labels in an axis is defined in a <classname>Labels</classname> object, which you can get with <methodname>getLabels()</methodname> from the axis."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1448
#, no-c-format
msgid "For a complete reference of the many configuration parameters for the labels, please refer to the JavaDoc API documentation of Vaadin Charts."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1456
#, no-c-format
msgid "Axis Range"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1458
#, no-c-format
msgid "The axis range is normally set automatically to fit the data, but can also be set explicitly. The <emphasis>extremes</emphasis> property in the axis configuration defines the minimum and maximum values of the axis range. You can set them either individually with <methodname>setMin()</methodname> and <methodname>setMax()</methodname>, or together with <methodname>setExtremes()</methodname>. Changing the extremes programmatically requires redrawing the chart with <methodname>drawChart()</methodname>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1473
#, no-c-format
msgid "<title>Legend</title>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1475
#, no-c-format
msgid "The legend is a box that describes the data series shown in the chart. It is enabled by default and is automatically populated with the names of the data series as defined in the series objects, and the corresponding color symbol of the series."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1487
#, no-c-format
msgid "Chart data is stored in data series model, which contains visual representation information about the data points in addition to their values. There are a number of different types of series - <classname>DataSeries</classname>, <classname>ListSeries</classname>, <classname>AreaListSeries</classname>, and <classname>RangeSeries</classname>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1496
#, no-c-format
msgid "List Series"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1498
#, no-c-format
msgid "The <classname>ListSeries</classname> is essentially a helper type that makes the handling of simple sequential data easier than with <classname>DataSeries</classname>. The data points are assumed to be at a constant interval on the X axis, starting from the value specified with the <literal>pointStart</literal> property (default is 0) at intervals specified with the <literal>pointInterval</literal> property (default is 1.0). The two properties are defined in the <classname>PlotOptions</classname> for the series."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1509
#, no-c-format
msgid "The Y axis values are given in a <classname>List&lt;Number&gt;</classname>, or with ellipsis or an array."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1515
#, no-c-format
msgid ""
"<![CDATA[ListSeries series = new ListSeries(\n"
"      \"Total Reindeer Population\",\n"
"      181091, 201485, 188105, ...);\n"
"series.getPlotOptions().setPointStart(1959);\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1517
#, no-c-format
msgid "You can also add them one by one with the <methodname>addData()</methodname> method, which is typical when converting from some other representation."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1523
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Original representation\n"
"int data[][] = reindeerData();\n"
"\n"
"// Create a list series with X values starting from 1959\n"
"ListSeries series = new ListSeries(\"Reindeer Population\");\n"
"series.getPlotOptions().setPointStart(1959);\n"
"\n"
"// Add the data points\n"
"for (int row[]: data)\n"
"    series.addData(data[1]);\n"
"\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1525
#, no-c-format
msgid "If the chart has multiple Y axes, you can specify the axis for the series by its index number with <methodname>setyAxis()</methodname>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1532
#, no-c-format
msgid "Generic Data Series"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1534
#, no-c-format
msgid "The <classname>DataSeries</classname> can represent a sequence of data points at an interval as well as scatter data. Data points are represented with the <classname>DataSeriesItem</classname> class, which has <parameter>x</parameter> and <parameter>y</parameter> properties for representing the data value. Each item can be given a category name."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1542
#, no-c-format
msgid ""
"<![CDATA[DataSeries series = new DataSeries();\n"
"series.setName(\"Total Reindeer Population\");\n"
"series.add(new DataSeriesItem(1959, 181091));\n"
"series.add(new DataSeriesItem(1960, 201485));\n"
"series.add(new DataSeriesItem(1961, 188105));\n"
"series.add(new DataSeriesItem(1962, 177206));\n"
"\n"
"// Modify the color of one point\n"
"series.get(1960, 201485)\n"
"    .getMarker().setFillColor(SolidColor.RED);\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1544
#, no-c-format
msgid "Data points are associated with some visual representation parameters: marker style, selected state, legend index, and dial style (for gauges). Most of them can be configured at the level of individual data series items, the series, or in the overall plot options for the chart. The configuration options are described in <xref linkend=\"charts.configuration\"/>. Some parameters, such as the sliced option for pie charts is only meaningful to configure at item level."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1555
#, no-c-format
msgid "Adding and Removing Data Items"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1557
#, no-c-format
msgid "New <classname>DataSeriesItem</classname> items are added to a series with the <methodname>add()</methodname> method. The basic method takes just the data item, but the other method takes also two boolean parameters. If the <parameter>updateChart</parameter> parameter is <literal>false</literal>, the chart is not updated immediately. This is useful if you are adding many points in the same request."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1566
#, no-c-format
msgid "The <parameter>shift</parameter> parameter, when <literal>true</literal>, causes removal of the first data point in the series in an optimized manner, thereby allowing an animated chart that moves to left as new points are added. This is most meaningful with data with even intervals."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1574
#, no-c-format
msgid "You can remove data points with the <methodname>remove()</methodname> method in the series. Removal is generally not animated, unless a data point is added in the same change, as is caused by the <parameter>shift</parameter> parameter for the <methodname>add()</methodname>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1584
#, no-c-format
msgid "Updating Data Items"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1586
#, no-c-format
msgid "If you update the properties of a <classname>DataSeriesItem</classname> object, you need to call <methodname>update()</methodname> method for the series with the item as the parameter. Changing the coordinates of a data point in this way causes animation of the change."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1596
#, no-c-format
msgid "Range Data"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1598
#, no-c-format
msgid "Range charts expect the Y values to be specified as minimum-maximum value pairs. The <classname>DataSeriesItem</classname> provides <methodname>setLow()</methodname> and <methodname>setHigh()</methodname> methods to set the minimum and maximum values of a data point, as well as a number of constructors that accept the values."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1607
#, no-c-format
msgid ""
"<![CDATA[RangeSeries series =\n"
"    new RangeSeries(\"Temperature Extremes\");\n"
"\n"
"// Give low-high values in constructor\n"
"series2.add(new DataSeriesItem(0, -51.5, 10.9));\n"
"series2.add(new DataSeriesItem(1, -49.0, 11.8));\n"
"\n"
"// Set low-high values with setters\n"
"DataSeriesItem point2 = new DataSeriesItem();\n"
"point2.setX(2);\n"
"point2.setLow(-44.3);\n"
"point2.setHigh(17.5);\n"
"series2.add(point2);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1609
#, no-c-format
msgid "The <classname>RangeSeries</classname> offers a slightly simplified way of adding ranged data points, as described in <xref linkend=\"charts.data.rangeseries\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1618
#, no-c-format
msgid "Range Series"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1620
#, no-c-format
msgid "The <classname>RangeSeries</classname> is a helper class that extends <classname>DataSeries</classname> to allow specifying interval data a bit easier, with a list of minimum-maximum value ranges in the Y axis. You can use the series in range charts, as described in <xref linkend=\"charts.charttypes.rangecharts\"/>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1628
#, no-c-format
msgid "For X axis, the coordinates are generated at fixed intervals starting from the value specified with the <literal>pointStart</literal> property (default is 0) at intervals specified with the <literal>pointInterval</literal> property (default is 1.0)."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1636
#, no-c-format
msgid "Setting the Data"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1638
#, no-c-format
msgid "The data in a <classname>RangeSeries</classname> is given as an array of minimum-maximum value pairs for the Y value axis. The pairs are also represented as arrays. You can pass the data using the ellipsis in the constructor or the <methodname>setData()</methodname>:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1645
#, no-c-format
msgid ""
"<![CDATA[RangeSeries series =\n"
"    new RangeSeries(\"Temperature Ranges\",\n"
"    new Double[]{-51.5,10.9},\n"
"    new Double[]{-49.0,11.8},\n"
"    ...\n"
"    new Double[]{-47.0,10.8});\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1647
#, no-c-format
msgid "Or, as always with variable arguments, you can also pass them in an array, in the following for the <methodname>setData()</methodname>:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1652
#, no-c-format
msgid ""
"<![CDATA[series.setData(new Double[][] {\n"
"    new Double[]{-51.5,10.9},\n"
"    new Double[]{-49.0,11.8},\n"
"    ...\n"
"    new Double[]{-47.0,10.8}});]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1657
#, no-c-format
msgid "Container Data Series"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1659
#, no-c-format
msgid "The <classname>ContainerDataSeries</classname> is an adapter for binding Vaadin <interfacename>Container</interfacename> data sources to charts. The container needs to have properties that define the name, X-value, and Y-value of a data point. The default property IDs of the three properties are \"<literal>name</literal>\", \"<literal>x</literal>\", and \"<literal>y</literal>\", respectively. You can set the property IDs with <methodname>setNamePropertyId()</methodname>, <methodname>setYPropertyId()</methodname>, and <methodname>setXPropertyId()</methodname>, respectively. If the container has no <literal>x</literal> property, the data is assumed to be categorical."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1673
#, no-c-format
msgid "In the following example, we have a <classname>BeanItemContainer</classname> with <classname>Planet</classname> items, which have a <literal>name</literal> and <literal>diameter</literal> property. We display the container data both in a Vaadin <classname>Table</classname> and a chart."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1681
#, no-c-format
msgid ""
"<![CDATA[// The data\n"
"BeanItemContainer<Planet> container =\n"
"        new BeanItemContainer<Planet>(Planet.class);\n"
"container.addBean(new Planet(\"Mercury\", 4900));\n"
"container.addBean(new Planet(\"Venus\", 12100));\n"
"container.addBean(new Planet(\"Earth\", 12800));\n"
"...\n"
"\n"
"// Display it in a table\n"
"Table table = new Table(\"Planets\", container);\n"
"table.setPageLength(container.size());\n"
"table.setVisibleColumns(new String[]{\"name\",\"diameter\"});\n"
"layout.addComponent(table);\n"
"\n"
"// Display it in a chart\n"
"Chart chart = new Chart(ChartType.COLUMN);\n"
"... Configure it ...\n"
"\n"
"// Wrap the container in a data series\n"
"ContainerDataSeries series =\n"
"        new ContainerDataSeries(container);\n"
"\n"
"// Set up the name and Y properties\n"
"series.setNamePropertyId(\"name\");\n"
"series.setYPropertyId(\"diameter\");\n"
"\n"
"conf.addSeries(series);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1683
#, no-c-format
msgid "As the X axis holds categories rather than numeric values, we need to set up the category labels with an array of string. There are a few ways to do that, some more efficient than others, below is one way:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1689
#, no-c-format
msgid ""
"<![CDATA[// Set the category labels on the axis correspondingly\n"
"XAxis xaxis = new XAxis();\n"
"String names[] = new String[container.size()];\n"
"List<Planet> planets = container.getItemIds();\n"
"for (int i=0; i<planets.size(); i++)\n"
"    names[i] = planets.get(i).getName();\n"
"xaxis.setCategories(names);\n"
"xaxis.setTitle(\"Planet\");\n"
"conf.addxAxis(xaxis);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1691
#, no-c-format
msgid "The result can be seen in <xref linkend=\"figure.charts.data.containerseries\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1697
#, no-c-format
msgid "Table and Chart Bound to a Container"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1709
#, no-c-format
msgid "Advanced Uses"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1712
#, no-c-format
msgid "Server-Side Rendering and Exporting"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1714
#, no-c-format
msgid "In addition to using charts in Vaadin UIs, you may also need to provide them as images or in downloadable documents. Vaadin Charts can be rendered on the server-side using a headless JavaScript execution environment, such as <link xlink:href=\"http://phantomjs.org/\">PhantomJS</link>."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1721
#, no-c-format
msgid "Vaadin Charts supports a HighCharts remote export service, but the SVG Generator based on PhantomJS is almost as easy to use and allows much more powerful uses."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1728
#, no-c-format
msgid "Using a Remote Export Service"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1730
#, no-c-format
msgid "HighCharts has a simple built-in export functionality that does the export in a remote export server. HighCharts provides a default export service, but you can also configure your own."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1736
#, no-c-format
msgid "You can enable the built-in export function by setting <methodname>setExporting(true)</methodname> in the chart configuration."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1742
#, no-c-format
msgid "<![CDATA[chart.getConfiguration().setExporting(true);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1744
#, no-c-format
msgid "To configure it further, you can provide a <classname>Exporting</classname> object with custom settings."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1749
#, no-c-format
msgid ""
"<![CDATA[// Create the export configuration\n"
"Exporting exporting = new Exporting(true);\n"
"        \n"
"// Customize the file name of the download file\n"
"exporting.setFilename(\"mychartfile.pdf\");\n"
"\n"
"// Enable export of raster images \n"
"exporting.setEnableImages(true);\n"
"\n"
"// Use the exporting configuration in the chart\n"
"chart.getConfiguration().setExporting(exporting);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1751
#, no-c-format
msgid "If you only want to enable download, you can disable the print button as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1756
#, no-c-format
msgid ""
"<![CDATA[ExportButton printButton = new ExportButton();\n"
"printButton.setEnabled(false);\n"
"exporting.setPrintButton(printButton);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1758
#, no-c-format
msgid "The functionality uses a HighCharts export service by default. To use your own, you need to set up one and then configure it in the exporting configuration as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1764
#, no-c-format
msgid "<![CDATA[exporting.setUrl(\"http://my.own.server.com\");]]>"
msgstr ""

#. Tag: title
#: chapter-charts.xml:1768
#, no-c-format
msgid "Using the SVG Generator"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1770
#, no-c-format
msgid "The <classname>SVGGenerator</classname> in Vaadin Charts provides an advanced way to render the Chart into SVG format on the server-side. SVG is well supported by many applications, can be converted to virtually any other graphics format, and can be passed to PDF report generators."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1778
#, no-c-format
msgid "The generator uses PhantomJS to render the chart on the server-side. You need to install it from <link xlink:href=\"http://phantomjs.org/\">phantomjs.org</link>. After installation, PhantomJS should be in your system path. If not, you can set the <parameter>phantom.exec</parameter> system property for the JRE to point to the PhantomJS binary."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1787
#, no-c-format
msgid "To generate the SVG image content as a string (it's XML), simply call the <methodname>generate()</methodname> method in the <classname>SVGGenerator</classname> singleton and pass it the chart configuration."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:1794
#, no-c-format
msgid ""
"<![CDATA[String svg = SVGGenerator.getInstance()\n"
"    .generate(chart.getConfiguration());]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1796
#, no-c-format
msgid "You can then use the SVG image as you like, for example, for download from a <classname>StreamResource</classname>, or include it in a HTML, PDF, or other document. You can use SVG tools such as the <link xlink:href=\"http://xmlgraphics.apache.org/batik/\">Batik</link> or <link xlink:href=\"http://itextpdf.com/\">iText</link> libraries to generate documents. For a complete example, you can check out the Charts Export Demo from the Subversion repository at <uri>http://dev.vaadin.com/svn/addons/vaadin-charts/chart-export-demo</uri>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1811
#, no-c-format
msgid "Timeline"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1813
#, no-c-format
msgid "The <classname>Timeline</classname> is a charting component in the Vaadin Charts add-on separate from the <classname>Chart</classname> component. Its purpose is to give the user an intuitive understanding of events and trends on a horizontal timeline axis."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1820
#, no-c-format
msgid "<classname>Timeline</classname> uses its own representation for the data series, different from the <classname>Chart</classname> and more optimized for updating. You can represent almost any time-related statistical data that has a time-value mapping. Multiple data sources can be used to allow comparison between data."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1829
#, no-c-format
msgid "Timeline Component"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1840
#, no-c-format
msgid "A timeline allows representing time-related data visually as graphs instead of numerical values. They are used commonly in almost all fields of business, science, and technology, such as in project management to map out milestones and goals, in geology to map out historical events, and perhaps most prominently in the stock market."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1848
#, no-c-format
msgid "With Timeline, you can represent almost any time-related statistical data that has a time-value mapping. Even several data sources can be used for comparison between data. This allows the user to better grasp of changes in the data and antipate forthcoming trends and problems."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1856
#, no-c-format
msgid "Graph types"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1858
#, no-c-format
msgid "The Vaadin Timeline supports three graph types:"
msgstr ""

#. Tag: emphasis
#: chapter-charts.xml:1864
#, no-c-format
msgid "Line graphs"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:1865
#, no-c-format
msgid "Useful for representing continuous data, such as temperature changes or changes in stock price."
msgstr ""

#. Tag: emphasis
#: chapter-charts.xml:1871
#, no-c-format
msgid "Bar graphs"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:1872
#, no-c-format
msgid "Useful for representing discrete or discontinuous data, such as market share or forum posts."
msgstr ""

#. Tag: emphasis
#: chapter-charts.xml:1878
#, no-c-format
msgid "Scatter graphs"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:1879
#, no-c-format
msgid "Useful for representing discrete or discontinuous data."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1885
#, no-c-format
msgid "If you have several graphs in the timeline, you can also stack them on top of each other instead of drawing them on top of each other by setting <methodname>setGraphStacking()</methodname> in <classname>Timeline</classname> to <literal>true</literal>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1894
#, no-c-format
msgid "Interaction Elements"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1896
#, no-c-format
msgid "The user can interact with the Vaadin Timeline in several ways."
msgstr ""

#. Tag: para
#: chapter-charts.xml:1900
#, no-c-format
msgid "On the bottom of the timeline there is a <emphasis>scrollbar area</emphasis> where you can move the time forward or backward in time by dragging the time range box or by clicking the left and right arrow buttons. You can change the time range by resizing the range box in the scrollbar area. You can also zoom with the mouse wheel when the pointer is inside the component."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1909
#, no-c-format
msgid "Scrollbar Area"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1917
#, no-c-format
msgid "The middle area of the timeline is the <emphasis>main area</emphasis> where the selected time range is displayed. Time scale is shown below the main area. The time scale used depends on the zoom level and can be a time unit from hours to years. Value scale is displayed on the right side of the main area. The scale can be either a static value range or a range calculated from the displayed data set. The user can move in time by dragging the main area with the mouse left and right and zoom in and out by using the mouse wheel."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1928
#, no-c-format
msgid "Main Area"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1936
#, no-c-format
msgid "You can select a <emphasis>preset zoom level</emphasis> with the buttons on the top the Timeline. This will change the displayed time range to match the zoom level. The zoom levels are fully customizable to suit the time range in the API."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1944
#, no-c-format
msgid "Preset Zoom Buttons"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1952
#, no-c-format
msgid "The <emphasis>current time range</emphasis> is shown at the top-right corner of the component. Clicking the dates makes them editable, so that you can manually change them. <emphasis>Graph legend</emphasis> is shown below the time range. The legend explains what is represented by each bar on the graph and displays the current value when the user moves the mouse cursor over the graph."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1962
#, no-c-format
msgid "Current Time Range and Graph Legend"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1970
#, no-c-format
msgid "Finally, the available <emphasis>chart modes</emphasis> are shown below the preset zoom levels options. The available graph modes can be set from the API."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1976
#, no-c-format
msgid "Chart Mode"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1984
#, no-c-format
msgid "You can use or hide any of the features above can be shown or hidden depending on your needs. For example, if you only need to display a graph without any controls, you can hide all them from the API."
msgstr ""

#. Tag: title
#: chapter-charts.xml:1992
#, no-c-format
msgid "Event Markers"
msgstr ""

#. Tag: para
#: chapter-charts.xml:1994
#, no-c-format
msgid "In addition to graphs, the timeline can have events. An event can be, for example, the time of a published advertisement in a graph that displays website hits. Combining the event data with the graphs enables the user to observe the relevance of the advertisement to the website hits visually."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2001
#, no-c-format
msgid "Vaadin Timeline provides two types of event markers, as illustrated in <xref linkend=\"figure.charts.timeline.events\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2007
#, no-c-format
msgid "Timeline Event Markers"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2018
#, no-c-format
msgid "(On left) Marker with a customizable marker sign, for example, letter 'E'. The marker displays a caption which appears when the user hovers the pointer over the event."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2024
#, no-c-format
msgid "(On right) Marker with button-like appearance with a marker sign and a caption."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2031
#, no-c-format
msgid "Efficiency"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2033
#, no-c-format
msgid "Vaadin Timeline reduces the traffic between the server and the client by using two methods. First, all the data that is presented in the component is dynamically fetched from the server as needed. This means that when the user scrolls the timeline view, the component continuously fetches data from the server. Also, only data that is visible to the user is transferred to the client. For example, if the timeline has data that has been measured once a second for an entire year, not all the data will be sent to the client. Only the data which can be rendered on the screen without overlapping is sent. This ensures that, even for large data sets, the loading time is small and only the necessary data is actually transferred over the network."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2047
#, no-c-format
msgid "Second, Vaadin Timeline caches the data received from the server in the browser, so that the data is transferred over the network only once, if possible. This speeds up the time-range browsing when data can be fetched from the cache instead of reloading it over the network."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2056
#, no-c-format
msgid "Data Source Requirements"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2058
#, no-c-format
msgid "Vaadin Timeline uses Vaadin containers as data sources for both the graphs and the events. There are, however, some requirements for the containers to make them compatible with the Vaadin Timeline."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2064
#, no-c-format
msgid "The containers have to implement <interfacename>Container.Indexed</interfacename> for the Vaadin Timeline to be able to use them. This is because the Vaadin Timeline dynamically fetches the data from the server when needed. This way large data sets can be used without having to load all data to the client-side at once and it brings a huge performance increase."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2073
#, no-c-format
msgid "Another requirement is that the container has one property of type <classname>java.util.Date</classname> (or a class that can be cast to it), which contains the timestamp when a data point or event occurred. This property has to be set by using the <methodname>setGraphTimestampPropertyId()</methodname> in <classname>Timeline</classname>. The default property ID <constant>timeline.PropertyId.TIMESTAMP</constant> is used if no timestamp-property ID has been set."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2084
#, no-c-format
msgid "A graph container also needs to have a <emphasis>value</emphasis> property that defines the value of the data point. This value can be any numerical value. The value property can be set with <methodname>setGraphValuePropertyId()</methodname> in <classname>Timeline</classname>. The default property ID <constant>Timeline.PropertyId.VALUE</constant> is used if no value property is given."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2094
#, no-c-format
msgid "Below is an example of how a graph container could be constructed:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2098
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Construct a container which implements Container.Indexed       \n"
"IndexedContainer container = new IndexedContainer();\n"
"\n"
"// Add the Timestamp property to the container\n"
"Object timestampProperty = \"Our timestamp property\";\n"
"container.addContainerProperty(timestampProperty,\n"
"                               java.util.Date.class, null);\n"
"\n"
"// Add the value property\n"
"Object valueProperty = \"Our value property\";\n"
"container.addContainerProperty(valueProperty, Float.class, null);\n"
"\n"
"// Our timeline\n"
"Timeline timeline = new Timeline();\n"
"\n"
"// Add the container as a graph container\n"
"timeline.addGraphDataSource(container, timestampProperty,\n"
"                                       valueProperty);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2100
#, no-c-format
msgid "The event and marker containers are similar. They both need the <parameter>timestamp</parameter> property which should be of type <classname>java.util.Date</classname> and the <parameter>caption</parameter> property which should be a string. The marker container additionally needs a <parameter>value</parameter> property which is displayed in the marker popup."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2109
#, no-c-format
msgid "Below is an example on how a marker or event container can be constructed:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2113
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create the container\n"
"IndexedContainer container = new IndexedContainer();\n"
"        \n"
"// Add the timestamp property\n"
"container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,\n"
"                               Date.class, null);\n"
"        \n"
"// Add the caption property\n"
"container.addContainerProperty(Timeline.PropertyId.CAPTION,\n"
"                              String.class, \"\");\n"
"\n"
"// Add the marker specific value property.\n"
"// Not needed for a event containers.\n"
"container.addContainerProperty(Timeline.PropertyId.VALUE,\n"
"                               String.class, \"\");\n"
"\n"
"// Create the timeline with the container as both the marker\n"
"// and event data source\n"
"Timeline timeline = new Timeline();\n"
"timeline.setMarkerDataSource(container, \n"
"        Timeline.PropertyId.TIMESTAMP,\n"
"        Timeline.PropertyId.CAPTION,\n"
"        Timeline.PropertyId.VALUE);\n"
"\n"
"timeline.setEventDataSource(container,\n"
"        Timeline.PropertyId.TIMESTAMP,\n"
"        Timeline.PropertyId.CAPTION);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2115
#, no-c-format
msgid "The above example uses the default property IDs. You can change them to suit your needs."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2120
#, no-c-format
msgid "The <classname>Timeline</classname> listens for changes in the containers and updates the graph accordingly. When it updates the graph and items are added or removed from the container, the currently selected date range will remain selected. The selection bar in the browser area moves to keep the current selection selected. If you want the selection to change when the contents of the container changes and keep the selection area stationary, you can disable the selection lock by setting <methodname>setBrowserSelectionLock()</methodname> to <parameter>false</parameter>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2134
#, no-c-format
msgid "Events and Listeners"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2136
#, no-c-format
msgid "Two types of events are available when using the Vaadin Timeline."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2141
#, no-c-format
msgid "Date Range Changes"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2143
#, no-c-format
msgid "When the user modifies the selected date range by moving the date range selector, dragging the timeline, or by manually entering new dates, an event will be sent to the server with the information of what the current displayed date range is. To listen to these events you can attach a <classname>DateRangeListener</classname> which will receive the start and end dates of the current selection."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2154
#, no-c-format
msgid "Event Clicks"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2156
#, no-c-format
msgid "If the timeline has events, you can add an <classname>EventClickListener</classname> to listen for clicks on the events. The listener will receive a list of item IDs which are related to the click event from the event data source. Multiple events can be combined into a single event icon if space is not sufficient for displaying them all, in which case many item IDs can be returned."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2168
#, no-c-format
msgid "Configurability"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2170
#, no-c-format
msgid "The Vaadin Timeline is highly customizable and its outlook can be easily changed to suit your needs. The default view of the Timeline contains all the controls available but often all of them are not needed and can be hidden."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2177
#, no-c-format
msgid "The following list contains the components that can be shown or hidden at your preference:"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2182
#, no-c-format
msgid "Chart modes"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2183
#, no-c-format
msgid "Textual date select"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2184
#, no-c-format
msgid "Browser area (bottom part of the Timeline)"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2185
#, no-c-format
msgid "<listitem>Legend</listitem>"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2186
#, no-c-format
msgid "Zoom levels"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2187
#, no-c-format
msgid "Caption"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2190
#, no-c-format
msgid "The outlook of the graphs themselves can also be changed for both the browser area and the main view. The following settings are available through the API:"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2197
#, no-c-format
msgid "Graph outline color"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2198
#, no-c-format
msgid "Graph outline width"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2199
#, no-c-format
msgid "Graph caps (in line graphs only)"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2200
#, no-c-format
msgid "Graph fill color"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2201
#, no-c-format
msgid "Graph visibility"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2202
#, no-c-format
msgid "Graph shadows"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2205
#, no-c-format
msgid "Other changes to the outlook of the component can easily be done by CSS."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2209
#, no-c-format
msgid "Zoom levels are also fully customizable. Zoom levels are defined as milliseconds and can be added by calling the <methodname>addZoomLevel()</methodname> method. A zoom level always has a caption, which is the visible part in the zoom panel, and a millisecond amount."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2217
#, no-c-format
msgid "By default the grid divides the graph into five equally spaced parts with a gray color. However, you can fully customize how the grid is drawn by using <methodname>setGridColor()</methodname> and <methodname>setVerticalGridLines()</methodname>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2226
#, no-c-format
msgid "Localization"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2228
#, no-c-format
msgid "By default the Vaadin Timeline uses English as its primary language for the captions and the default locale for the application to display the dates in the timeline."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2234
#, no-c-format
msgid "You can change the different captions in the Timeline by using their corresponding setters:"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2240
#, no-c-format
msgid "<methodname>setZoomLevelsCaption()</methodname> -- The caption appearing before the zoom levels"
msgstr ""

#. Tag: listitem
#: chapter-charts.xml:2241
#, no-c-format
msgid "<methodname>setChartModesCaption()</methodname> -- The caption appearing before the chart modes"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2244
#, no-c-format
msgid "Furthermore, you can also change the locale in which the Timeline shows the dates in the horizontal scale by specifying a valid locale using the <methodname>setLocale()</methodname> method of the timeline."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2250
#, no-c-format
msgid "You can also configure in what format the dates appear in the horizontal scale or in the date select in the top-right corner by using the <methodname>getDateFormats()</methodname>-method which will return a <classname>DateFormatInfo</classname> object. By using its setters you can set specific formats for each date range in the scale. Please note that if you are using long date formats they might get clipped if the scale does not fit the whole formatted date."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2262
#, no-c-format
msgid "Timeline Tutorial"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2264
#, no-c-format
msgid "In the following tutorial, we look step-by-step how to create a timeline."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2269
#, no-c-format
msgid "Create the Data Sources"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2271
#, no-c-format
msgid "To use the Timeline, you need to create some data sources for it. Timeline uses <interfacename>Container.Indexed</interfacename> containers as data sources for both the graphs and the markers and events. So lets start by creating a datasource which represents the graph we want to draw in the timeline."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2279
#, no-c-format
msgid "For the Timeline to understand how the data is constructed in the container we need to use specific property ids which describe what kind of data each property represents. For the Vaadin Timeline to work properly we will need to add two property ids, one for when the value was acquired and one for the value itself. The Vaadin Timeline has these both properties predefined as <parameter>Timeline.PropertyId.TIMESTAMP</parameter> and <parameter>Timeline.PropertyId.VALUE</parameter>. You can use the predefined ones or create your own if you wish."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2291
#, no-c-format
msgid "So, lets create a container which meets the above stated specification. Open the main UI class which was automatically created when we created the project and add the following method."
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2297
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/**\n"
" * Creates a graph container with a month of random data\n"
" */\n"
"public Container.Indexed createGraphDataSource(){\n"
"        \n"
"    // Create the container\n"
"    Container.Indexed container = new IndexedContainer();\n"
"        \n"
"    // Add the required property ids (use the default ones here)\n"
"    container.addContainerProperty(Timeline.PropertyId.TIMESTAMP, \n"
"        Date.class, null);\n"
"    container.addContainerProperty(Timeline.PropertyId.VALUE, \n"
"        Float.class, 0f);\n"
"        \n"
"    // Add some random data to the container\n"
"    Calendar cal = Calendar.getInstance();\n"
"    cal.add(Calendar.MONTH, -1);\n"
"    Date today = new Date();\n"
"    Random generator = new Random();\n"
"        \n"
"    while(cal.getTime().before(today)){\n"
"        // Create  a point in time\n"
"        Item item = container.addItem(cal.getTime());\n"
"            \n"
"        // Set the timestamp property\n"
"        item.getItemProperty(Timeline.PropertyId.TIMESTAMP)\n"
"            .setValue(cal.getTime());\n"
"            \n"
"        // Set the value property\n"
"        item.getItemProperty(Timeline.PropertyId.VALUE)\n"
"            .setValue(generator.nextFloat());\n"
"        \n"
"        cal.add(Calendar.DAY_OF_MONTH, 1);            \n"
"    }\n"
"        \n"
"    return container;        \n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2299
#, no-c-format
msgid "This method will create an indexed container with some random points. As you can see we are using an <classname>IndexedContainer</classname> and define two properties to it which was discussed earlier. Then we just generate some random data in the container. Here we are using the default property ids for the timestamp and value but you could use your own if you wished. We'll see later how you would tell the Timeline which property ids to use if you used your own."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2310
#, no-c-format
msgid "Next, lets add some markers to our graph. Markers are arrow like shapes in the bottom of the timeline with which you can mark some occurrence that happened at that time. To create markers you again have to create a data source for them. I'll first show you how the code to create them and then explain what it all means. Add the following method to the UI class:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2319
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/**\n"
" * Creates a marker container with a marker for each seven days    \n"
" */\n"
"public Container.Indexed createMarkerDataSource(){\n"
"        \n"
"    // Create the container\n"
"    Container.Indexed container = new IndexedContainer();\n"
"        \n"
"    // Add the required property IDs (use the default ones here)\n"
"    container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,\n"
"            Date.class, null);\n"
"    container.addContainerProperty(Timeline.PropertyId.CAPTION, \n"
"            String.class, \"Our marker symbol\");\n"
"    container.addContainerProperty(Timeline.PropertyId.VALUE, \n"
"            String.class, \"Our description\");\n"
"        \n"
"    // Add a marker for every seven days\n"
"    Calendar cal = Calendar.getInstance();\n"
"    cal.add(Calendar.MONTH, -1);\n"
"    Date today = new Date();\n"
"    SimpleDateFormat formatter =\n"
"            new SimpleDateFormat(\"EEE, MMM d, ''yy\");\n"
"    while(cal.getTime().before(today)){\n"
"        // Create a point in time\n"
"        Item item = container.addItem(cal.getTime());\n"
"        \n"
"        // Set the timestamp property\n"
"        item.getItemProperty(Timeline.PropertyId.TIMESTAMP)\n"
"                .setValue(cal.getTime());\n"
"        \n"
"        // Set the caption property\n"
"        item.getItemProperty(Timeline.PropertyId.CAPTION)\n"
"                .setValue(\"M\");\n"
"            \n"
"        // Set the value property\n"
"        item.getItemProperty(Timeline.PropertyId.VALUE).\n"
"           setValue(\"Today is \"+formatter.format(cal.getTime()));\n"
"\n"
"        cal.add(Calendar.DAY_OF_MONTH, 7);\n"
"    }\n"
"    \n"
"    return container;        \n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2321
#, no-c-format
msgid "Here we start the same as in the example with the graph container by creating an indexed container. Remember, all containers must be indexed containers when using the graph component."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2327
#, no-c-format
msgid "We then add the timestamp property, caption property and value property."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2331
#, no-c-format
msgid "The timestamp property is the same as in the graph container but the caption and value property differ. The caption property describes what kind of marker it is. The caption is displayed on top of the arrow shape in the Timeline so it should be a short symbol, preferably only one character long. The class of the caption property must be String."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2339
#, no-c-format
msgid "The value property should also be a string and is displayed when the user hovers the mouse over the marker. This string can be arbitrarily long and normally should represent some kind of description of the marker."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2346
#, no-c-format
msgid "The third kind of data sources are the event data sources. The events are displayed on top of the timeline and supports grouping and are clickable. They are represented as button like icons in the Timeline."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2352
#, no-c-format
msgid "The event data sources are almost identical the to marker data sources except the value property is missing. Lets create an event data source and add events for each Sunday in out graph:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2358
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/**\n"
" * Creates a event container with a marker for each sunday\n"
" */\n"
"public Container.Indexed createEventDataSource(){\n"
"                \n"
"        // Create the container\n"
"        Container.Indexed container = new IndexedContainer();\n"
"        \n"
"        // Add the required property IDs (use the default ones here)\n"
"        container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,\n"
"                Date.class, null);\n"
"        container.addContainerProperty(Timeline.PropertyId.CAPTION, \n"
"                String.class, \"Our marker symbol\");\n"
"                        \n"
"        // Add a marker for every seven days\n"
"        Calendar cal = Calendar.getInstance();\n"
"        cal.add(Calendar.MONTH, -1);\n"
"        Date today = new Date();                \n"
"        while(cal.getTime().before(today)){\n"
"                if(cal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY){\n"
"                        // Create a point in time\n"
"                        Item item = container.addItem(cal.getTime());\n"
"                                \n"
"                        // Set the timestamp property\n"
"                        item.getItemProperty(Timeline.PropertyId.TIMESTAMP)\n"
"                .setValue(cal.getTime());\n"
"                                \n"
"                        // Set the caption property\n"
"                        item.getItemProperty(Timeline.PropertyId.CAPTION)\n"
"                                .setValue(\"Sunday\");                        \n"
"                }                        \n"
"                cal.add(Calendar.DAY_OF_MONTH, 1);\n"
"        }\n"
"                \n"
"        return container;                \n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2360
#, no-c-format
msgid "As you can see the event container does not differ a whole lot from the marker containers. In use however they differ since they are groupable they can be closely put together and still be usable and you can add click listeners to them so you can catch user events. More on the click listeners later."
msgstr ""

#. Tag: para
#: chapter-charts.xml:2368
#, no-c-format
msgid "So now we have our three data sources ready to be displayed in our application. In the next chapter we will use them with our Timeline and see how they integrate with it."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2376
#, no-c-format
msgid "Create the Timeline"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2378
#, no-c-format
msgid "Okay, now that we have out data sources lets look at the init-method in our Vaadin Application. Lets start by creating our timeline, so add the following line to the end of the init-method in <classname>MytimelinedemoApplication</classname>:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2385
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[Timeline timeline = new Timeline(\"Our timeline\");\n"
"timeline.setWidth(\"100%\");]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2387
#, no-c-format
msgid "This will create the timeline we want with a 100 percent width. Now lets add our data sources to the timeline:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2392
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[timeline.addGraphDataSource(createGraphDataSource(), \n"
"                        Timeline.PropertyId.TIMESTAMP,\n"
"                        Timeline.PropertyId.VALUE);\n"
"\n"
"timeline.setMarkerDataSource(createMarkerDataSource(), \n"
"                        Timeline.PropertyId.TIMESTAMP, \n"
"                        Timeline.PropertyId.CAPTION, \n"
"                        Timeline.PropertyId.VALUE);\n"
"\n"
"timeline.setEventDataSource(createEventDataSource(), \n"
"                        Timeline.PropertyId.TIMESTAMP,     \n"
"                        Timeline.PropertyId.CAPTION);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2395
#, no-c-format
msgid "And finally add the timeline to the UI. Here is the complete init-method:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2400
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[@Override\n"
"protected void init(VaadinRequest request) {\n"
"    VerticalLayout content = new VerticalLayout();\n"
"    setContent(content);\n"
"        \n"
"    // Create the timeline\n"
"    Timeline timeline = new Timeline(\"Our timeline\");\n"
"\n"
"    // Create the data sources\n"
"    Container.Indexed graphDS  = createGraphDataSource();\n"
"    Container.Indexed markerDS = createMarkerDataSource();\n"
"    Container.Indexed eventDS  = createEventDataSource();\n"
"        \n"
"    // Add our data sources\n"
"    timeline.addGraphDataSource(graphDS, \n"
"                                Timeline.PropertyId.TIMESTAMP,\n"
"                                Timeline.PropertyId.VALUE);\n"
"    timeline.setMarkerDataSource(markerDS, \n"
"                                 Timeline.PropertyId.TIMESTAMP,\n"
"                                 Timeline.PropertyId.CAPTION,     \n"
"                                 Timeline.PropertyId.VALUE);\n"
"    timeline.setEventDataSource(eventDS, \n"
"                                Timeline.PropertyId.TIMESTAMP,\n"
"                                Timeline.PropertyId.CAPTION);\n"
"        \n"
"    content.addComponent(timeline);        \n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2402
#, no-c-format
msgid "Now you should be able to start the application and browse the timeline. The result is shown in <xref linkend=\"figure.charts.timeline.code-example.timeline\"/>."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2409
#, no-c-format
msgid "Timeline Example Application"
msgstr ""

#. Tag: title
#: chapter-charts.xml:2422
#, no-c-format
msgid "Final Touches"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2424
#, no-c-format
msgid "Now that we have our timeline we would probably like to customize it a bit. There are many things you can do but lets start by giving our graph some style properties and a caption in the legend. This can be done as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2431
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Set the caption of the graph\n"
"timeline.setGraphLegend(graphDataSource, \"Our cool graph\");\n"
"        \n"
"// Set the color of the graph\n"
"timeline.setGraphOutlineColor(graphDataSource, Color.RED);\n"
"\n"
"// Set the fill color of the graph\n"
"timeline.setGraphFillColor(graphDataSource, new Color(255,0,0,128));\n"
"        \n"
"// Set the width of the graph\n"
"timeline.setGraphOutlineThickness(2.0);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2433
#, no-c-format
msgid "Lets do the same to the browser areas graph:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2437
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Set the color of the browser graph\n"
"timeline.setBrowserOutlineColor(graphDataSource, Color.BLACK);\n"
"\n"
"// Set the fill color of the graph\n"
"timeline.setBrowserFillColor(graphDataSource,\n"
"                             new Color(0,0,0,128));]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2439
#, no-c-format
msgid "And the result looks like this:"
msgstr ""

#. Tag: title
#: chapter-charts.xml:2444
#, no-c-format
msgid "Styling Timeline"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2455
#, no-c-format
msgid "Okay, now that looks different. But there is still something missing. If you look in the upper left corner you will not see any zoom levels. No zoom levels are predefined so we will have to make our own. Since we are dealing with a month of data lets make a zoom level for a day, a week and a month. Zoom levels are given in milliseconds so we will have to calculate how many milliseconds each of the zoom levels are. So lets add them by adding the following lines:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2465
#, no-c-format
msgid ""
"<![CDATA[// Add some zoom levels\n"
"timeline.addZoomLevel(\"Day\", 86400000L);\n"
"timeline.addZoomLevel(\"Week\", 7 * 86400000L);\n"
"timeline.addZoomLevel(\"Month\", 2629743830L);]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2467
#, no-c-format
msgid "Remember the events we added? You can now see them in the graph but their functionality is still a bit incomplete. We can add an event listener to the graph which will send an event each time the user clicks on one of the event buttons. To demonstrate this feature lets add an event listener which notifies the user what date the Sunday-button represents. Here is the code for that:"
msgstr ""

#. Tag: programlisting
#: chapter-charts.xml:2476
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Listen to click events from events\n"
"timeline.addListener(new Timeline.EventClickListener() {\n"
"    @Override\n"
"    public void eventClick(EventButtonClickEvent event) {\n"
"        Item item = eventDataSource.getItem(event.getItemIds()\n"
"                                   .iterator().next());\n"
"        Date sunday = (Date) item.getItemProperty(\n"
"                      Timeline.PropertyId.TIMESTAMP).getValue();\n"
"        SimpleDateFormat formatter =\n"
"            new SimpleDateFormat(\"EEE, MMM d, ''yy\");\n"
"        \n"
"        Notification.show(formatter.format(sunday));\n"
"    }        \n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2478
#, no-c-format
msgid "Now try clicking on the events and see what happens!"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2482
#, no-c-format
msgid "And here is the final demo application, yours will probably look a bit different since we are using random data."
msgstr ""

#. Tag: title
#: chapter-charts.xml:2488
#, no-c-format
msgid "Final Example"
msgstr ""

#. Tag: para
#: chapter-charts.xml:2499
#, no-c-format
msgid "Now we hope you have a basic understanding of how the Timeline works and how it can be customized. There are still a few features we left out of this tutorial like hiding unnecessary components from the timeline and adding multiple graphs to the timeline, but these are pretty self explanatory features and you probably can look them up in the JavaDoc."
msgstr ""
