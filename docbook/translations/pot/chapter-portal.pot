# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-11-13 16:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-portal.xml:11
#, no-c-format
msgid "Portal Integration"
msgstr ""

#. Tag: primary
#: chapter-portal.xml:13
#, no-c-format
msgid "portal integration"
msgstr ""

#. Tag: title
#: chapter-portal.xml:16
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-portal.xml:18
#, no-c-format
msgid "Vaadin supports running UIs as portlets in a portal, as defined in the JSR-286 (Java Portlet API 2.0) standard. The portlet UI is defined just as a regular UI, but deploying to a portal is somewhat different from deployment of regular web applications, requiring special portlet descriptors, etc. Creating the portlet project with the Vaadin Plugin for Eclipse, as described in <xref linkend=\"portal.eclipse\"/>, automatically generates the necessary descriptors."
msgstr ""

#. Tag: para
#: chapter-portal.xml:27
#, no-c-format
msgid "In addition to providing user interface through the Vaadin UI, portlets can integrate with the portal to switch between portlet modes and process special portal requests, such as actions and events."
msgstr ""

#. Tag: para
#: chapter-portal.xml:33
#, no-c-format
msgid "While providing generic support for all portals implementing the standard, Vaadin especially supports the Liferay portal and the needed portal-specific configuration in this chapter is given for Liferay. Vaadin also has a special Liferay IPC add-on to enable communication between portlets."
msgstr ""

#. Tag: title
#: chapter-portal.xml:42
#, no-c-format
msgid "Creating a Portlet Project in Eclipse"
msgstr ""

#. Tag: para
#: chapter-portal.xml:44
#, no-c-format
msgid "The Vaadin Plugin for Eclipse has a wizard for easy creation of portlet projects. It essentially creates all the necessary descriptor files so that you do not need to create them manually, as described later."
msgstr ""

#. Tag: para
#: chapter-portal.xml:50
#, no-c-format
msgid "Creating a portlet project is almost identical to the creation of a regular Vaadin servlet application project. For a full treatment of the New Project Wizard and the possible options, please see <xref linkend=\"getting-started.first-project.creation\"/>."
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:58
#, no-c-format
msgid "Start creating a new project by selecting from the menu <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Project...</guimenuitem></menuchoice>"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:65
#, no-c-format
msgid "In the <guilabel>New Project</guilabel> window that opens, select <menuchoice><guimenu>Web</guimenu><guimenuitem>Vaadin 7 Project</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:73
#, no-c-format
msgid "In the <guilabel>Vaadin Project</guilabel> step, you need to set the basic web project settings. You need to give at least the project name, the runtime, select <guilabel>Generic Portlet</guilabel> for the <guilabel>Deployment configuration</guilabel>; the default values should be good for the other settings."
msgstr ""

#. Tag: para
#: chapter-portal.xml:92
#, no-c-format
msgid "You can click <guibutton>Finish</guibutton> here to use the defaults for the rest of the settings, or click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:100
#, no-c-format
msgid "The settings in the <guilabel>Web Module</guilabel> step define the basic servlet-related settings and the structure of the web application project. All the settings are pre-filled, and you should normally accept them as they are and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:111
#, no-c-format
msgid "The <guilabel>Vaadin project</guilabel> step page has various Vaadin-specific application settings. These are largely the same as for regular applications. Setting them here is easiest - later some of the changes require changes in several different files. The <guilabel>Create portlet template</guilabel> option should be automatically selected. You can give another portlet title of you want. You can change most of the settings afterward."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:134
#, no-c-format
msgid "Create project template"
msgstr ""

#. Tag: para
#: chapter-portal.xml:136
#, no-c-format
msgid "Creates a UI class and all the needed portlet deployment descriptors."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:143
#, no-c-format
msgid "Application name"
msgstr ""

#. Tag: para
#: chapter-portal.xml:145
#, no-c-format
msgid "The application name is used in the title of the browser window, which is usually invisible in portlets, and as an identifier, either as is or with a suffix, in various deployment descriptors."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:154
#, no-c-format
msgid "Base package name"
msgstr ""

#. Tag: para
#: chapter-portal.xml:156
#, no-c-format
msgid "Java package for the UI class."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:162
#, no-c-format
msgid "Application class name"
msgstr ""

#. Tag: para
#: chapter-portal.xml:164
#, no-c-format
msgid "Name of the UI class. The default is derived from the project name."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:171
#, no-c-format
msgid "Theme name"
msgstr ""

#. Tag: para
#: chapter-portal.xml:173
#, no-c-format
msgid "Name of the custom portlet theme to use."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:179
#, no-c-format
msgid "Portlet version"
msgstr ""

#. Tag: para
#: chapter-portal.xml:181 chapter-portal.xml:202
#, no-c-format
msgid "Same as in the project settings."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:187
#, no-c-format
msgid "Portlet title"
msgstr ""

#. Tag: para
#: chapter-portal.xml:189
#, no-c-format
msgid "The portlet title, defined in <filename>portlet.xml</filename>, can be used as the display name of the portlet (at least in Liferay). The default value is the project name. The title is also used as a short description in <filename>liferay-plugin-package.properties</filename>."
msgstr ""

#. Tag: guilabel
#: chapter-portal.xml:200
#, no-c-format
msgid "Vaadin version"
msgstr ""

#. Tag: para
#: chapter-portal.xml:209
#, no-c-format
msgid "Finally, click <guibutton>Finish</guibutton> to create the project."
msgstr ""

#. Tag: para
#: chapter-portal.xml:215
#, no-c-format
msgid "Eclipse may ask you to switch to J2EE perspective. A Dynamic Web Project uses an external web server and the J2EE perspective provides tools to control the server and manage application deployment. Click <guibutton>Yes</guibutton>."
msgstr ""

#. Tag: title
#: chapter-portal.xml:226
#, no-c-format
msgid "Portlet UI"
msgstr ""

#. Tag: para
#: chapter-portal.xml:228
#, no-c-format
msgid "A portlet UI is just like in a regular Vaadin application, a class that extends <classname>com.vaadin.ui.UI</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:233
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[@Theme(\"liferay\")\n"
"public class MyportletUI extends UI {\n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        VerticalLayout layout = new VerticalLayout();\n"
"        setContent(layout);\n"
"\n"
"        ...\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:235
#, no-c-format
msgid "You need to define the portlet theme with the <classname>@Theme</classname> annotation as usual. The theme for the UI must match a theme installed in the portal. You can use any of the built-in themes in Vaadin. For Liferay theme compatibility, there is a special <literal>liferay</literal> theme. If you use a custom theme, you need to compile it to CSS with the theme compiler and install it in the portal under the <filename>VAADIN/themes</filename> context to be served statically."
msgstr ""

#. Tag: para
#: chapter-portal.xml:245
#, no-c-format
msgid "If you want to develop the UI also in a regular application server as a servlet, you can provide a servlet class annotated with <classname>@WebServlet</classname> (Servlet 3.0) or a deployment descriptor (Servlet 2.4) to deploy it as a servlet. The project wizard generates the servlet automatically as a static inner class, as described in <xref linkend=\"getting-started.first-project.exploring\"/>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:254
#, no-c-format
msgid "In addition to the UI class, you need the portlet descriptor files, Vaadin libraries, and other files as described later. <xref linkend=\"figure.portal.helloworld.project\"/> shows the complete project structure under Eclipse."
msgstr ""

#. Tag: title
#: chapter-portal.xml:262
#, no-c-format
msgid "Portlet Project Structure in Eclipse"
msgstr ""

#. Tag: para
#: chapter-portal.xml:273
#, no-c-format
msgid "Installed as a portlet in Liferay from the <guilabel>Add Application</guilabel> menu, the application will show as illustrated in <xref linkend=\"figure.portal.helloworld\"/>."
msgstr ""

#. Tag: title
#: chapter-portal.xml:280
#, no-c-format
msgid "Hello World Portlet"
msgstr ""

#. Tag: title
#: chapter-portal.xml:293
#, no-c-format
msgid "Deploying to a Portal"
msgstr ""

#. Tag: para
#: chapter-portal.xml:295
#, no-c-format
msgid "To deploy a portlet WAR in a portal, you need to provide a <filename>portlet.xml</filename> descriptor specified in the Java Portlet API 2.0 standard (JSR-286). In addition, you may need to include possible portal vendor specific deployment descriptors. The ones required by Liferay are described below."
msgstr ""

#. Tag: para
#: chapter-portal.xml:303
#, no-c-format
msgid "Deploying a Vaadin UI as a portlet is essentially just as easy as deploying a regular application to an application server. You do not need to make any changes to the UI itself, but only the following:"
msgstr ""

#. Tag: para
#: chapter-portal.xml:310
#, no-c-format
msgid "Application packaged as a WAR"
msgstr ""

#. Tag: para
#: chapter-portal.xml:312
#, no-c-format
msgid "<filename>WEB-INF/portlet.xml</filename> descriptor"
msgstr ""

#. Tag: para
#: chapter-portal.xml:313
#, no-c-format
msgid "<filename>WEB-INF/liferay-portlet.xml</filename> descriptor for Liferay"
msgstr ""

#. Tag: para
#: chapter-portal.xml:314
#, no-c-format
msgid "<filename>WEB-INF/liferay-display.xml</filename> descriptor for Liferay"
msgstr ""

#. Tag: para
#: chapter-portal.xml:315
#, no-c-format
msgid "<filename>WEB-INF/liferay-plugin-package.properties</filename> for Liferay"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:319
#, no-c-format
msgid "Widget set installed to portal (optional)"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:320
#, no-c-format
msgid "Themes installed to portal (optional)"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:321
#, no-c-format
msgid "Vaadin libraries installed to portal (optional)"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:322
#, no-c-format
msgid "Portal configuration settings (optional)"
msgstr ""

#. Tag: para
#: chapter-portal.xml:325
#, no-c-format
msgid "The Vaadin Plugin for Eclipse creates these files for you, when you create a portlet project as described in <xref linkend=\"portal.eclipse\"/>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:330
#, no-c-format
msgid "Installing the widget set and themes to the portal is required for running two or more Vaadin portlets simultaneously in a single portal page. As this situation occurs quite easily, we recommend installing them in any case. Instructions for Liferay are given in <xref linkend=\"portal.liferay\"/> and the procedure is similar for other portals."
msgstr ""

#. Tag: para
#: chapter-portal.xml:338
#, no-c-format
msgid "In addition to the Vaadin libraries, you will need to have the <filename>portlet.jar</filename> in your project classpath. However, notice that you must <emphasis>not</emphasis> put the <filename>portlet.jar</filename> in the same <filename>WEB-INF/lib</filename> directory as the Vaadin JAR or otherwise include it in the WAR to be deployed, because it would create a conflict with the internal portlet library of the portal. The conflict would cause errors such as \"<literal>ClassCastException: ...VaadinPortlet cannot be cast to javax.portlet.Portlet</literal>\"."
msgstr ""

#. Tag: title
#: chapter-portal.xml:350
#, no-c-format
msgid "Portlet Deployment Descriptor"
msgstr ""

#. Tag: para
#: chapter-portal.xml:352
#, no-c-format
msgid "The portlet WAR must include a portlet descriptor located at <filename>WEB-INF/portlet.xml</filename>. A portlet definition includes the portlet name, mapping to a servlet, modes supported by the portlet, and other configuration. Below is an example of a simple portlet definition in <filename>portlet.xml</filename> descriptor."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:360
#, no-c-format
msgid ""
"<?pocket-size 65% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;\n"
"&lt;portlet-app\n"
"  xmlns=\"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\"\n"
"  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"  version=\"2.0\"\n"
"  xsi:schemaLocation=\n"
"    \"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\n"
"     http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\"&gt;\n"
"\n"
"  &lt;portlet&gt;\n"
"    &lt;portlet-name&gt;<emphasis role=\"bold\">Portlet Example portlet</emphasis>&lt;/portlet-name&gt;\n"
"    &lt;display-name&gt;<emphasis role=\"bold\">Vaadin Portlet Example</emphasis>&lt;/display-name&gt;\n"
"\n"
"    &lt;!-- Map portlet to a servlet. --&gt;\n"
"    &lt;portlet-class&gt;\n"
"      com.vaadin.server.VaadinPortlet\n"
"    &lt;/portlet-class&gt;\n"
"    &lt;init-param&gt;\n"
"      &lt;name&gt;UI&lt;/name&gt;\n"
"\n"
"      &lt;!-- The application class with package name. --&gt;\n"
"      &lt;value&gt;<emphasis role=\"bold\">com.example.myportlet.MyportletUI</emphasis>&lt;/value&gt;\n"
"    &lt;/init-param&gt;\n"
"\n"
"    &lt;!-- Supported portlet modes and content types. --&gt;\n"
"    &lt;supports&gt;\n"
"      &lt;mime-type&gt;text/html&lt;/mime-type&gt;\n"
"      &lt;portlet-mode&gt;view&lt;/portlet-mode&gt;\n"
"      &lt;portlet-mode&gt;edit&lt;/portlet-mode&gt;\n"
"      &lt;portlet-mode&gt;help&lt;/portlet-mode&gt;\n"
"    &lt;/supports&gt;\n"
"\n"
"    &lt;!-- Not always required but Liferay requires these. --&gt;\n"
"    &lt;portlet-info&gt;\n"
"      &lt;title&gt;<emphasis role=\"bold\">Vaadin Portlet Example</emphasis>&lt;/title&gt;\n"
"      &lt;short-title&gt;<emphasis role=\"bold\">Portlet Example</emphasis>&lt;/short-title&gt;\n"
"    &lt;/portlet-info&gt;\n"
"  &lt;/portlet&gt;\n"
"&lt;/portlet-app&gt;"
msgstr ""

#. Tag: para
#: chapter-portal.xml:362
#, no-c-format
msgid "Listing supported portlet modes in <filename>portlet.xml</filename> enables the corresponding portlet controls in the portal user interface that allow changing the mode, as described later."
msgstr ""

#. Tag: title
#: chapter-portal.xml:370
#, no-c-format
msgid "Liferay Portlet Descriptor"
msgstr ""

#. Tag: primary
#: chapter-portal.xml:373 chapter-portal.xml:405 chapter-portal.xml:453
#, no-c-format
msgid "Liferay"
msgstr ""

#. Tag: secondary
#: chapter-portal.xml:374
#, no-c-format
msgid "portlet descriptor"
msgstr ""

#. Tag: para
#: chapter-portal.xml:377
#, no-c-format
msgid "Liferay requires a special <filename>liferay-portlet.xml</filename> descriptor file that defines Liferay-specific parameters. Especially, Vaadin portlets must be defined as \"<emphasis>instanceable</emphasis>\", but not \"<emphasis>ajaxable</emphasis>\"."
msgstr ""

#. Tag: para
#: chapter-portal.xml:384
#, no-c-format
msgid "Below is an example descriptor for the earlier portlet example:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:388
#, no-c-format
msgid ""
"<?pocket-size 65% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;!DOCTYPE liferay-portlet-app PUBLIC\n"
"  \"-//Liferay//DTD Portlet Application 4.3.0//EN\"\n"
"  \"http://www.liferay.com/dtd/liferay-portlet-app_4_3_0.dtd\"&gt;\n"
"\n"
"&lt;liferay-portlet-app&gt;\n"
"    &lt;portlet&gt;\n"
"        &lt;!-- Matches definition in portlet.xml.          --&gt;\n"
"        &lt;!-- Note: Must not be the same as servlet name. --&gt;\n"
"        &lt;portlet-name&gt;<emphasis role=\"bold\">Portlet Example portlet</emphasis>&lt;/portlet-name&gt;\n"
"\n"
"        &lt;instanceable&gt;true&lt;/instanceable&gt;\n"
"        &lt;ajaxable&gt;false&lt;/ajaxable&gt;\n"
"    &lt;/portlet&gt;\n"
"&lt;/liferay-portlet-app&gt;"
msgstr ""

#. Tag: para
#: chapter-portal.xml:390
#, no-c-format
msgid "See Liferay documentation for further details on the <filename>liferay-portlet.xml</filename> deployment descriptor."
msgstr ""

#. Tag: title
#: chapter-portal.xml:399
#, no-c-format
msgid "Liferay Display Descriptor"
msgstr ""

#. Tag: filename
#: chapter-portal.xml:402
#, no-c-format
msgid "liferay-display.xml"
msgstr ""

#. Tag: secondary
#: chapter-portal.xml:406
#, no-c-format
msgid "display descriptor"
msgstr ""

#. Tag: para
#: chapter-portal.xml:409
#, no-c-format
msgid "The <filename>WEB-INF/liferay-display.xml</filename> file defines the portlet category under which portlets are located in the <guilabel>Add Application</guilabel> window in Liferay. Without this definition, portlets will be organized under the \"Undefined\" category."
msgstr ""

#. Tag: para
#: chapter-portal.xml:416
#, no-c-format
msgid "The following display configuration, which is included in the demo WAR, puts the Vaadin portlets under the \"Vaadin\" category, as shown in <xref linkend=\"figure.portal.liferay.descriptor.display\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:422
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[<?xml version=\"1.0\"?>\n"
"<!DOCTYPE display PUBLIC\n"
"  \"-//Liferay//DTD Display 4.0.0//EN\"\n"
"  \"http://www.liferay.com/dtd/liferay-display_4_0_0.dtd\">\n"
"\n"
"<display>\n"
"    <category name=\"Vaadin\">\n"
"        <portlet id=\"Portlet Example portlet\" />\n"
"    </category>\n"
"</display>]]>"
msgstr ""

#. Tag: title
#: chapter-portal.xml:425
#, no-c-format
msgid "Portlet Categories in Add Application Window"
msgstr ""

#. Tag: para
#: chapter-portal.xml:436
#, no-c-format
msgid "See Liferay documentation for further details on how to configure the categories in the <filename>liferay-display.xml</filename> deployment descriptor."
msgstr ""

#. Tag: title
#: chapter-portal.xml:447
#, no-c-format
msgid "Liferay Plugin Package Properties"
msgstr ""

#. Tag: filename
#: chapter-portal.xml:450
#, no-c-format
msgid "liferay-plugin-package.xml"
msgstr ""

#. Tag: secondary
#: chapter-portal.xml:454
#, no-c-format
msgid "plugin properties"
msgstr ""

#. Tag: para
#: chapter-portal.xml:457
#, no-c-format
msgid "The <filename>liferay-plugin-package.properties</filename> file defines a number of settings for the portlet, most importantly the Vaadin JAR to be used."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:463
#, no-c-format
msgid ""
"<?pocket-size 75% ?>name=<emphasis role=\"bold\">Portlet Example portlet</emphasis>\n"
"short-description=<emphasis role=\"bold\">myportlet</emphasis>\n"
"module-group-id=<emphasis role=\"bold\">Vaadin</emphasis>\n"
"module-incremental-version=1\n"
"#change-log=\n"
"#page-uri=\n"
"#author=\n"
"license=Proprietary\n"
"portal-dependency-jars=\\\n"
"    <emphasis role=\"bold\">vaadin.jar</emphasis>"
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:467
#, no-c-format
msgid "name"
msgstr ""

#. Tag: para
#: chapter-portal.xml:469
#, no-c-format
msgid "The plugin name must match the portlet name."
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:475
#, no-c-format
msgid "short-description"
msgstr ""

#. Tag: para
#: chapter-portal.xml:477
#, no-c-format
msgid "A short description of the plugin. This is by default the project name."
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:484
#, no-c-format
msgid "module-group-id"
msgstr ""

#. Tag: para
#: chapter-portal.xml:486
#, no-c-format
msgid "The application group, same as the category id defined in <filename>liferay-display.xml</filename>."
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:493
#, no-c-format
msgid "license"
msgstr ""

#. Tag: para
#: chapter-portal.xml:495
#, no-c-format
msgid "The plugin license type; \"proprietary\" by default."
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:501
#, no-c-format
msgid "portal-dependency-jars"
msgstr ""

#. Tag: para
#: chapter-portal.xml:503
#, no-c-format
msgid "The JAR libraries on which this portlet depends. This should have value <filename>vaadin.jar</filename>, unless you need to use a specific version. The JAR must be installed in the portal, for example, in Liferay bundled with Tomcat to <filename>tomcat-x.x.x/webapps/ROOT/WEB-INF/lib/vaadin.jar</filename>."
msgstr ""

#. Tag: title
#: chapter-portal.xml:519
#, no-c-format
msgid "Using a Single Widget Set"
msgstr ""

#. Tag: para
#: chapter-portal.xml:521
#, no-c-format
msgid "If you have just one Vaadin application that you ever need to run in your portal, you can just deploy the WAR as described above and that's it. However, if you have multiple applications, especially ones that use different custom widget sets, you run into problems, because a portal window can load only a single Vaadin widget set at a time. You can solve this problem by combining all the different widget sets in your different applications into a single widget set using inheritance or composition."
msgstr ""

#. Tag: para
#: chapter-portal.xml:531
#, no-c-format
msgid "For example, if using the default widget set for portlets, you should have the following for all portlets so that they will all use the same widget set:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:537
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<portlet>\n"
"  ...\n"
"  <!-- Use the portal default widget set for all portal demos. -->\n"
"  <init-param>\n"
"    <name>widgetset</name>\n"
"    <value>com.vaadin.portal.PortalDefaultWidgetSet</value>\n"
"  </init-param>\n"
"  ...]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:539
#, no-c-format
msgid "The <classname>PortalDefaultWidgetSet</classname> extends <classname>SamplerWidgetSet</classname>, which extends the <classname>DefaultWidgetSet</classname>. The <classname>DefaultWidgetSet</classname> is therefore essentially a subset of <classname>PortalDefaultWidgetSet</classname>, which contains also the widgets required by the Sampler demo. Other applications that would otherwise require only the regular <classname>DefaultWidgetSet</classname>, and do not define their own widgets, can just as well use the larger set, making them compatible with the demos. The <classname>PortalDefaultWidgetSet</classname> will also be the default Vaadin widgetset bundled in Liferay 5.3 and later."
msgstr ""

#. Tag: para
#: chapter-portal.xml:553
#, no-c-format
msgid "If your portlets are contained in multiple WARs, which can happen quite typically, you need to install the widget set and theme portal-wide so that all the portlets can use them. See <xref linkend=\"portal.liferay\"/> on configuring the widget sets in the portal itself."
msgstr ""

#. Tag: title
#: chapter-portal.xml:562
#, no-c-format
msgid "Building the WAR Package"
msgstr ""

#. Tag: para
#: chapter-portal.xml:564
#, no-c-format
msgid "To deploy the portlet, you need to build a WAR package. For production deployment, you probably want to either use Maven or an Ant script to build the package. In Eclipse, you can right-click on the project and select <menuchoice><guimenu>Export</guimenu><guimenuitem>WAR</guimenuitem></menuchoice>. Choose a name for the package and a target. If you have installed Vaadin in the portal as described in <xref linkend=\"portal.liferay\"/>, you should exclude all the Vaadin libraries, as well as widget set and themes from the WAR."
msgstr ""

#. Tag: title
#: chapter-portal.xml:578
#, no-c-format
msgid "Deploying the WAR Package"
msgstr ""

#. Tag: para
#: chapter-portal.xml:580
#, no-c-format
msgid "How you actually deploy a WAR package depends on the portal. In Liferay, you simply drop it to the <filename>deploy</filename> subdirectory under the Liferay installation directory. The deployment depends on the application server under which Liferay runs; for example, if you use Liferay bundled with Tomcat, you will find the extracted package in the <filename>webapps</filename> directory under the Tomcat installation directory included in Liferay."
msgstr ""

#. Tag: title
#: chapter-portal.xml:593
#, no-c-format
msgid "Installing Vaadin in Liferay"
msgstr ""

#. Tag: para
#: chapter-portal.xml:595
#, no-c-format
msgid "Loading widget sets, themes, and the Vaadin JAR from a portlet is possible as long as you have a single portlet, but causes a problem if you have multiple portlets. To solve this, Vaadin portlets need to use a globally installed widget set, theme, and Vaadin libraries."
msgstr ""

#. Tag: emphasis
#: chapter-portal.xml:603
#, no-c-format
msgid "Liferay 6.1, which is the latest Liferay version at the time of publication of this book, comes bundled with an older Vaadin 6 version. If you want to use Vaadin 7, you need to remove the bundled version and install the newer one manually as described in this chapter."
msgstr ""

#. Tag: para
#: chapter-portal.xml:609
#, no-c-format
msgid "In these instructions, we assume that you use Liferay bundled with Apache Tomcat, although you can use almost any other application server with Liferay just as well. The Tomcat installation is included in the Liferay installation package, under the <filename>tomcat-x.x.x</filename> directory."
msgstr ""

#. Tag: title
#: chapter-portal.xml:617
#, no-c-format
msgid "Removing the Bundled Installation"
msgstr ""

#. Tag: para
#: chapter-portal.xml:619
#, no-c-format
msgid "Before installing a new Vaadin version, you need to remove the version bundled with Liferay. You need to remove the Vaadin library JAR from the library directory of the portal and the <filename>VAADIN</filename> directory from under the root context. For example, with Tomcat, they are usually located as follows:"
msgstr ""

#. Tag: filename
#: chapter-portal.xml:628
#, no-c-format
msgid "tomcat-x.x.x/webapps/ROOT/html/VAADIN"
msgstr ""

#. Tag: filename
#: chapter-portal.xml:629
#, no-c-format
msgid "tomcat-x.x.x/webapps/ROOT/WEB-INF/lib/vaadin.jar"
msgstr ""

#. Tag: title
#: chapter-portal.xml:634
#, no-c-format
msgid "Installing Vaadin"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:637
#, no-c-format
msgid "Get the Vaadin installation package from the Vaadin download page"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:639
#, no-c-format
msgid "Extract the following Vaadin JARs from the installation package: <filename>vaadin-server.jar</filename> and <filename>vaadin-shared.jar</filename>, as well as the <filename>vaadin-shared-deps.jar</filename> and <filename>jsoup.jar</filename> dependencies from the <filename>lib</filename> folder"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:646
#, no-c-format
msgid "Rename the JAR files as they were listed above, without the version number"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:648
#, no-c-format
msgid "Put the libraries in <filename>tomcat-x.x.x/webapps/ROOT/WEB-INF/lib/</filename>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:651
#, no-c-format
msgid "Extract the <filename>VAADIN</filename> folders from <filename>vaadin-server.jar</filename>, <filename>vaadin-themes.jar</filename>, and <filename>vaadin-client-compiled.jar</filename> and copy their contents to <filename>tomcat-x.x.x/webapps/ROOT/html/VAADIN</filename>."
msgstr ""

#. Tag: screen
#: chapter-portal.xml:660
#, no-c-format
msgid "<prompt>$</prompt> <command>cd</command> tomcat-x.x.x/webapps/ROOT/html"
msgstr ""

#. Tag: screen
#: chapter-portal.xml:661
#, no-c-format
msgid "<prompt>$</prompt> <command>unzip</command> path-to/vaadin-server-7.1.0.jar 'VAADIN/*'"
msgstr ""

#. Tag: screen
#: chapter-portal.xml:662
#, no-c-format
msgid "<prompt>$</prompt> <command>unzip</command> path-to/vaadin-themes-7.1.0.jar 'VAADIN/*'"
msgstr ""

#. Tag: screen
#: chapter-portal.xml:663
#, no-c-format
msgid "<prompt>$</prompt> <command>unzip</command> path-to/vaadin-client-compiled-7.1.0.jar 'VAADIN/*'"
msgstr ""

#. Tag: para
#: chapter-portal.xml:668
#, no-c-format
msgid "You need to define the widget set, the theme, and the JAR in the <filename>portal-ext.properties</filename> configuration file for Liferay, as described earlier. The file should normally be placed in the Liferay installation directory. See Liferay documentation for details on the configuration file."
msgstr ""

#. Tag: para
#: chapter-portal.xml:676
#, no-c-format
msgid "Below is an example of a <filename>portal-ext.properties</filename> file:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:680
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[# Path under which the VAADIN directory is located.\n"
"# (/html is the default so it is not needed.)\n"
"# vaadin.resources.path=/html\n"
"\n"
"# Portal-wide widget set\n"
"vaadin.widgetset=com.vaadin.portal.gwt.PortalDefaultWidgetSet\n"
"\n"
"# Theme to use\n"
"vaadin.theme=liferay]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:682
#, no-c-format
msgid "The allowed parameters are:"
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:688
#, no-c-format
msgid "vaadin.resources.path"
msgstr ""

#. Tag: para
#: chapter-portal.xml:690
#, no-c-format
msgid "Specifies the resource root path under the portal context. This is <filename>/html</filename> by default. Its actual location depends on the portal and the application server; in Liferay with Tomcat it would be located at <filename>webapps/ROOT/html</filename> under the Tomcat installation directory."
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:698
#, no-c-format
msgid "vaadin.widgetset"
msgstr ""

#. Tag: para
#: chapter-portal.xml:700
#, no-c-format
msgid "The widget set class to use. Give the full path to the class name in the dot notation. If the parameter is not given, the default widget set is used."
msgstr ""

#. Tag: parameter
#: chapter-portal.xml:706
#, no-c-format
msgid "vaadin.theme"
msgstr ""

#. Tag: para
#: chapter-portal.xml:708
#, no-c-format
msgid "Name of the theme to use. If the parameter is not given, the default theme is used, which is <literal>reindeer</literal> in Vaadin 6."
msgstr ""

#. Tag: para
#: chapter-portal.xml:715
#, no-c-format
msgid "You will need to restart Liferay after creating or modifying the <filename>portal-ext.properties</filename> file."
msgstr ""

#. Tag: title
#: chapter-portal.xml:722
#, no-c-format
msgid "Handling Portlet Requests"
msgstr ""

#. Tag: emphasis
#: chapter-portal.xml:725 chapter-portal.xml:985
#, no-c-format
msgid "This section is not yet updated for Vaadin 7."
msgstr ""

#. Tag: para
#: chapter-portal.xml:728
#, no-c-format
msgid "Portals such as Liferay are not AJAX applications, but reload the page every time a user interaction requires data from the server. They consider a Vaadin UI to be a regular web application that works by HTTP requests. All the AJAX communications required by the Vaadin UI are done by the Vaadin Client-Side Engine (the widget set) past the portal, so that the portal is unaware of the communications."
msgstr ""

#. Tag: para
#: chapter-portal.xml:737
#, no-c-format
msgid "The only way a portal can interact with a UI is to load it with a HTTP request; reloading does not reset the UI. The Portlet 2.0 API supports four types of requests: <emphasis>render</emphasis>, <emphasis>action</emphasis>, <emphasis>resource</emphasis>, and <emphasis>event</emphasis> requests. Requests can be caused by user interaction with the portal controls or by clicking action URLs displayed by the portlet. You can handle portlet requests by implementing the <classname>PortletListener</classname> interface and the handler methods for each of the request types. You can use the request object passed to the handler to access certain portal data, such as user information, the portlet mode, etc."
msgstr ""

#. Tag: para
#: chapter-portal.xml:750
#, no-c-format
msgid "The <classname>PortletListener</classname> interface is defined in the <classname>PortletApplicationContext2</classname> for Portlet 2.0 API. You can get the portlet application context with <methodname>getContext()</methodname> method of the application class."
msgstr ""

#. Tag: para
#: chapter-portal.xml:757
#, no-c-format
msgid "You need to have the <filename>portlet.jar</filename> in your class path during development. However, you must <emphasis>not</emphasis> deploy the <filename>portlet.jar</filename> with the portlet, because it would create a conflict with the internal portlet library of the portal. You should put it in a directory that is not deployed with the portlet, for example, if you are using Eclipse, under the <filename>lib</filename> directory under the project root, and not under <filename>WebContent/WEB-INF/lib</filename>, for example."
msgstr ""

#. Tag: para
#: chapter-portal.xml:767
#, no-c-format
msgid "You can also define portal actions that you can handle in the <methodname>handleActionRequest()</methodname> method of the interface."
msgstr ""

#. Tag: para
#: chapter-portal.xml:772
#, no-c-format
msgid "You add your portlet request listener to the application context of your application, which is a <classname>PortletApplicationContext</classname> when (and only when) the application is being run as a portlet."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:778
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[// Check that we are running as a portlet.\n"
"if (getContext() instanceof PortletApplicationContext2) {\n"
"    PortletApplicationContext2 ctx =\n"
"            (PortletApplicationContext2) getContext();\n"
"\n"
"    // Add a custom listener to handle action and\n"
"    // render requests.\n"
"    ctx.addPortletListener(this, new MyPortletListener());\n"
"} else {\n"
"    Notification.show(\"Not initialized via Portal!\",\n"
"                      Notification.TYPE_ERROR_MESSAGE);\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:780
#, no-c-format
msgid "The handler methods receive references to request and response objects, which are defined in the Java Servlet API. Please refer to the Servlet API documentation for further details."
msgstr ""

#. Tag: para
#: chapter-portal.xml:786
#, no-c-format
msgid "The PortletDemo application included in the demo WAR package includes examples of processing mode and portlet window state changes in a portlet request listener."
msgstr ""

#. Tag: title
#: chapter-portal.xml:794
#, no-c-format
msgid "Handling Portlet Mode Changes"
msgstr ""

#. Tag: emphasis
#: chapter-portal.xml:797 chapter-portal.xml:873
#, no-c-format
msgid "This section is not yet updated for Vaadin 7. Requires fixing <link xlink:href=\"http://dev.vaadin.com/ticket/12274\">Ticket #12274</link>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:802
#, no-c-format
msgid "Portals support three portlet modes defined in the Portlet API: <emphasis>view</emphasis>, <emphasis>edit</emphasis>, and <emphasis>help</emphasis> modes. The <emphasis>view</emphasis> mode is the default and the portal can have buttons to switch the portlet to the other modes. In addition to the three predefined modes, the Portlet API standards allow custom portlet modes, although portals may support custom modes to a varying degree."
msgstr ""

#. Tag: para
#: chapter-portal.xml:812
#, no-c-format
msgid "You need to define which portlet modes are enabled in the <filename>portlet.xml</filename> deployment descriptor as follows."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:817
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<!-- Supported portlet modes and content types. -->\n"
"<supports>\n"
"    <mime-type>text/html</mime-type>\n"
"    <portlet-mode>view</portlet-mode>\n"
"    <portlet-mode>edit</portlet-mode>\n"
"    <portlet-mode>help</portlet-mode>\n"
"</supports>]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:819
#, no-c-format
msgid "Changes in the portlet mode are received as resource requests, which you can handle with a <methodname>handleResourceRequest()</methodname>, defined in the <classname>PortletListener</classname> interface. The current portlet mode can be acquired with <methodname>getPortletMode()</methodname> from the request object."
msgstr ""

#. Tag: para
#: chapter-portal.xml:827
#, no-c-format
msgid "The following complete example (for Portlet 2.0) shows how to handle the three built-modes in a portlet application."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:832
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Use Portlet 2.0 API\n"
"import com.vaadin.terminal.gwt.server.PortletApplicationContext2;\n"
"import com.vaadin.terminal.gwt.server.PortletApplicationContext2.PortletListener;\n"
"\n"
"public class PortletModeExample extends Application\n"
"                                implements PortletListener {\n"
"    Window         mainWindow;\n"
"    ObjectProperty data; // Data to view and edit\n"
"    VerticalLayout viewContent   = new VerticalLayout();\n"
"    VerticalLayout editContent   = new VerticalLayout();\n"
"    VerticalLayout helpContent   = new VerticalLayout();\n"
"    \n"
"    @Override\n"
"    public void init() {\n"
"        mainWindow = new Window(\"Myportlet Application\");\n"
"        setMainWindow(mainWindow);\n"
"\n"
"        // Data model\n"
"        data = new ObjectProperty(\"<h1>Heading</h1>\"+\n"
"                       \"<p>Some example content</p>\");\n"
"\n"
"        // Prepare views for the three modes (view, edit, help)\n"
"        // Prepare View mode content\n"
"        Label viewText = new Label(data, Label.CONTENT_XHTML);\n"
"        viewContent.addComponent(viewText);\n"
"\n"
"        // Prepare Edit mode content\n"
"        RichTextArea editText = new RichTextArea();\n"
"        editText.setCaption(\"Edit the value:\");\n"
"        editText.setPropertyDataSource(data);\n"
"        editContent.addComponent(editText);\n"
"\n"
"        // Prepare Help mode content\n"
"        Label helpText = new Label(\"<h1>Help</h1>\" +\n"
"                                   \"<p>This helps you!</p>\",\n"
"                                   Label.CONTENT_XHTML);\n"
"        helpContent.addComponent(helpText);\n"
"\n"
"        // Start in the view mode\n"
"        mainWindow.setContent(viewContent);\n"
"\n"
"        // Check that we are running as a portlet.\n"
"        if (getContext() instanceof PortletApplicationContext2) {\n"
"            PortletApplicationContext2 ctx =\n"
"                (PortletApplicationContext2) getContext();\n"
"\n"
"            // Add a custom listener to handle action and\n"
"            // render requests.\n"
"            ctx.addPortletListener(this, this);\n"
"        } else {\n"
"            Notification.show(\"Not running in portal\",\n"
"                              Notification.TYPE_ERROR_MESSAGE);\n"
"        }\n"
"    }\n"
"\n"
"    // Dummy implementations for the irrelevant request types\n"
"    public void handleActionRequest(ActionRequest request,\n"
"                                    ActionResponse response,\n"
"                                    Window window) {\n"
"    }\n"
"    public void handleRenderRequest(RenderRequest request,\n"
"                                    RenderResponse response,\n"
"                                    Window window) {\n"
"    }\n"
"    public void handleEventRequest(EventRequest request,\n"
"                                   EventResponse response,\n"
"                                   Window window) {\n"
"    }\n"
"\n"
"    public void handleResourceRequest(ResourceRequest request,\n"
"                                      ResourceResponse response,\n"
"                                      Window window) {\n"
"        // Switch the view according to the portlet mode\n"
"        if (request.getPortletMode() == PortletMode.EDIT)\n"
"            window.setContent(editContent);\n"
"        else if (request.getPortletMode() == PortletMode.VIEW)\n"
"            window.setContent(viewContent);\n"
"        else if (request.getPortletMode() == PortletMode.HELP)\n"
"            window.setContent(helpContent);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:834
#, no-c-format
msgid "shows the resulting portlet in the three modes: view, edit, and help. In Liferay, the edit mode is shown in the popup menu as a <guilabel>Preferences</guilabel> item."
msgstr ""

#. Tag: title
#: chapter-portal.xml:841
#, no-c-format
msgid "Portlet Modes in Action"
msgstr ""

#. Tag: title
#: chapter-portal.xml:870
#, no-c-format
msgid "Non-Vaadin Portlet Modes"
msgstr ""

#. Tag: para
#: chapter-portal.xml:878
#, no-c-format
msgid "In some cases, it can be useful to implement certain modes of a portlet as pure HTML or JSP pages instead of running the full Vaadin application user interface in them. Common reasons for this are static pages (for example, a simple help mode), integrating legacy content to a portlet (for example, a JSP configuration interface), and providing an ultra-lightweight initial view for a portlet (for users behind slow connections)."
msgstr ""

#. Tag: para
#: chapter-portal.xml:887
#, no-c-format
msgid "Fully static modes that do not require the Vaadin server side application to be running can be implemented by subclassing the portlet class <classname>VaadinPortlet</classname>. The subclass can either create the HTML content directly or dispatch the request to, for example, a HTML or JSP page via the portal. When using this approach, any Vaadin portlet and portlet request listeners are not called."
msgstr ""

#. Tag: para
#: chapter-portal.xml:896
#, no-c-format
msgid "Customizing the content for the standard modes (<emphasis>view</emphasis>, <emphasis>edit</emphasis>, and <emphasis>help</emphasis>) can be performed by overriding the methods <methodname>doView</methodname>, <methodname>doEdit</methodname> and <methodname>doHelp</methodname>, respectively. Custom modes can be handled by implementing similar methods with the <classname>@javax.portlet.RenderMode(name = \"mymode\")</classname> annotation."
msgstr ""

#. Tag: para
#: chapter-portal.xml:906
#, no-c-format
msgid "You need to define which portlet modes are enabled in the <filename>portlet.xml</filename> deployment descriptor as described in <xref linkend=\"portal.portlet-mode\"/>. Also, the portlet class in <filename>portlet.xml</filename> should point to the customized subclass of <classname>VaadinPortlet</classname>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:914
#, no-c-format
msgid "The following example (for Portlet 2.0) shows how to create a static help page for the portlet."
msgstr ""

#. Tag: para
#: chapter-portal.xml:919
#, no-c-format
msgid "<filename>portlet.xml</filename>:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:923
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<!-- Supported portlet modes and content types. -->\n"
"<supports>\n"
"    <mime-type>text/html</mime-type>\n"
"    <portlet-mode>view</portlet-mode>\n"
"    <portlet-mode>help</portlet-mode>\n"
"</supports>]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:925
#, no-c-format
msgid "<filename>HtmlHelpPortlet.java:</filename>:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:929
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Use Portlet 2.0 API\n"
"import com.vaadin.server.VaadinPortlet;\n"
"\n"
"public class HtmlHelpPortlet extends VaadinPortlet {\n"
"    // Override the help mode, let the Vaadin\n"
"    // application handle the view mode\n"
"    @Override\n"
"    protected void doHelp(RenderRequest request,\n"
"                          RenderResponse response)\n"
"            throws PortletException, IOException {\n"
"        // Bypass the Vaadin application entirely\n"
"        response.setContentType(\"text/html\");\n"
"        response.getWriter().println(\n"
"                \"This is the help text as plain HTML.\");\n"
"\n"
"        // Alternatively, you could use the dispatcher for,\n"
"        // for example, JSP help pages as follows:\n"
"        // PortletRequestDispatcher dispatcher = getPortletContext()\n"
"        // .getRequestDispatcher(\"/html/myhelp.jsp\");\n"
"        // dispatcher.include(request, response);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:931
#, no-c-format
msgid "To produce pure HTML portlet content from a running Vaadin application instead of statically outside an application, the <methodname>writeAjaxPage()</methodname> method <classname>VaadinPortlet</classname> should be overridden. This approach allows using the application state in HTML content generation, and all relevant Vaadin portlet request and portlet listeners are called around the portlet content generation. However, the client side engine (widgetset) is not loaded by the browser, which can shorten the initial page display time."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:942
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<portlet-class>com.vaadin.demo.portlet.HtmlModePortlet</portlet-class>\n"
"<supports>\n"
"    <mime-type>text/html</mime-type>\n"
"    <portlet-mode>view</portlet-mode>\n"
"    <portlet-mode>help</portlet-mode>\n"
"</supports>]]>"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:944
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class CountUI extends UI {\n"
"    private int count = 0;\n"
"    \n"
"    public void init() {\n"
"        Window w = new Window(\"Portlet mode example\");\n"
"        w.addComponent(new Label(\"This is the Vaadin app.\"));\n"
"        w.addComponent(new Label(\"Try opening the help mode.\"));\n"
"        setMainWindow(w);\n"
"    }\n"
"        \n"
"    public int incrementCount() {\n"
"        return ++count;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:946
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Use Portlet 2.0 API\n"
"public class HtmlModePortlet extends AbstractVaadinPortlet {\n"
"\n"
"    @Override\n"
"    protected void writeAjaxPage(RenderRequest request,\n"
"            RenderResponse response, Window window,\n"
"            UI app)\n"
"                throws PortletException, IOException {\n"
"        if (PortletMode.HELP.equals(request.getPortletMode())) {\n"
"            CountApplication capp = (CountApplication) app;\n"
"            response.setContentType(\"text/html\");\n"
"            response.getWriter().println(\n"
"                \"This is the HTML help, shown \"\n"
"                + capp.incrementCount() + \" times so far.\");\n"
"        } else {\n"
"            super.writeAjaxPage(request, response, window, app);\n"
"        }\n"
"    }\n"
"    \n"
"    @Override\n"
"    protected Class<? extends Application> getApplicationClass(){\n"
"        return CountApplication.class;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:948
#, no-c-format
msgid "The user can freely move between Vaadin and non-Vaadin portlet modes with the user interface provided by the portal (for standard modes) or the portlet (for example, action links). Once the server side application has been started, it continues to run as long as the session is alive. If necessary, specific portlet mode transitions can be disallowed in <filename>portlet.xml</filename>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:957
#, no-c-format
msgid "In the case of Portlet 1.0, both a portlet and a servlet are involved. A render request is received by <classname>ApplicationPortlet</classname> when the portlet mode is changed, and serving pure HTML in some modes can be achieved by overriding the method <methodname>render</methodname> and handling the modes of interest separately while calling <methodname>super.render()</methodname> for other modes. As always, when extending the portlet, the reference to the portlet class in <filename>portlet.xml</filename> needs to be updated."
msgstr ""

#. Tag: para
#: chapter-portal.xml:968
#, no-c-format
msgid "To serve HTML-only content in the Portlet 1.0 case after starting the server side application and calling the relevant listeners, the servlet class <classname>ApplicationServlet</classname> should be subclassed instead of the portlet. The method <methodname>writeAjaxPage</methodname> can be overridden to produce custom HTML content for certain modes. However, it should be noted that some HTML content (for example, loading the portal-wide Vaadin theme) is created by the portlet and not the servlet."
msgstr ""

#. Tag: title
#: chapter-portal.xml:980
#, no-c-format
msgid "Vaadin IPC for Liferay"
msgstr ""

#. Tag: primary
#: chapter-portal.xml:982
#, no-c-format
msgid "IPC add-on"
msgstr ""

#. Tag: para
#: chapter-portal.xml:988
#, no-c-format
msgid "Portlets rarely live alone. A page can contain multiple portlets and when the user interacts with one portlet, you may need to have the other portlets react to the change immediately. This is not normally possible with Vaadin portlets, as Vaadin applications need to get an Ajax request from the client-side to change their user interface. On the other hand, the regular inter-portlet communication (IPC) mechanism in Portlet 2.0 Specification requires a complete page reload, but that is not appropriate with Vaadin or in general Ajax applications, which do not require a page reload. One solution is to communicate between the portlets on the server-side and then use a server-push mechanism to update the client-side."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1001
#, no-c-format
msgid "The Vaadin IPC for Liferay Add-on takes another approach by communicating between the portlets through the client-side. Events (messages) are sent through the <classname>LiferayIPC</classname> component and the client-side widget relays them to the other portlets, as illustrated in <xref linkend=\"figure.portal.liferay-ipc.architecture\"/>."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1010
#, no-c-format
msgid "Vaadin IPC for Liferay Architecture"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1021
#, no-c-format
msgid "Vaadin IPC for Liferay uses the Liferay JavaScript event API for client-side inter-portlet communication, so you can communicate just as easily with other Liferay portlets."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1027
#, no-c-format
msgid "Notice that you can use this communication only between portlets on the same page."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1032
#, no-c-format
msgid "shows Vaadin IPC for Liferay in action. Entering a new item in one portlet is updated interactively in the other."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1039
#, no-c-format
msgid "Vaadin IPC Add-on Demo with Two Portlets"
msgstr ""

#. Tag: title
#: chapter-portal.xml:1048
#, no-c-format
msgid "Installing the Add-on"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1050
#, no-c-format
msgid "The Vaadin IPC for Liferay add-on is available from the Vaadin Directory as well as from a Maven repository, as described in <xref linkend=\"addons\"/>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1057
#, no-c-format
msgid "The contents of the installation package are as follows:"
msgstr ""

#. Tag: filename
#: chapter-portal.xml:1063
#, no-c-format
msgid "vaadin-ipc-for-liferay-x.x.x.jar"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:1064
#, no-c-format
msgid "The add-on JAR in the installation package must be installed in the <filename>WEB-INF/lib</filename> directory under the root context. The location depends on the server - for example in Liferay running in Tomcat it is located under the <filename>webapps/ROOT</filename> folder of the server."
msgstr ""

#. Tag: filename
#: chapter-portal.xml:1073
#, no-c-format
msgid "<filename>doc</filename>"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:1074
#, no-c-format
msgid "The documentation folder includes a <filename>README.TXT</filename> file that describes the contents of the installation package briefly, and <filename>licensing.txt</filename> and <filename>license-asl-2.0.txt</filename>, which describe the licensing under the Apache License 2.0. Under the <filename>doc/api</filename> folder is included the complete JavaDoc API documentation for the add-on."
msgstr ""

#. Tag: filename
#: chapter-portal.xml:1086
#, no-c-format
msgid "vaadin-ipc-for-liferay-x.x.x-demo.war"
msgstr ""

#. Tag: listitem
#: chapter-portal.xml:1087
#, no-c-format
msgid "A WAR containing demo portlets. After installing the add-on library and compiling the widget set, as described below, you can deploy the WAR to Liferay and add the two demo portlets to a page, as shown in <xref linkend=\"figure.portal.liferay-ipc.demo\"/>. The source of the demo is available at <link xlink:href=\"http://dev.vaadin.com/svn/addons/IPCforLiferay/trunk/demo/src/com/vaadin/addon/ipcforliferay/demo/\">dev.vaadin.com/svn/addons/IPCforLiferay/trunk/</link>."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1098
#, no-c-format
msgid "The add-on contains a widget set, which you must compile into the Vaadin widget set installed in the portal."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1110
#, no-c-format
msgid "Basic Communication"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1112
#, no-c-format
msgid "<classname>LiferayIPC</classname> is an invisible user interface component that can be used to send messages between two or more Vaadin portlets. You add it to an application layout as you would any regular user interface component."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1119
#, no-c-format
msgid ""
"<![CDATA[LiferayIPC liferayipc = new LiferayIPC();\n"
"layout.addComponent(liferayipc);]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1121
#, no-c-format
msgid "You should be careful not to remove the invisible component from the portlet later if you modify the layout of the portlet."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1126
#, no-c-format
msgid "The component can be used both for sending and receiving messages, as described next."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1132
#, no-c-format
msgid "Sending Events"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1134
#, no-c-format
msgid "You can send an event (a message) with the <methodname>sendEvent()</methodname> method, which takes an event ID and the message data as parameters. The event is broadcast to all listening portlets. The event ID is a string that can be used to identify the recipient of an event or the event type."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1142
#, no-c-format
msgid "<![CDATA[liferayipc.sendEvent(\"hello\", \"This is Data\");]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1144
#, no-c-format
msgid "If you need to send more complex data, you need to format or serialize it to a string representation as described in <xref linkend=\"portal.liferay-ipc.serialization\"/>."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1152
#, no-c-format
msgid "Receiving Events"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1154
#, no-c-format
msgid "A portlet wishing to receive events (messages) from other portlets needs to register a listener in the component with <methodname>addListener()</methodname>. The listener receives the messages in a <classname>LiferayIPCEvent</classname> object. Filtering events by the ID is built in into the listener handler, you give the listened event ID as the first parameter for the <methodname>addListener()</methodname>. The actual message data is held in the <parameter>data</parameter> property, which you can read with <methodname>getData()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1166
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[liferayipc.addListener(\"hello\", new LiferayIPCEventListener() {\n"
"    public void eventReceived(LiferayIPCEvent event) {\n"
"        // Do something with the message data\n"
"        String data = event.getData();\n"
"        Notification.show(\"Received hello: \" + data);\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1168
#, no-c-format
msgid "A listener added to a <classname>LiferayIPC</classname> can be removed with <methodname>removeListener()</methodname>."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1176
#, no-c-format
msgid "Considerations"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1178
#, no-c-format
msgid "Both security and efficiency should be considered with inter-portlet communications when using the Vaadin IPC for Liferay."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1184
#, no-c-format
msgid "Browser Security"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1186
#, no-c-format
msgid "As the message data is passed through the client-side (browser), any code running in the browser has access to the data. You should be careful not to expose any security-critical data in client-side messaging. Also, malicious code running in the browser could alter or fake messages. Sanitization can help with the latter problem and encryption to solve the both issues. You can also share the sensitive data through session attributes or a database and use the client-side IPC only to notify that the data is available."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1199
#, no-c-format
msgid "Efficiency"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1201
#, no-c-format
msgid "Sending data through the browser requires loading and sending it in HTTP requests. The data is held in the memory space of the browser, and handling large data in the client-side JavaScript code can take time. Noticeably large message data can therefore reduce the responsiveness of the application and could, in extreme cases, go over browser limits for memory consumption or JavaScript execution time."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1213
#, no-c-format
msgid "Communication Through Session Attributes"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1215
#, no-c-format
msgid "In many cases, such as when considering security or efficiency, it is better to pass the bulk data on the server-side and use the client-side IPC only for notifying the other portlet(s) that the data is available. Session attributes are a conveninent way of sharing data on the server-side. You can also share objects through them, not just strings."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1223
#, no-c-format
msgid "The session variables have a <emphasis>scope</emphasis>, which should be <parameter>APPLICATION_SCOPE</parameter>. The \"application\" refers to the scope of the Java web application (WAR) that contains the portlets."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1229
#, no-c-format
msgid "If the communicating portlets are in the same Java web application (WAR), no special configuration is needed. You can also communicate between portlets in different WARs, in which case you need to disable the <parameter>private-session-attributes</parameter> parameter in <filename>liferay-portlet.xml</filename> by setting it to <literal>false</literal>. Please see Liferay documentation for more information regarding the configuration."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1239
#, no-c-format
msgid "You can also share Java objects between the portlets in the same WAR, not just strings. If the portlets are in different WARs, they normally have different class loaders, which could cause incompatibilities, so you can only communicate with strings and any object data needs to be serialized."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1246
#, no-c-format
msgid "Session attributes are accessible through the <classname>PortletSession</classname> object, which you can access through the portlet context from the Vaadin <classname>Application</classname> class."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1253
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Person person = new Person(firstname, lastname, age);\n"
"...\n"
"\n"
"PortletSession session =\n"
"        ((PortletApplicationContext2)getContext()).\n"
"            getPortletSession();\n"
"\n"
"// Share the object\n"
"String key = \"IPCDEMO_person\";\n"
"session.setAttribute(key, person,\n"
"                     PortletSession.APPLICATION_SCOPE);\n"
"\n"
"// Notify that it's available\n"
"liferayipc.sendEvent(\"ipc_demodata_available\", key);]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1255
#, no-c-format
msgid "You can then receive the attribute in a <classname>LiferayIPCEventListener</classname> as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1260
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public void eventReceived(LiferayIPCEvent event) {\n"
"    String key = event.getData();\n"
"\n"
"    PortletSession session =\n"
"            ((PortletApplicationContext2)getContext()).\n"
"                getPortletSession();\n"
"\n"
"    // Get the object reference\n"
"    Person person = (Person) session.getAttribute(key);\n"
"\n"
"    // We can now use the object in our application\n"
"    BeanItem<Person> item = new BeanItem<Person> (person);\n"
"    form.setItemDataSource(item);\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1262
#, no-c-format
msgid "Notice that changes to a shared object bound to a user interface component are not updated automatically if it is changed in another portlet. The issue is the same as with double-binding in general."
msgstr ""

#. Tag: title
#: chapter-portal.xml:1270
#, no-c-format
msgid "Serializing and Encoding Data"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1272
#, no-c-format
msgid "The IPC events support transmitting only plain strings, so if you have object or other non-string data, you need to format or serialize it to a string representation. For example, the demo application formats the trivial data model as a semicolon-separated list as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1279
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[private void sendPersonViaClient(String firstName,\n"
"                                 String lastName, int age) {\n"
"    liferayIPC_1.sendEvent(\"newPerson\", firstName + \";\" +\n"
"                           lastName + \";\" + age);\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1281
#, no-c-format
msgid "You can use standard Java serialization for any classes that implement the <interfacename>Serializable</interfacename> interface. The transmitted data may not include any control characters, so you also need to encode the string, for example by using Base64 encoding."
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1288
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Some serializable object\n"
"MyBean mybean = new MyBean();\n"
"...\n"
"\n"
"// Serialize\n"
"ByteArrayOutputStream baostr = new ByteArrayOutputStream();\n"
"ObjectOutputStream oostr;\n"
"try {\n"
"    oostr = new ObjectOutputStream(baostr);\n"
"    oostr.writeObject(mybean); // Serialize the object\n"
"    oostr.close();\n"
"} catch (IOException e) {\n"
"    Notification.show(\"IO PAN!\"); // Complain\n"
"}\n"
"\n"
"// Encode\n"
"BASE64Encoder encoder = new BASE64Encoder();\n"
"String encoded = encoder.encode(baostr.toByteArray());\n"
"\n"
"// Send the IPC event to other portlet(s)\n"
"liferayipc.sendEvent(\"mybeanforyou\", encoded);]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1290
#, no-c-format
msgid "You can then deserialize such a message at the receiving end as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1294
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public void eventReceived(LiferayIPCEvent event) {\n"
"    String encoded = event.getData();\n"
"\n"
"    // Decode and deserialize it    \n"
"    BASE64Decoder decoder = new BASE64Decoder();\n"
"    try {\n"
"        byte[] data = decoder.decodeBuffer(encoded);\n"
"        ObjectInputStream ois =\n"
"                new ObjectInputStream( \n"
"                        new ByteArrayInputStream(data));\n"
"\n"
"        // The deserialized bean\n"
"        MyBean deserialized = (MyBean) ois.readObject();\n"
"        ois.close();\n"
"\n"
"        ... do something with the bean ...\n"
"\n"
"    } catch (IOException e) {\n"
"        e.printStackTrace(); // Handle somehow\n"
"    } catch (ClassNotFoundException e) {\n"
"        e.printStackTrace(); // Handle somehow\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-portal.xml:1298
#, no-c-format
msgid "Communicating with Non-Vaadin Portlets"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1300
#, no-c-format
msgid "You can use the Vaadin IPC for Liferay to communicate also between a Vaadin application and other portlets, such as JSP portlets. The add-on passes the events as regular Liferay JavaScript events. The demo WAR includes two JSP portlets that demonstrate the communication."
msgstr ""

#. Tag: para
#: chapter-portal.xml:1308
#, no-c-format
msgid "When sending events from non-Vaadin portlet, fire the event using the JavaScript <methodname>Liferay.fire()</methodname> method with an event ID and message. For example, in JSP you could have:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1314
#, no-c-format
msgid ""
"<![CDATA[<%@ taglib uri=\"http://java.sun.com/portlet_2_0\"\n"
"           prefix=\"portlet\" %>\n"
"<portlet:defineObjects />\n"
"\n"
"<script>\n"
"function send_message() {\n"
"    Liferay.fire('hello', \"Hello, I'm here!\");\n"
"}\n"
"</script>\n"
"\n"
"<input type=\"button\" value=\"Send message\"\n"
"       onclick=\"send_message()\" />]]>"
msgstr ""

#. Tag: para
#: chapter-portal.xml:1317
#, no-c-format
msgid "You can receive events using a Liferay JavaScript event handler. You define the handler with the <methodname>on()</methodname> method in the Liferay object. It takes the event ID and a callback function as its parameters. Again in JSP you could have:"
msgstr ""

#. Tag: programlisting
#: chapter-portal.xml:1324
#, no-c-format
msgid ""
"<![CDATA[<%@ taglib uri=\"http://java.sun.com/portlet_2_0\"\n"
"           prefix=\"portlet\" %>\n"
"<portlet:defineObjects />\n"
"\n"
"<script>\n"
"Liferay.on('hello', function(event, data) {\n"
"    alert(\"Hello: \" + data);\n"
"});\n"
"</script>]]>"
msgstr ""
