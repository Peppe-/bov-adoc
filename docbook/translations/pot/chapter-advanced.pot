# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-11-13 16:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-advanced.xml:11
#, no-c-format
msgid "Advanced Web Application Topics"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:13
#, no-c-format
msgid "This chapter covers various features and topics often needed in applications."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:19
#, no-c-format
msgid "Handling Browser Windows"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:21
#, no-c-format
msgid "The UI of a Vaadin application runs in a web page displayed in a browser window or tab. An application can be used from multiple UIs in different windows or tabs, either opened by the user using an URL or by the Vaadin application."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:28
#, no-c-format
msgid "In addition to native browser windows, Vaadin has a <classname>Window</classname> component, which is a floating panel or <emphasis>sub-window</emphasis> inside a page, as described in <xref linkend=\"layout.sub-window\"/>."
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:36
#, no-c-format
msgid "<emphasis>Native popup windows</emphasis>. An application can open popup windows for sub-tasks."
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:40
#, no-c-format
msgid "<emphasis>Page-based browsing</emphasis>. The application can allow the user to open certain content to different windows. For example, in a messaging application, it can be useful to open different messages to different windows so that the user can browse through them while writing a new message."
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:47
#, no-c-format
msgid "<emphasis>Bookmarking</emphasis>. Bookmarks in the web browser can provide an entry-point to some content provided by an application."
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:51
#, no-c-format
msgid "<emphasis>Embedding UIs</emphasis>. UIs can be embedded in web pages, thus making it possible to provide different views to an application from different pages or even from the same page, while keeping the same session. See <xref linkend=\"advanced.embedding\"/>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:59
#, no-c-format
msgid "Use of multiple windows in an application may require defining and providing different UIs for the different windows. The UIs of an application share the same user session, that is, the <classname>VaadinSession</classname> object, as described in <xref linkend=\"application.lifecycle.session\"/>. Each UI is identified by a URL that is used to access it, which makes it possible to bookmark application UIs. UI instances can even be created dynamically based on the URLs or other request parameters, such as browser information, as described in <xref linkend=\"application.lifecycle.ui\"/>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:70
#, no-c-format
msgid "Because of the special nature of AJAX applications, use of multiple windows uses require some caveats."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:77
#, no-c-format
msgid "Opening Popup Windows"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:79
#, no-c-format
msgid "Popup windows are native browser windows or tabs opened by user interaction with an existing window. Due to browser security reasons, it is made incovenient for a web page to open popup windows using JavaScript commands. At the least, the browser will ask for a permission to open the popup, if it is possible at all. This limitation can be circumvented by letting the browser open the new window or tab directly by its URL when the user clicks some target. This is realized in Vaadin with the <classname>BrowserWindowOpener</classname> component extension, which causes the browser to open a window or tab when the component is clicked."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:92
#, no-c-format
msgid "The Popup Window UI"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:94
#, no-c-format
msgid "A popup Window displays an <classname>UI</classname>. The UI of a popup window is defined just like a main UI in a Vaadin application, and it can have a theme, title, and so forth."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:100 chapter-advanced.xml:163 chapter-advanced.xml:395
#: chapter-advanced.xml:523 chapter-advanced.xml:3480
#, no-c-format
msgid "For example:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:104
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[@Theme(\"book-examples\")\n"
"public static class MyPopupUI extends UI {\n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        getPage().setTitle(\"Popup Window\");\n"
"        \n"
"        // Have some content for it\n"
"        VerticalLayout content = new VerticalLayout();\n"
"        Label label =\n"
"            new Label(\"I just popped up to say hi!\");\n"
"        label.setSizeUndefined();\n"
"        content.addComponent(label);\n"
"        content.setComponentAlignment(label,\n"
"            Alignment.MIDDLE_CENTER);\n"
"        content.setSizeFull();\n"
"        setContent(content);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:108
#, no-c-format
msgid "Popping It Up"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:110
#, no-c-format
msgid "A popup window is opened using the <classname>BrowserWindowOpener</classname> extension, which you can attach to any component. The constructor of the extension takes the class object of the UI class to be opened as a parameter."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:117
#, no-c-format
msgid "You can configure the features of the popup window with <methodname>setFeatures()</methodname>. It takes as its parameter a comma-separated list of window features, as defined in the HTML specification."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:126
#, no-c-format
msgid "<varname>status</varname>=<parameter>0|1</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:127
#, no-c-format
msgid "Whether the status bar at the bottom of the window should be enabled."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:130
#, no-c-format
msgid "<varname></varname><parameter></parameter>"
msgstr ""

#. Tag: varname
#: chapter-advanced.xml:134
#, no-c-format
msgid "scrollbars"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:135
#, no-c-format
msgid "Enables scrollbars in the window if the document area is bigger than the view area of the window."
msgstr ""

#. Tag: varname
#: chapter-advanced.xml:138
#, no-c-format
msgid "resizable"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:139
#, no-c-format
msgid "Allows the user to resize the browser window (no effect for tabs)."
msgstr ""

#. Tag: varname
#: chapter-advanced.xml:142
#, no-c-format
msgid "menubar"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:143
#, no-c-format
msgid "Enables the browser menu bar."
msgstr ""

#. Tag: varname
#: chapter-advanced.xml:146
#, no-c-format
msgid "location"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:147
#, no-c-format
msgid "Enables the location bar."
msgstr ""

#. Tag: varname
#: chapter-advanced.xml:150
#, no-c-format
msgid "toolbar"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:151
#, no-c-format
msgid "Enables the browser toolbar."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:154
#, no-c-format
msgid "<varname>height</varname>=<parameter>value</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:155
#, no-c-format
msgid "Specifies the height of the window in pixels."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:158
#, no-c-format
msgid "<varname>width</varname>=<parameter>value</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:159
#, no-c-format
msgid "Specifies the width of the window in pixels."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:167
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Create an opener extension\n"
"BrowserWindowOpener opener =\n"
"    new BrowserWindowOpener(MyPopupUI.class);\n"
"opener.setFeatures(\"height=200,width=300,resizable\");\n"
"\n"
"// Attach it to a button\n"
"Button button = new Button(\"Pop It Up\");\n"
"opener.extend(button);]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:169
#, no-c-format
msgid "The resulting popup window, which appears when the button is clicked, is shown in <xref linkend=\"figure.advanced.windows.popup.popping\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:175
#, no-c-format
msgid "A Popup Window"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:188
#, no-c-format
msgid "Popup Window Name (Target)"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:190
#, no-c-format
msgid "The target name is one of the default HTML target names (<parameter>_new</parameter>, <parameter>_blank</parameter>, <parameter>_top</parameter>, etc.) or a custom target name. How the window is exactly opened depends on the browser. Browsers that support tabbed browsing can open the window in another tab, depending on the browser settings."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:201
#, no-c-format
msgid "URL and Session"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:203
#, no-c-format
msgid "The URL path for a popup window UI is by default determined from the UI class name, by prefixig it with \"<literal>popup/</literal>\". For example, for the example UI giver earlier, the URL would be <literal>/book-examples/book/popup/MyPopupUI</literal>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:253
#, no-c-format
msgid "Embedding UIs in Web Pages"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:255
#, no-c-format
msgid "Many web sites are not all Vaadin, but Vaadin UIs are used only for specific functionalities. In practice, many web applications are a mixture of dynamic web pages, such as JSP, and Vaadin UIs embedded in such pages."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:261
#, no-c-format
msgid "Embedding Vaadin UIs in web pages is easy and there are several different ways to embed them. One is to have a <literal>&lt;div&gt;</literal> placeholder for the UI and load the Vaadin Client-Side Engine with some simple JavaScript code. Another method is even easier, which is to simply use the <literal>&lt;iframe&gt;</literal> element. Both of these methods have advantages and disadvantages. One disadvantage of the <literal>&lt;iframe&gt;</literal> method is that the size of the <literal>&lt;iframe&gt;</literal> element is not flexible according to the content while the <literal>&lt;div&gt;</literal> method allows such flexibility. The following sections look closer into these two embedding methods. <phrase condition=\"web\">Additionally, the Vaadin XS add-on allows embedding Vaadin UIs in websites running in another server.</phrase>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:277
#, no-c-format
msgid "Embedding Inside a <literal>div</literal> Element"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:279
#, no-c-format
msgid "You can embed one or more Vaadin UIs inside a web page with a method that is equivalent to loading the initial page content from the Vaadin servlet in a non-embedded UI. Normally, the <classname>VaadinServlet</classname> generates an initial page that contains the correct parameters for the specific UI. You can easily configure it to load multiple Vaadin UIs in the same page. They can have different widget sets and different themes."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:288
#, no-c-format
msgid "Embedding an UI requires the following basic tasks:"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:293
#, no-c-format
msgid "Set up the page header"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:294
#, no-c-format
msgid "Include a GWT history frame in the page"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:295
#, no-c-format
msgid "Call the <filename>vaadinBootstrap.js</filename> file"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:296
#, no-c-format
msgid "Define the <literal>&lt;div&gt;</literal> element for the UI"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:297
#, no-c-format
msgid "Configure and initialize the UI"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:300
#, no-c-format
msgid "Notice that you can view the loader page for the UI easily by opening the UI in a web browser and viewing the HTML source code of the page. You could just copy and paste the embedding code from the page, but some modifications and additional settings are required, mainly related to the URLs that have to be made relative to the page instead of the servlet URL."
msgstr ""

#. Tag: emphasis
#: chapter-advanced.xml:309
#, no-c-format
msgid "The DIV embedding API is about to change soon after printing this book edition. A tutorial that describes the feature should be made available at the Vaadin website."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:315
#, no-c-format
msgid "The Head Matter"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:317
#, no-c-format
msgid "The HTML page in which the Vaadin UI is embedded should be a valid XHTML document, as defined in the document type. The content of the head element is largely up to you. The character encoding must be UTF-8. Some meta declarations are necessary for compatibility. You can also set the page favicon in the head element."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:325
#, no-c-format
msgid ""
"<?pocket-size 65% ?>&lt;!DOCTYPE html&gt;\n"
"&lt;html&gt;\n"
"  &lt;head&gt;\n"
"    &lt;meta http-equiv=\"Content-Type\"\n"
"          content=\"text/html; charset=UTF-8\" /&gt;\n"
"    &lt;meta http-equiv=\"X-UA-Compatible\"\n"
"          content=\"IE=9;chrome=1\" /&gt;\n"
"\n"
"    &lt;title&gt;<replaceable>This is my Embedding Page</replaceable>&lt;/title&gt;\n"
"  \n"
"    &lt;!-- Set up the favicon from the Vaadin theme --&gt;\n"
"    &lt;link rel=\"shortcut icon\" type=\"image/vnd.microsoft.icon\"\n"
"          href=\"/VAADIN/themes/<replaceable>reindeer</replaceable>/favicon.ico\" /&gt;\n"
"    &lt;link rel=\"icon\" type=\"image/vnd.microsoft.icon\"\n"
"             href=\"/VAADIN/themes/<replaceable>reindeer</replaceable>/favicon.ico\" /&gt; \n"
"  &lt;/head&gt;"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:329
#, no-c-format
msgid "The Body Matter"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:331
#, no-c-format
msgid "The page content must include some Vaadin-related definitions before you can embed Vaadin UIs in it."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:336
#, no-c-format
msgid "The <filename>vaadinBootstrap.js</filename> script makes definitions for starting up the UI. It must be called before initializing the UI. The source path must be relative to the path of the embedding page."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:343
#, no-c-format
msgid ""
"&lt;body&gt;\n"
"  &lt;script type=\"text/javascript\"\n"
"          src=\"<replaceable>./</replaceable>VAADIN/vaadinBootstrap.js\"&gt;&lt;/script&gt;"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:345
#, no-c-format
msgid "The bootstrap script is served by the Vaadin servlet from inside the <filename>vaadin-server</filename> JAR."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:350
#, no-c-format
msgid "Vaadin, or more precisely GWT, requires an invisible history frame, which is used for tracking the page or fragment history in the browser."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:356
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[  <iframe tabindex=\"-1\" id=\"__gwt_historyFrame\"\n"
"          style=\"position: absolute; width: 0; height: 0;\n"
"                 border: 0; overflow: hidden\"\n"
"          src=\"javascript:false\"></iframe>]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:360
#, no-c-format
msgid "UI Placeholder Element"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:362
#, no-c-format
msgid "A Vaadin UI is embedded in a placeholder <literal>&lt;div&gt;</literal> element. It should have the following features:"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:369
#, no-c-format
msgid "The <literal>&lt;div&gt;</literal> element must have an <literal>id</literal> attribute, which must be a unique ID in the page, normally something that identifies the servlet of the UI uniquely."
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:374
#, no-c-format
msgid "It must have at least the <literal>v-app</literal> style class."
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:377
#, no-c-format
msgid "it should have a nested <literal>&lt;div&gt;</literal> element with <literal>v-app-loading</literal> style class. This is a placeholder for the loading indicator that is displayed while the UI is being loaded."
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:382
#, no-c-format
msgid "It should also contain a <literal>&lt;noscript&gt;</literal> element that is shown if the browser does not support JavaScript or it has been disabled. The content of the element should instruct the use to enable JavaScript in the browser."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:388
#, no-c-format
msgid "The placeholder element can include style settings, typically a width and height. If the sizes are not defined, the UI will have an undefined size in the particular dimension, which must be in accordance with the sizing of the UI components."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:399
#, no-c-format
msgid ""
"<?pocket-size 75% ?>&lt;div style=\"<replaceable>width: 300px; border: 2px solid green;</replaceable>\"\n"
"     id=\"helloworldui\" class=\"v-app\"&gt;\n"
"  &lt;div class=\"v-app-loading\"&gt;&lt;/div&gt;\n"
"  &lt;noscript&gt;<replaceable>You have to enable javascript in your browser to</replaceable>\n"
"            <replaceable>use an application built with Vaadin.</replaceable>&lt;/noscript&gt;\n"
"&lt;/div&gt;"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:404
#, no-c-format
msgid "Initializing the UI"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:406
#, no-c-format
msgid "The UI is loaded by calling the <literal>initApplication()</literal> method for the <literal>vaadin</literal> object defined in the bootstrap script. Before calling it, you should check that the bootstrap script was loaded properly."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:413
#, no-c-format
msgid ""
"<?pocket-size 75% ?>&lt;script type=\"text/javascript\"&gt;//&lt;![CDATA[\n"
"  if (!window.vaadin)\n"
"      alert(\"<replaceable>Failed to load the bootstrap JavaScript:</replaceable>\"+\n"
"            \"<replaceable>VAADIN/vaadinBootstrap.js</replaceable>\");"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:415
#, no-c-format
msgid "The <literal>initApplication()</literal> takes two parameters. The first parameter is the UI identifier, exactly as given as the <literal>id</literal> attribute of the placeholder element. The second parameter is an associative map that contains parameters for the UI."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:423
#, no-c-format
msgid "The map must contain the following items:"
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:429
#, no-c-format
msgid "browserDetailsUrl"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:431
#, no-c-format
msgid "This should be the URL path (relative to the embedding page) to the Vaadin servlet of the UI. It is used by the bootstrap to communicate browser details."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:437
#, no-c-format
msgid "Notice that this parameter not included in the loader page generated by the servlet, as in that case it can default to the current URL."
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:445
#, no-c-format
msgid "widgetset"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:446
#, no-c-format
msgid "This should be the exact class name of the widget set for the UI, that is, without the <filename>.gwt.xml</filename> file name extension. If the UI has no custom widget set, you can use the <classname>com.vaadin.DefaultWidgetSet</classname>."
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:454
#, no-c-format
msgid "theme"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:455
#, no-c-format
msgid "Name of the theme, such as one of the built-in themes (<literal>reindeer</literal>, <literal>runo</literal>, or <literal>chameleon</literal>) or a custom theme. It must exist under the <filename>VAADIN/themes</filename> folder."
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:463
#, no-c-format
msgid "versionInfo"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:464
#, no-c-format
msgid "This parameter is itself an associative map that can contain two parameters: <parameter>vaadinVersion</parameter> contains the version number of the Vaadin version used by the application. The <parameter>applicationVersion</parameter> parameter contains the version of the particular application. The contained parameters are optional, but the <parameter>versionInfo</parameter> parameter itself is not."
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:475
#, no-c-format
msgid "vaadinDir"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:476
#, no-c-format
msgid "Relative path to the <filename>VAADIN</filename> directory. It is relative to the URL of the embedding page."
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:482
#, no-c-format
msgid "heartbeatInterval"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:483
#, no-c-format
msgid "The <parameter>hearbeatInterval</parameter> parameter defines the frequency of the keep-alive hearbeat for the UI in seconds, as described in <xref linkend=\"application.lifecycle.ui-expiration\"/>."
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:491
#, no-c-format
msgid "debug"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:492
#, no-c-format
msgid "The parameter defines whether the debug window, as described in <xref linkend=\"advanced.debug\"/>, is enabled."
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:498
#, no-c-format
msgid "standalone"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:499
#, no-c-format
msgid "This parameter should be <parameter>false</parameter> when embedding. <phrase condition=\"web\">The parameter defines whether the UI is rendered on its own in the browser window or in some context. A standalone UI may do things that might interfere with other parts of the page, such as change the page title and request focus when it is loaded. When embedding, the UI is not standalone.</phrase>"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:510
#, no-c-format
msgid "<parameter>authErrMsg</parameter>, <parameter>comErrMsg</parameter>, and <parameter>sessExpMsg</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:511
#, no-c-format
msgid "These three parameters define the client-side error messages for authentication error, communication error, and session expiration, respectively. The parameters are associative maps themselves and must contain two key-value pairs: <parameter>message</parameter>, which should contain the error text in HTML, and <parameter>caption</parameter>, which should be the error caption."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:527
#, no-c-format
msgid ""
"<?pocket-size 75% ?>  vaadin.initApplication(\"<replaceable>helloworldui</replaceable>\", {\n"
"      \"browserDetailsUrl\": \"<replaceable>helloworld</replaceable>\",\n"
"      \"widgetset\": \"<replaceable>com.example.MyWidgetSet</replaceable>\",\n"
"      \"theme\": \"<replaceable>mytheme</replaceable>\",\n"
"      \"versionInfo\": {\"vaadinVersion\": \"<replaceable>7.0.0</replaceable>\"},\n"
"      \"vaadinDir\": \"<replaceable>VAADIN/</replaceable>\",\n"
"      \"heartbeatInterval\": <replaceable>300</replaceable>,\n"
"      \"debug\": <replaceable>true</replaceable>,\n"
"      \"standalone\": false,\n"
"      \"authErrMsg\": {\n"
"          \"message\": \"<replaceable>Take note of any unsaved data, \"+\n"
"                     \"and &lt;u&gt;click here&lt;\\/u&gt; to continue.</replaceable>\",\n"
"          \"caption\": \"Authentication problem\"\n"
"      },\n"
"      \"comErrMsg\": {\n"
"          \"message\": \"<replaceable>Take note of any unsaved data, \"+\n"
"                     \"and &lt;u&gt;click here&lt;\\/u&gt; to continue.</replaceable>\",\n"
"          \"caption\": \"Communication problem\"\n"
"      },\n"
"      \"sessExpMsg\": {\n"
"          \"message\": \"<replaceable>Take note of any unsaved data, \"+\n"
"                     \"and &lt;u&gt;click here&lt;\\/u&gt; to continue.</replaceable>\",\n"
"          \"caption\": \"Session Expired\"\n"
"      }\n"
"  });//]]&gt;\n"
"&lt;/script&gt;"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:529
#, no-c-format
msgid "Notice that many of the parameters are normally deployment parameters, specified in the deployment descriptor, as described in <xref linkend=\"application.environment.parameters\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:537
#, no-c-format
msgid "Summary of Div Embedding"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:539
#, no-c-format
msgid "Below is a complete example of embedding an UI in a <literal>&lt;div&gt;</literal> element."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:544
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"
"          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"
"<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
"<head>\n"
"  <meta http-equiv=\"Content-Type\"\n"
"        content=\"text/html; charset=UTF-8\" />\n"
"  <meta http-equiv=\"X-UA-Compatible\"\n"
"        content=\"IE=9;chrome=1\" />\n"
"\n"
"  <title>Embedding a Vaadin Application in HTML Page</title>\n"
"  \n"
"  <!-- Set up the favicon from the Vaadin theme -->\n"
"  <link rel=\"shortcut icon\" type=\"image/vnd.microsoft.icon\"\n"
"        href=\"/VAADIN/themes/reindeer/favicon.ico\" />\n"
"  <link rel=\"icon\" type=\"image/vnd.microsoft.icon\"\n"
"           href=\"/VAADIN/themes/reindeer/favicon.ico\" /> \n"
"</head>\n"
"\n"
"<body>\n"
"  <!-- Loads the Vaadin widget set, etc. -->\n"
"  <script type=\"text/javascript\"\n"
"          src=\"VAADIN/vaadinBootstrap.js\"></script>\n"
"\n"
"  <!-- GWT requires an invisible history frame. It is   -->\n"
"  <!-- needed for page/fragment history in the browser. -->\n"
"  <iframe tabindex=\"-1\" id=\"__gwt_historyFrame\"\n"
"          style=\"position: absolute; width: 0; height: 0;\n"
"                 border: 0; overflow: hidden\"\n"
"          src=\"javascript:false\"></iframe>  \n"
"\n"
"  <h1>Embedding a Vaadin UI</h1>\n"
"    \n"
"  <p>This is a static web page that contains an embedded Vaadin\n"
"     application. It's here:</p>\n"
"\n"
"  <!-- So here comes the div element in which the Vaadin -->\n"
"  <!-- application is embedded.                          -->\n"
"  <div style=\"width: 300px; border: 2px solid green;\"\n"
"       id=\"helloworld\" class=\"v-app\">\n"
"\n"
"    <!-- Optional placeholder for the loading indicator -->\n"
"    <div class=\" v-app-loading\"></div>\n"
"\n"
"    <!-- Alternative fallback text -->\n"
"    <noscript>You have to enable javascript in your browser to\n"
"              use an application built with Vaadin.</noscript>\n"
"  </div>\n"
"  \n"
"  <script type=\"text/javascript\">//<![CDATA[\n"
"    if (!window.vaadin)\n"
"        alert(\"Failed to load the bootstrap JavaScript: \"+\n"
"              \"VAADIN/vaadinBootstrap.js\");\n"
"\n"
"    /* The UI Configuration */\n"
"        vaadin.initApplication(\"helloworld\", {\n"
"            \"browserDetailsUrl\": \"helloworld\",\n"
"            \"widgetset\": \"com.example.MyWidgetSet\",\n"
"            \"theme\": \"mytheme\",\n"
"            \"versionInfo\": {\"vaadinVersion\": \"7.0.0\"},\n"
"            \"vaadinDir\": \"VAADIN/\",\n"
"            \"heartbeatInterval\": 300,\n"
"            \"debug\": true,\n"
"            \"standalone\": false,\n"
"            \"authErrMsg\": {\n"
"                \"message\": \"Take note of any unsaved data, \"+\n"
"                           \"and <u>click here<\\/u> to continue.\",\n"
"                \"caption\": \"Authentication problem\"\n"
"            },\n"
"            \"comErrMsg\": {\n"
"                \"message\": \"Take note of any unsaved data, \"+\n"
"                           \"and <u>click here<\\/u> to continue.\",\n"
"                \"caption\": \"Communication problem\"\n"
"            },\n"
"            \"sessExpMsg\": {\n"
"                \"message\": \"Take note of any unsaved data, \"+\n"
"                           \"and <u>click here<\\/u> to continue.\",\n"
"                \"caption\": \"Session Expired\"\n"
"            }\n"
"        });//]] >\n"
"  </script>\n"
"  \n"
"  <p>Please view the page source to see how embedding works.</p>\n"
"</body>\n"
"</html>]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:549
#, no-c-format
msgid "Embedding Inside an <literal>iframe</literal> Element"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:551
#, no-c-format
msgid "Embedding a Vaadin UI inside an <literal>&lt;iframe&gt;</literal> element is even easier than the method described above, as it does not require definition of any Vaadin specific definitions."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:557
#, no-c-format
msgid "You can embed an UI with an element such as the following:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:561
#, no-c-format
msgid "&lt;iframe src=\"<replaceable>/myapp/myui</replaceable>\"&gt;&lt;/iframe&gt;"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:563
#, no-c-format
msgid "The <literal>&lt;iframe&gt;</literal> elements have several downsides for embedding. One is that their size of is not flexible depending on the content of the frame, but the content must be flexible to accommodate in the frame. You can set the size of an <literal>&lt;iframe&gt;</literal> element with <literal>height</literal> and <literal>width</literal> attributes. Other issues arise from themeing and communication with the frame content and the rest of the page."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:573
#, no-c-format
msgid "Below is a complete example of using the <literal>&lt;iframe&gt;</literal> to embed two applications in a web page."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:578
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
"<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n"
"  <head>\n"
"    <title>Embedding in IFrame</title>\n"
"  </head>\n"
"\n"
"  <body style=\"background: #d0ffd0;\">\n"
"    <h1>This is a HTML page</h1>\n"
"    <p>Below are two Vaadin applications embedded inside\n"
"       a table:</p>\n"
"\n"
"    <table align=\"center\" border=\"3\">\n"
"      <tr>\n"
"        <th>The Calculator</th>\n"
"        <th>The Color Picker</th>\n"
"      </tr>\n"
"      <tr valign=\"top\">\n"
"        <td>\n"
"          <iframe src=\"/vaadin-examples/Calc\" height=\"200\"\n"
"                  width=\"150\" frameborder=\"0\"></iframe>\n"
"        </td>\n"
"        <td>\n"
"          <iframe src=\"/vaadin-examples/colorpicker\"\n"
"                  height=\"330\" width=\"400\"\n"
"                  frameborder=\"0\"></iframe>\n"
"        </td>\n"
"      </tr>\n"
"    </table>\n"
"  </body>\n"
"</html>]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:580
#, no-c-format
msgid "The page will look as shown in <xref linkend=\"figure.embedding.iframe\"/> below."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:586
#, no-c-format
msgid "Vaadin Applications Embedded Inside IFrames"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:597
#, no-c-format
msgid "You can embed almost anything in an iframe, which essentially acts as a browser window. However, this creates various problems. The iframe must have a fixed size, inheritance of CSS from the embedding page is not possible, and neither is interaction with JavaScript, which makes mashups impossible, and so on. Even bookmarking with URI fragments will not work."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:605
#, no-c-format
msgid "Note also that websites can forbid iframe embedding by specifying an <literal>X-Frame-Options: SAMEORIGIN</literal> header in the HTTP response."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:613
#, no-c-format
msgid "Cross-Site Embedding with the Vaadin XS Add-on"
msgstr ""

#. Tag: emphasis
#: chapter-advanced.xml:616
#, no-c-format
msgid "The XS add-on is not yet available for Vaadin 7."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:619
#, no-c-format
msgid "In the previous sections, we described the two basic methods for embedding Vaadin applications: in a <literal>&lt;div&gt;</literal> element and in an <literal>&lt;iframe&gt;</literal>. One problem with div embedding is that it does not work between different Internet domains, which is a problem if you want to have your website running in one server and your Vaadin application in another. The security model in browsers effectively prevents such cross-site embedding of Ajax applications by enforcing the <emphasis>same origin policy</emphasis> for XmlHttpRequest calls, even if the server is running in the same domain but different port. While iframe is more permissive, allowing embedding almost anything in anywhere, it has many disadvantanges, as described earlier."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:633
#, no-c-format
msgid "The Vaadin XS (Cross-Site) add-on works around the limitation in div embedding by using JSONP-style communication instead of the standard XmlHttpRequests."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:639
#, no-c-format
msgid "Embedding is done simply with:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:643
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[  <script src=\"http://demo.vaadin.com/xsembed/getEmbedJs\"\n"
"          type=\"text/javascript\"></script>]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:645
#, no-c-format
msgid "This includes an automatically generated embedding script in the page, thereby making embedding effortless."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:650
#, no-c-format
msgid "This assumes that the main layout of the application has undefined height. If the height is 100%, you have to wrap it inside an element with a defined height. For example:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:656
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[ <div style=\"height: 500px;\">\n"
"  <script src=\"http://demo.vaadin.com/xsembed/getEmbedJs\"\n"
"          type=\"text/javascript\"></script>\n"
"</div>]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:658
#, no-c-format
msgid "It is possible to restrict where the application can be embedded by using a whitelist. The add-on also encrypts the client-server communication, which is more important for embedded applications than usual."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:664
#, no-c-format
msgid "You can get the Vaadin XS add-on from Vaadin Directory. It is provided as a Zip package. Download and extract the installation package to a local folder. Instructions for installation and further information is given in the <filename>README.html</filename> file in the package."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:671
#, no-c-format
msgid "Some restrictions apply. You can have only one embedded application in one page. Also, some third-party libraries may interfere with the communication. Other notes are given in the README."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:687
#, no-c-format
msgid "Debug Mode and Window"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:689
#, no-c-format
msgid "Vaadin applications can be run in two modes: <emphasis>debug mode</emphasis> and <emphasis>production mode</emphasis>. The debug mode, which is on by default, enables a number of built-in debug features for Vaadin developers:"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:696
#, no-c-format
msgid "<listitem>Debug Window</listitem>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:697
#, no-c-format
msgid "Display debug information in the Debug Window and server console"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:698
#, no-c-format
msgid "On-the-fly compilation of Sass themes"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:702
#, no-c-format
msgid "Enabling the Debug Mode"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:704
#, no-c-format
msgid "The debug mode is enabled and production mode disabled by default in the UI templates created with the Eclipse plugin or the Maven archetypes. The debug mode can be enabled by giving a <parameter>productionMode=false</parameter> parameter to the Vaadin servlet configuration:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:712
#, no-c-format
msgid ""
"<?pocket-size 75% ?>@VaadinServletConfiguration(\n"
"            productionMode = <emphasis role=\"bold\">false</emphasis>,\n"
"            ui = <emphasis role=\"bold\">MyprojectUI.class</emphasis>)"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:714
#, no-c-format
msgid "Or with a context parameter in the <filename>web.xml</filename> deployment descriptor:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:719
#, no-c-format
msgid ""
"<?pocket-size 75% ?>&lt;context-param&gt;\n"
"  &lt;description&gt;Vaadin production mode&lt;/description&gt;\n"
"  &lt;param-name&gt;productionMode&lt;/param-name&gt;\n"
"  &lt;param-value&gt;<emphasis role=\"bold\">false</emphasis>&lt;/param-value&gt;\n"
"&lt;/context-param&gt;"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:721
#, no-c-format
msgid "Enabling the production mode disables the debug features, thereby preventing users from easily inspecting the inner workings of the application from the browser."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:729
#, no-c-format
msgid "Opening the Debug Window"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:731
#, no-c-format
msgid "Running an application in the debug mode enables the client-side Debug Window in the browser. You can open the Debug Window by adding \"<uri>?debug</uri>\" parameter to the URL of the UI, for example, <uri>http://localhost:8080/myapp/?debug</uri>. The Debug Window has buttons for controlling the debugging features and a scrollable log of debug messages."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:741
#, no-c-format
msgid "<title>Debug Window</title>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:752
#, no-c-format
msgid "The functionalities are described in detail in the subsequent sections. You can move the window by dragging it from the title bar and resize it from the corners. The <guibutton>Minimize</guibutton> button minimizes the debug window in the corner of the browser window, and the <guibutton>Close</guibutton> button closes it."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:760
#, no-c-format
msgid "If you use the Firebug plugin for Firefox or the Developer Tools console in Chrome, the log messages will also be printed to the Firebug console. In such a case, you may want to enable client-side debugging without showing the Debug Window with \"<uri>?debug=quiet</uri>\" in the URL. In the quiet debug mode, log messages will only be printed to the console of the browser debugger."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:771 chapter-advanced.xml:780
#, no-c-format
msgid "Debug Message Log"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:773
#, no-c-format
msgid "The debug message log displays client-side debug messages, with time counter in milliseconds. The control buttons allow you to clear the log, reset the timer, and lock scrolling."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:792
#, no-c-format
msgid "Logging to Debug Window"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:794
#, no-c-format
msgid "You can take advantage of the debug mode when developing client-side components, by using the standard Java <classname>Logger</classname> to write messages to the log. The messages will be written to the debug window and Firebug console. No messages are written if the debug window is not open or if the application is running in production mode."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:807 chapter-advanced.xml:817
#, no-c-format
msgid "General Information"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:809
#, no-c-format
msgid "The <guilabel>General information about the application(s)</guilabel> tab displays various information about the UI, such as version numbers of the client and servlet engine, and the theme. If they do not match, you may need to compile the widget set or theme."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:830
#, no-c-format
msgid "Inspecting Component Hierarchy"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:832
#, no-c-format
msgid "The <guilabel>Component Hierarchy</guilabel> tab has several sub-modes that allow debugging the component tree in various ways."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:838 chapter-advanced.xml:851
#, no-c-format
msgid "Connector Hierarchy Tree"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:840
#, no-c-format
msgid "The <guibutton>Show the connector hierarchy tree</guibutton> button displays the client-side connector hierarchy. As explained in <xref linkend=\"gwt\"/>, client-side widgets are managed by connectors that handle communication with the server-side component counterparts. The connector hierarchy therefore corresponds with the server-side component tree, but the client-side widget tree and HTML DOM tree have more complexity."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:862
#, no-c-format
msgid "Clicking on a connector highlights the widget in the UI."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:868
#, no-c-format
msgid "Inspecting a Component"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:870
#, no-c-format
msgid "The <guibutton>Select a component in the page to inspect it</guibutton> button lets you select a component in the UI by clicking it and display its client-side properties."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:876
#, no-c-format
msgid "To view the HTML structure and CSS styles in more detail, you can use Firebug in Firefox, or the Developer Tools in Chrome, as described in <xref linkend=\"getting-started.environment.firefox\"/>. Firefox also has a built-in feature for inspecting HTML and CSS."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:885
#, no-c-format
msgid "Analyzing Layout Problems"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:887
#, no-c-format
msgid "The <guilabel>Check layouts for potential problems</guilabel> button analyzes the currently visible UI and makes a report of possible layout related problems. All detected layout problems are displayed in the log and also printed to the console."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:895
#, no-c-format
msgid "Debug Window Showing the Result of Layout Analysis."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:906
#, no-c-format
msgid "Clicking on a reported problem highlights the component with the problem in the UI."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:911
#, no-c-format
msgid "The most common layout problem is caused by placing a component that has a relative size inside a container (layout) that has undefined size in the particular direction (height or width). For example, adding a <classname>Button</classname> with 100% width inside a <classname>VerticalLayout</classname> with undefined width. In such a case, the error would look as shown in <xref linkend=\"figure.advanced.debug.hierarchy.analyze\"/>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:921
#, no-c-format
msgid "<classname>CustomLayout</classname> components can not be analyzed in the same way as other layouts. For custom layouts, the button analyzes all contained relative-sized components and checks if any relative dimension is calculated to zero so that the component will be invisible. The error log will display a warning for each of these invisible components. It would not be meaningful to emphasize the component itself as it is not visible, so when you select such an error, the parent layout of the component is emphasized if possible."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:934
#, no-c-format
msgid "Displaying Used Connectors"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:936
#, no-c-format
msgid "The last button, <guibutton>Show used connectors and how to optimize widget set</guibutton>, displays a list of all currently visible connectors. It also generates a connector bundle loader factory, which you can use to optimize the widget set so that it only contains the widgets actually used in the UI. Note, however, that it only lists the connectors visible in the current UI state, and you usually have more connectors than that."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:949
#, no-c-format
msgid "Communication Log"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:951
#, no-c-format
msgid "The <guilabel>Communication</guilabel> tab displays all server requests. You can unfold the requests to view defails, such as the connectors involved. Clicking on a connector highlights the corresponding element in the UI."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:958
#, no-c-format
msgid "You can use Firebug or Developer Tools in Firefox or Chrome, respectively, to get more detailed information about the requests and responses."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:965
#, no-c-format
msgid "Debug Modes"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:967
#, no-c-format
msgid "The <guilabel>Menu</guilabel> tab in the window opens a sub-menu to select between basic debug mode, GWT development mode, as described in <xref linkend=\"clientside.debugging.devmode\"/>, and SuperDevMode, as described in <xref linkend=\"clientside.debugging.superdevmode\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:977
#, no-c-format
msgid "Request Handlers"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:979
#, no-c-format
msgid "Request handlers are useful for catching request parameters or generating dynamic content, such as HTML, images, PDF, or other content. You can provide HTTP content easily also with stream resources, as described in <xref linkend=\"application.resources.stream\"/>. The stream resources, however, are only usable from within a Vaadin application, such as in an <classname>Image</classname> component. Request handlers allow responding to HTTP requests made with the application URL, including GET or POST parameters. You could also use a separate servlet to generate dynamic content, but a request handler is associated with the Vaadin session and it can easily access all the session data."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:992
#, no-c-format
msgid "To handle requests, you need to implement the <interfacename>RequestHandler</interfacename> interface. The <methodname>handleRequest()</methodname> method gets the session, request, and response objects as parameters."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:999
#, no-c-format
msgid "If the handler writes a response, it must return <literal>true</literal>. This stops running other possible request handlers. Otherwise, it should return <literal>false</literal> so that another handler could return a response. Eventually, if no other handler writes a response, a UI will be created and initialized."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1007
#, no-c-format
msgid "In the following example, we catch requests for a sub-path in the URL for the servlet and write a plain text response. The servlet path consists of the context path and the servlet (sub-)path. Any additional path is passed to the request handler in the <parameter>pathInfo</parameter> of the request. For example, if the full path is <filename>/myapp/myui/rhexample</filename>, the path info will be <filename>/rhexample</filename>. Also, request parameters are available."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1017
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[VaadinSession.getCurrent().addRequestHandler(\n"
"        new RequestHandler() {\n"
"    @Override\n"
"    public boolean handleRequest(VaadinSession session,\n"
"                                 VaadinRequest request,\n"
"                                 VaadinResponse response)\n"
"            throws IOException {\n"
"        if (\"/rhexample\".equals(request.getPathInfo())) {\n"
"            response.setContentType(\"text/plain\");\n"
"            response.getWriter().append(\n"
"                \"Here's some dynamically generated content.\\n\"+\n"
"                \"Time: \" + (new Date()).toString());\n"
"            return true; // We wrote a response\n"
"        } else\n"
"            return false; // No response was written\n"
"    }\n"
"});\n"
"\n"
"// Find out the base bath for the servlet\n"
"String servletPath = VaadinServlet.getCurrent()\n"
"    .getServletContext().getContextPath() + VaadinServletService \n"
"    .getCurrentServletRequest().getServletPath();\n"
"        \n"
"// Display the page in a popup window\n"
"Link open = new Link(\"Click to Show the Page\",\n"
"    new ExternalResource(servletPath + \"/rhexample\"),\n"
"    \"_blank\", 500, 350, BorderStyle.DEFAULT);\n"
"layout.addComponent(open);]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1021
#, no-c-format
msgid "Shortcut Keys"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1023
#, no-c-format
msgid "Vaadin provides simple ways for defining shortcut keys for field components and a default button, and a lower-level generic shortcut key binding API based on actions."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1030
#, no-c-format
msgid "Shortcut Keys for Default Buttons"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1032
#, no-c-format
msgid "You can add or set a <emphasis>click shortcut</emphasis> to a button to set it as \"default\" button; pressing the defined key, typically <keycap>Enter</keycap>, in any component in the window causes a click event for the button."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1039
#, no-c-format
msgid "You can define a click shortcut with the <methodname>setClickShortcut()</methodname> shorthand method:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1044
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Have an OK button and set it as the default button\n"
"Button ok = new Button(\"OK\");\n"
"ok.setClickShortcut(KeyCode.ENTER);\n"
"ok.addStyleName(Reindeer.BUTTON_DEFAULT);]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1046
#, no-c-format
msgid "The <literal>BUTTON_DEFAULT</literal> style name highlights a button to show the default button status; usually with a bolder font than usual, depending on the theme. The result can be seen in <xref linkend=\"figure.advanced.shortcuts.defaultbutton\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1054
#, no-c-format
msgid "Default Button with Click Shortcut"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1067
#, no-c-format
msgid "Field Focus Shortcuts"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1069
#, no-c-format
msgid "You can define a shortcut key that sets the focus to a field component (any component that inherits <classname>AbstractField</classname>) by adding a <classname>FocusShortcut</classname> as a shortcut listener to the field. ."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1076
#, no-c-format
msgid "The constructor of the <classname>FocusShortcut</classname> takes the field component as its first parameter, followed by the key code, and an optional list of modifier keys, as listed in <xref linkend=\"advanced.shortcuts.keycodes\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1084
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// A field with Alt+N bound to it\n"
"TextField name = new TextField(\"Name (Alt+N)\");\n"
"name.addShortcutListener(\n"
"        new AbstractField.FocusShortcut(name, KeyCode.N,\n"
"                                        ModifierKey.ALT));\n"
"layout.addComponent(name);]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1086
#, no-c-format
msgid "You can also specify the shortcut by a shorthand notation, where the shortcut key is indicated with an ampersand (<literal>&amp;</literal>)."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1093
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// A field with Alt+A bound to it, using shorthand notation\n"
"TextField address = new TextField(\"Address (Alt+A)\");\n"
"address.addShortcutListener(\n"
"        new AbstractField.FocusShortcut(address, \"&Address\"));]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1095
#, no-c-format
msgid "This is especially useful for internationalization, so that you can determine the shortcut key from the localized string."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1102
#, no-c-format
msgid "Generic Shortcut Actions"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1104
#, no-c-format
msgid "Shortcut keys can be defined as <emphasis>actions</emphasis> using the <classname>ShortcutAction</classname> class. It extends the generic <classname>Action</classname> class that is used for example in <classname>Tree</classname> and <classname>Table</classname> for context menus. Currently, the only classes that accept <classname>ShortcutAction</classname>s are <classname>Window</classname> and <classname>Panel</classname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1114
#, no-c-format
msgid "To handle key presses, you need to define an action handler by implementing the <classname>Handler</classname> interface. The interface has two methods that you need to implement: <methodname>getActions()</methodname> and <methodname>handleAction()</methodname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1122
#, no-c-format
msgid "The <methodname>getActions()</methodname> method must return an array of <classname>Action</classname> objects for the component, specified with the second parameter for the method, the <parameter>sender</parameter> of an action. For a keyboard shortcut, you use a <classname>ShortcutAction</classname>. The implementation of the method could be following:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1131
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Have the unmodified Enter key cause an event\n"
"Action action_ok = new ShortcutAction(\"Default key\",\n"
"        ShortcutAction.KeyCode.ENTER, null);\n"
"\n"
"// Have the C key modified with Alt cause an event\n"
"Action action_cancel = new ShortcutAction(\"Alt+C\",\n"
"        ShortcutAction.KeyCode.C,\n"
"        new int[] { ShortcutAction.ModifierKey.ALT });\n"
"\n"
"Action[] actions = new Action[] {action_cancel, action_ok};\n"
"\n"
"public Action[] getActions(Object target, Object sender) {\n"
"    if (sender == myPanel)\n"
"        return actions;\n"
"\n"
"    return null;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1133
#, no-c-format
msgid "The returned <classname>Action</classname> array may be static or you can create it dynamically for different senders according to your needs."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1138
#, no-c-format
msgid "The constructor of <classname>ShortcutAction</classname> takes a symbolic caption for the action; this is largely irrelevant for shortcut actions in their current implementation, but might be used later if implementors use them both in menus and as shortcut actions. The second parameter is the key code and the third a list of modifier keys, which are listed in <xref linkend=\"advanced.shortcuts.keycodes\"/>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1147
#, no-c-format
msgid "The following example demonstrates the definition of a default button for a user interface, as well as a normal shortcut key, <keycombo><keycap>Alt</keycap><keycap>C</keycap></keycombo> for clicking the <guibutton>Cancel</guibutton> button."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1154
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class DefaultButtonExample extends CustomComponent\n"
"                                  implements Handler {\n"
"    // Define and create user interface components\n"
"    Panel panel = new Panel(\"Login\");\n"
"    FormLayout formlayout = new FormLayout();\n"
"    TextField username = new TextField(\"Username\");\n"
"    TextField password = new TextField(\"Password\");\n"
"    HorizontalLayout buttons = new HorizontalLayout();\n"
"\n"
"    // Create buttons and define their listener methods.\n"
"    Button ok = new Button(\"OK\", this, \"okHandler\");\n"
"    Button cancel = new Button(\"Cancel\", this, \"cancelHandler\");\n"
"\n"
"    // Have the unmodified Enter key cause an event\n"
"    Action action_ok = new ShortcutAction(\"Default key\",\n"
"            ShortcutAction.KeyCode.ENTER, null);\n"
"\n"
"    // Have the C key modified with Alt cause an event\n"
"    Action action_cancel = new ShortcutAction(\"Alt+C\",\n"
"            ShortcutAction.KeyCode.C,\n"
"            new int[] { ShortcutAction.ModifierKey.ALT });\n"
"\n"
"    public DefaultButtonExample() {\n"
"        // Set up the user interface\n"
"        setCompositionRoot(panel);\n"
"        panel.addComponent(formlayout);\n"
"        formlayout.addComponent(username);\n"
"        formlayout.addComponent(password);\n"
"        formlayout.addComponent(buttons);\n"
"        buttons.addComponent(ok);\n"
"        buttons.addComponent(cancel);\n"
"\n"
"        // Set focus to username\n"
"        username.focus();\n"
"\n"
"        // Set this object as the action handler\n"
"        panel.addActionHandler(this);\n"
"    }\n"
"\n"
"    /**\n"
"     * Retrieve actions for a specific component. This method\n"
"     * will be called for each object that has a handler; in\n"
"     * this example just for login panel. The returned action\n"
"     * list might as well be static list.\n"
"     */\n"
"    public Action[] getActions(Object target, Object sender) {\n"
"        System.out.println(\"getActions()\");\n"
"        return new Action[] { action_ok, action_cancel };\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle actions received from keyboard. This simply directs\n"
"     * the actions to the same listener methods that are called\n"
"     * with ButtonClick events.\n"
"     */\n"
"    public void handleAction(Action action, Object sender,\n"
"                             Object target) {\n"
"        if (action == action_ok) {\n"
"            okHandler();\n"
"        }\n"
"        if (action == action_cancel) {\n"
"            cancelHandler();\n"
"        }\n"
"    }\n"
"\n"
"    public void okHandler() {\n"
"        // Do something: report the click\n"
"        formlayout.addComponent(new Label(\"OK clicked. \"\n"
"                + \"User=\" + username.getValue() + \", password=\"\n"
"                + password.getValue()));\n"
"    }\n"
"\n"
"    public void cancelHandler() {\n"
"        // Do something: report the click\n"
"        formlayout.addComponent(new Label(\"Cancel clicked. User=\"\n"
"                + username.getValue() + \", password=\"\n"
"                + password.getValue()));\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1156
#, no-c-format
msgid "Notice that the keyboard actions can currently be attached only to <classname>Panel</classname>s and <classname>Window</classname>s. This can cause problems if you have components that require a certain key. For example, multi-line <classname>TextField</classname> requires the <keycap>Enter</keycap> key. There is currently no way to filter the shortcut actions out while the focus is inside some specific component, so you need to avoid such conflicts."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1168
#, no-c-format
msgid "Supported Key Codes and Modifier Keys"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1170
#, no-c-format
msgid "The shortcut key definitions require a key code to identify the pressed key and modifier keys, such as Shift, Alt, or Ctrl, to specify a key combination."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1176
#, no-c-format
msgid "The key codes are defined in the <classname>ShortcutAction.KeyCode</classname> interface and are:"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:1183
#, no-c-format
msgid "Keys <parameter>A</parameter> to <parameter>Z</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1184
#, no-c-format
msgid "Normal letter keys"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:1187
#, no-c-format
msgid "<parameter>F1</parameter> to <parameter>F12</parameter>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1189
#, no-c-format
msgid "Function keys"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:1193
#, no-c-format
msgid "<parameter>BACKSPACE</parameter>, <parameter>DELETE</parameter>, <parameter>ENTER</parameter>, <parameter>ESCAPE</parameter>, <parameter>INSERT</parameter>, <parameter>TAB</parameter>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1195
#, no-c-format
msgid "Control keys"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:1199
#, no-c-format
msgid "<parameter>NUM0</parameter> to <parameter>NUM9</parameter>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1201
#, no-c-format
msgid "Number pad keys"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:1205
#, no-c-format
msgid "<parameter>ARROW_DOWN</parameter>, <parameter>ARROW_UP</parameter>, <parameter>ARROW_LEFT</parameter>, <parameter>ARROW_RIGHT</parameter>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1207
#, no-c-format
msgid "Arrow keys"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:1211
#, no-c-format
msgid "<parameter>HOME</parameter>, <parameter>END</parameter>, <parameter>PAGE_UP</parameter>, <parameter>PAGE_DOWN</parameter>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1213
#, no-c-format
msgid "Other movement keys"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1218
#, no-c-format
msgid "Modifier keys are defined in <classname>ShortcutAction.ModifierKey</classname> and are:"
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:1225
#, no-c-format
msgid "ModifierKey.ALT"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1226
#, no-c-format
msgid "Alt key"
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:1229
#, no-c-format
msgid "ModifierKey.CTRL"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1230
#, no-c-format
msgid "Ctrl key"
msgstr ""

#. Tag: parameter
#: chapter-advanced.xml:1233
#, no-c-format
msgid "ModifierKey.SHIFT"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1234
#, no-c-format
msgid "Shift key"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1238
#, no-c-format
msgid "All constructors and methods accepting modifier keys take them as a variable argument list following the key code, separated with commas. For example, the following defines a <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>N</keycap></keycombo> key combination for a shortcut."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1246
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[TextField name = new TextField(\"Name (Ctrl+Shift+N)\");\n"
"name.addShortcutListener(\n"
"        new AbstractField.FocusShortcut(name, KeyCode.N,\n"
"                                        ModifierKey.CTRL,\n"
"                                        ModifierKey.SHIFT));]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1249
#, no-c-format
msgid "Supported Key Combinations"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1251
#, no-c-format
msgid "The actual possible key combinations vary greatly between browsers, as most browsers have a number of built-in shortcut keys, which can not be used in web applications. For example, Mozilla Firefox allows binding almost any key combination, while Opera does not even allow binding Alt shortcuts. Other browsers are generally in between these two. Also, the operating system can reserve some key combinations and some computer manufacturers define their own system key combinations."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1265
#, no-c-format
msgid "Printing"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:1268
#, no-c-format
msgid "printing"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1271
#, no-c-format
msgid "Vaadin does not have any special support for printing. There are two basic ways to print - in a printer controlled by the application server or by the user from the web browser. Printing in the application server is largely independent of the UI, you just have to take care that printing commands do not block server requests, possibly by running the print commands in another thread."
msgstr ""

#. Tag: methodname
#: chapter-advanced.xml:1282 chapter-advanced.xml:1286
#, no-c-format
msgid "print()"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:1285 chapter-advanced.xml:1306
#, no-c-format
msgid "JavaScript"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1287
#, no-c-format
msgid "For client-side printing, most browsers support printing the web page. You can either print the current or a special print page that you open. The page can be styled for printing with special CSS rules, and you can hide unwanted elements. You can also print other than Vaadin UI content, such as HTML or PDF."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1297
#, no-c-format
msgid "Printing the Browser Window"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1299
#, no-c-format
msgid "Vaadin does not have special support for launching the printing in browser, but you can easily use the JavaScript <methodname>print()</methodname> method that opens the print window of the browser."
msgstr ""

#. Tag: methodname
#: chapter-advanced.xml:1306
#, no-c-format
msgid "execute()"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1309
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Button print = new Button(\"Print This Page\");\n"
"print.addClickListener(new Button.ClickListener() {\n"
"    public void buttonClick(ClickEvent event) {\n"
"        // Print the current page\n"
"        JavaScript.getCurrent().execute(\"print();\");\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1311
#, no-c-format
msgid "The button in the above example would print the current page, including the button itself. You can hide such elements in CSS, as well as otherwise style the page for printing. Style definitions for printing are defined inside a <literal>@media print {}</literal> block in CSS."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1320
#, no-c-format
msgid "Opening a Print Window"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1322
#, no-c-format
msgid "You can open a browser window with a special UI for print content and automatically launch printing the content."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1328
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[public static class PrintUI extends UI {\n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        // Have some content to print\n"
"        setContent(new Label(\n"
"            \"<h1>Here's some dynamic content</h1>\\n\" +\n"
"            \"<p>This is to be printed.</p>\",\n"
"            ContentMode.HTML));\n"
"        \n"
"        // Print automatically when the window opens\n"
"        JavaScript.getCurrent().execute(\n"
"            \"setTimeout(function() {\" +\n"
"            \"  print(); self.close();}, 0);\");\n"
"    }\n"
"}\n"
"...\n"
"\n"
"// Create an opener extension\n"
"BrowserWindowOpener opener =\n"
"        new BrowserWindowOpener(PrintUI.class);\n"
"opener.setFeatures(\"height=200,width=400,resizable\");\n"
"    \n"
"// A button to open the printer-friendly page.\n"
"Button print = new Button(\"Click to Print\");\n"
"opener.extend(print);]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1330
#, no-c-format
msgid "How the browser opens the window, as an actual (popup) window or just a tab, depends on the browser. <indexterm><primary><classname>Window</classname></primary><secondary>closing</secondary></indexterm> After printing, we automatically close the window with another JavaScript call, as there is no <methodname>close()</methodname> method in <classname>Window</classname>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1346
#, no-c-format
msgid "Printing PDF"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:1349
#, no-c-format
msgid "<primary>PDF</primary>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1349
#, no-c-format
msgid "To print content as PDF, you need to provide the downloadable content as a static or a dynamic resource, such as a <classname>StreamResource</classname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1356
#, no-c-format
msgid "You can let the user open the resource using a <classname>Link</classname> component, or some other component with a <classname>PopupWindowOpener</classname> extension. When such a link or opener is clicked, the browser opens the PDF in the browser, in an external viewer (such as Adobe Reader), or lets the user save the document."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1365
#, no-c-format
msgid "It is crucial to notice that clicking a <classname>Link</classname> or a <classname>PopupWindowOpener</classname> is a client-side operation. If you get the content of the dynamic PDF from the same UI state, you can not have the link or opener enabled, as then clicking it would not get the current UI content. Instead, you have to create the resource object before the link or opener are clicked. This usually requires a two-step operation, or having the print operation available in another view."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1376
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// A user interface for a (trivial) data model from which\n"
"// the PDF is generated.\n"
"final TextField name = new TextField(\"Name\");\n"
"name.setValue(\"Slartibartfast\");\n"
"\n"
"// This has to be clicked first to create the stream resource\n"
"final Button ok = new Button(\"OK\");\n"
"\n"
"// This actually opens the stream resource\n"
"final Button print = new Button(\"Open PDF\");\n"
"print.setEnabled(false);\n"
"\n"
"ok.addClickListener(new ClickListener() {\n"
"    @Override\n"
"    public void buttonClick(ClickEvent event) {\n"
"        // Create the PDF source and pass the data model to it\n"
"        StreamSource source =\n"
"            new MyPdfSource((String) name.getValue());\n"
"        \n"
"        // Create the stream resource and give it a file name\n"
"        String filename = \"pdf_printing_example.pdf\";\n"
"        StreamResource resource =\n"
"                new StreamResource(source, filename);\n"
"        \n"
"        // These settings are not usually necessary. MIME type\n"
"        // is detected automatically from the file name, but\n"
"        // setting it explicitly may be necessary if the file\n"
"        // suffix is not \".pdf\".\n"
"        resource.setMIMEType(\"application/pdf\");\n"
"        resource.getStream().setParameter(\n"
"                \"Content-Disposition\",\n"
"                \"attachment; filename=\"+filename);\n"
"\n"
"        // Extend the print button with an opener\n"
"        // for the PDF resource\n"
"        BrowserWindowOpener opener =\n"
"                new BrowserWindowOpener(resource);\n"
"        opener.extend(print);\n"
"      \n"
"        name.setEnabled(false);\n"
"        ok.setEnabled(false);\n"
"        print.setEnabled(true);\n"
"    }\n"
"});\n"
"\n"
"layout.addComponent(name);\n"
"layout.addComponent(ok);\n"
"layout.addComponent(print);]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1384
#, no-c-format
msgid "Google App Engine Integration"
msgstr ""

#. Tag: emphasis
#: chapter-advanced.xml:1387
#, no-c-format
msgid "This section is not yet fully updated to Vaadin 7."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1390
#, no-c-format
msgid "Vaadin includes support to run Vaadin applications in the Google App Engine (GAE). The most essential requirement for GAE is the ability to serialize the application state. Vaadin applications are serializable through the <classname>java.io.Serializable</classname> interface."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1397
#, no-c-format
msgid "To run as a GAE application, an application must use <classname>GAEVaadinServlet</classname> instead of <classname>VaadinServlet</classname>, and of course implement the <classname>java.io.Serializable</classname> interface for all persistent classes. You also need to enable session support in <filename>appengine-web.xml</filename> with:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1406
#, no-c-format
msgid "<![CDATA[<sessions-enabled>true</sessions-enabled>]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1408
#, no-c-format
msgid "The Vaadin Project wizard can create the configuration files needed for GAE deployment. See <xref linkend=\"getting-started.first-project.creation\"/>. When the Google App Engine deployment configuration is selected, the wizard will create the project structure following the GAE Servlet convention instead of the regular Servlet convention. The main differences are:"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1417
#, no-c-format
msgid "Source directory: <filename>src/main/java</filename>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1418
#, no-c-format
msgid "Output directory: <filename>war/WEB-INF/classes</filename>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1419
#, no-c-format
msgid "Content directory: <filename>war</filename>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1423
#, no-c-format
msgid "Rules and Limitations"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1425
#, no-c-format
msgid "Running Vaadin applications in Google App Engine has the following rules and limitations:"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1431
#, no-c-format
msgid "Avoid using the session for storage, usual App Engine limitations apply (no synchronization, that is, it is unreliable)."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1435
#, no-c-format
msgid "Vaadin uses memcache for mutex, the key is of the form <parameter>_vmutex&lt;sessionid&gt;</parameter>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1438
#, no-c-format
msgid "The Vaadin <classname>WebApplicationContext</classname> class is serialized separately into memcache and datastore; the memcache key is <parameter>_vac&lt;sessionid&gt;</parameter> and the datastore entity kind is <parameter>_vac</parameter> with identifiers of the type <parameter>_vac&lt;sessionid&gt;</parameter>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1444
#, no-c-format
msgid "<emphasis>Do not</emphasis> update the application state when serving an <classname>ConnectorResource</classname> (such as <classname>ClassResource</classname>.<methodname>getStream()</methodname>)."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1448
#, no-c-format
msgid "<emphasis>Avoid</emphasis> (or be very careful when) updating application state in a <classname>TransactionListener</classname> - it is called even when the application is not locked and won't be serialized (such as with <classname>ConnectorResource</classname>), and changes can therefore be lost (it should be safe to update things that can be safely discarded later, that is, valid only for the current request)."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1456
#, no-c-format
msgid "The application remains locked during uploads - a progress bar is not possible."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1463
#, no-c-format
msgid "Common Security Issues"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1466
#, no-c-format
msgid "Sanitizing User Input to Prevent Cross-Site Scripting"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1468
#, no-c-format
msgid "You can put raw XHTML content in many components, such as the <classname>Label</classname> and <classname>CustomLayout</classname>, as well as in tooltips and notifications. In such cases, you should make sure that if the content has any possibility to come from user input, you must make sure that the content is safe before displaying it. Otherwise, a malicious user can easily make a <link xlink:href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting attack</link> by injecting offensive JavaScript code in such components. See other sources for more information about cross-site scripting."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1481
#, no-c-format
msgid "Offensive code can easily be injected with <literal>&lt;script&gt;</literal> markup or in tag attributes as events, such as <parameter>onLoad</parameter>. Cross-site scripting vulnerabilities are browser dependent, depending on the situations in which different browsers execute scripting markup."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1490
#, no-c-format
msgid "Therefore, if the content created by one user is shown to other users, the content must be sanitized. There is no generic way to sanitize user input, as different applications can allow different kinds of input. Pruning (X)HTML tags out is somewhat simple, but some applications may need to allow (X)HTML content. It is therefore the responsibility of the application to sanitize the input."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1499
#, no-c-format
msgid "Character encoding can make sanitization more difficult, as offensive tags can be encoded so that they are not recognized by a sanitizer. This can be done, for example, with HTML character entities and with variable-width encodings such as UTF-8 or various CJK encodings, by abusing multiple representations of a character. Most trivially, you could input <literal>&lt;</literal> and <literal>&gt;</literal> with <literal>&amp;lt;</literal> and <literal>&amp;gt;</literal>, respectively. The input could also be malformed and the sanitizer must be able to interpret it exactly as the browser would, and different browsers can interpret malformed HTML and variable-width character encodings differently."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1513
#, no-c-format
msgid "Notice that the problem applies also to user input from a <classname>RichTextArea</classname> is transmitted as XHTML from the browser to server-side and is not sanitized. As the entire purpose of the <classname>RichTextArea</classname> component is to allow input of formatted text, you can not just remove all HTML tags. Also many attributes, such as <parameter>style</parameter>, should pass through the sanitization."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1528
#, no-c-format
msgid "Navigating in an Application"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1530
#, no-c-format
msgid "Plain Vaadin applications do not have normal web page navigation as they usually run on a single page, as all Ajax applications do. Quite commonly, however, applications have different views between which the user should be able to navigate. The <classname>Navigator</classname> in Vaadin can be used for most cases of navigation. Views managed by the navigator automatically get a distinct URI fragment, which can be used to be able to bookmark the views and their states and to go back and forward in the browser history."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1541
#, no-c-format
msgid "Setting Up for Navigation"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1543
#, no-c-format
msgid "The <classname>Navigator</classname> class manages a collection of <emphasis>views</emphasis> that implement the <interfacename>View</interfacename> interface. The views can be either registered beforehand or acquired from a <emphasis>view provider</emphasis>. When registering, the views must have a name identifier and be added to a navigator with <methodname>addView()</methodname>. You can register new views at any point. Once registered, you can navigate to them with <methodname>navigateTo()</methodname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1555
#, no-c-format
msgid "<classname>Navigator</classname> manages navigation in a component container, which can be either a <interfacename>ComponentContainer</interfacename> (most layouts) or a <interfacename>SingleComponentContainer</interfacename> (<classname>UI</classname>, <classname>Panel</classname>, or <classname>Window</classname>). The component container is managed through a <interfacename>ViewDisplay</interfacename>. Two view displays are defined: <classname>ComponentContainerViewDisplay</classname> and <classname>SingleComponentContainerViewDisplay</classname>, for the respective component container types. Normally, you can let the navigator create the view display internally, as we do in the example below, but you can also create it yourself to customize it."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1570
#, no-c-format
msgid "Let us consider the following UI with two views: start and main. Here, we define their names with enums to be typesafe. We manage the navigation with the UI class itself, which is a <interfacename>SingleComponentContainer</interfacename>."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1578
#, no-c-format
msgid ""
"<![CDATA[public class NavigatorUI extends UI {\n"
"    Navigator navigator;\n"
"    protected static final String MAINVIEW = \"main\";\n"
"\n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        getPage().setTitle(\"Navigation Example\");\n"
"        \n"
"        // Create a navigator to control the views\n"
"        navigator = new Navigator(this, this);\n"
"        \n"
"        // Create and register the views\n"
"        navigator.addView(\"\", new StartView());\n"
"        navigator.addView(MAINVIEW, new MainView());\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1580
#, no-c-format
msgid "The <classname>Navigator</classname> automatically sets the URI fragment of the application URL. It also registers a <interfacename>URIFragmentChangedListener</interfacename> in the page <phrase condition=\"web\">(see <xref linkend=\"advanced.urifu\"/>)</phrase> to show the view identified by the URI fragment if entered or navigated to in the browser. This also enables browser navigation history in the application."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1590
#, no-c-format
msgid "View Providers"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1592
#, no-c-format
msgid "You can create new views dynamically using a <emphasis>view provider</emphasis> that implements the <interfacename>ViewProvider</interfacename> interface. A provider is registered in <classname>Navigator</classname> with <methodname>addProvider()</methodname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1600
#, no-c-format
msgid "The <methodname>ClassBasedViewProvider</methodname> is a view provider that can dynamically create new instances of a specified view class based on the view name."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1606
#, no-c-format
msgid "The <methodname>StaticViewProvider</methodname> returns an existing view instance based on the view name. The <methodname>addView()</methodname> in <classname>Navigator</classname> is actually just a shorthand for creating a static view provider for each registered view."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1616
#, no-c-format
msgid "View Change Listeners"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1618
#, no-c-format
msgid "You can handle view changes also by implementing a <interfacename>ViewChangeListener</interfacename> and adding it to a <classname>Navigator</classname>. When a view change occurs, a listener receives a <classname>ViewChangeEvent</classname> object, which has references to the old and the activated view, the name of the activated view, as well as the fragment parameters."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1630
#, no-c-format
msgid "Implementing a View"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1632
#, no-c-format
msgid "Views can be any objects that implement the <interfacename>View</interfacename> interface. When the <methodname>navigateTo()</methodname> is called for the navigator, or the application is opened with the URI fragment associated with the view, the navigator switches to the view and calls its <methodname>enter()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1641
#, no-c-format
msgid "To continue with the example, consider the following simple start view that just lets the user to navigate to the main view. It only pops up a notification when the user navigates to it and displays the navigation button."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1649
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/** A start view for navigating to the main view */\n"
"public class StartView extends VerticalLayout implements View {\n"
"    public StartView() {\n"
"        setSizeFull();\n"
"\n"
"        Button button = new Button(\"Go to Main View\",\n"
"                new Button.ClickListener() {\n"
"            @Override\n"
"            public void buttonClick(ClickEvent event) {\n"
"                navigator.navigateTo(MAINVIEW);\n"
"            }\n"
"        });\n"
"        addComponent(button);\n"
"        setComponentAlignment(button, Alignment.MIDDLE_CENTER);\n"
"    }        \n"
"        \n"
"    @Override\n"
"    public void enter(ViewChangeEvent event) {\n"
"        Notification.show(\"Welcome to the Animal Farm\");\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1651
#, no-c-format
msgid "You can initialize the view content in the constructor, as was done in the example above, or in the <methodname>enter()</methodname> method. The advantage with the latter method is that the view is attached to the view container as well as to the UI at that time, which is not the case in the constructor."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1661
#, no-c-format
msgid "Handling URI Fragment Path"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1663
#, no-c-format
msgid "URI fragment part of a URL is the part after a hash <literal>#</literal> character. Is used for within-UI URLs, because it is the only part of the URL that can be changed with JavaScript from within a page without reloading the page. The URLs with URI fragments can be used for hyperlinking and bookmarking, as well as browser history, just like any other URLs. In addition, an exclamation mark <literal>#!</literal> after the hash marks that the page is a stateful AJAX page, which can be crawled by search engines. Crawling requires that the application also responds to special URLs to get the searchable content. URI fragments are managed by <classname>Page</classname>, which provides a low-level API."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1676
#, no-c-format
msgid "URI fragments can be used with <classname>Navigator</classname> in two ways: for navigating to a view and to a state within a view. The URI fragment accepted by <methodname>navigateTo()</methodname> can have the view name at the root, followed by fragment parameters after a slash (\"<literal>/</literal>\"). These parameters are passed to the <methodname>enter()</methodname> method in the <interfacename>View</interfacename>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1686
#, no-c-format
msgid "In the following example, we implement within-view navigation."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1691
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/** Main view with a menu */\n"
"public class MainView extends VerticalLayout implements View {\n"
"    Panel panel;\n"
"\n"
"    // Menu navigation button listener\n"
"    class ButtonListener implements Button.ClickListener {\n"
"\n"
"        String menuitem;\n"
"        public ButtonListener(String menuitem) {\n"
"            this.menuitem = menuitem;\n"
"        }\n"
"\n"
"        @Override\n"
"        public void buttonClick(ClickEvent event) {\n"
"            // Navigate to a specific state\n"
"            navigator.navigateTo(MAINVIEW + \"/\" + menuitem);\n"
"        }\n"
"    }\n"
"\n"
"    public MainView() {\n"
"        setSizeFull();\n"
"        \n"
"        // Layout with menu on left and view area on right\n"
"        HorizontalLayout hLayout = new HorizontalLayout();\n"
"        hLayout.setSizeFull();\n"
"\n"
"        // Have a menu on the left side of the screen\n"
"        Panel menu = new Panel(\"List of Equals\");\n"
"        menu.setHeight(\"100%\");\n"
"        menu.setWidth(null);\n"
"        VerticalLayout menuContent = new VerticalLayout();\n"
"        menuContent.addComponent(new Button(\"Pig\",\n"
"                  new ButtonListener(\"pig\")));\n"
"        menuContent.addComponent(new Button(\"Cat\",\n"
"                  new ButtonListener(\"cat\")));\n"
"        menuContent.addComponent(new Button(\"Dog\",      \n"
"                  new ButtonListener(\"dog\")));\n"
"        menuContent.addComponent(new Button(\"Reindeer\",\n"
"                  new ButtonListener(\"reindeer\")));\n"
"        menuContent.addComponent(new Button(\"Penguin\",\n"
"                  new ButtonListener(\"penguin\")));\n"
"        menuContent.addComponent(new Button(\"Sheep\",\n"
"                  new ButtonListener(\"sheep\")));\n"
"        menuContent.setWidth(null);\n"
"        menuContent.setMargin(true);\n"
"        menu.setContent(menuContent);\n"
"        hLayout.addComponent(menu);\n"
"\n"
"        // A panel that contains a content area on right\n"
"        panel = new Panel(\"An Equal\");\n"
"        panel.setSizeFull();\n"
"        hLayout.addComponent(panel);\n"
"        hLayout.setExpandRatio(panel, 1.0f);\n"
"\n"
"        addComponent(hLayout);\n"
"        setExpandRatio(hLayout, 1.0f);\n"
"        \n"
"        // Allow going back to the start\n"
"        Button logout = new Button(\"Logout\",\n"
"                   new Button.ClickListener() {\n"
"            @Override\n"
"            public void buttonClick(ClickEvent event) {\n"
"                navigator.navigateTo(\"\");\n"
"            }\n"
"        });\n"
"        addComponent(logout);\n"
"    }        \n"
"    \n"
"    @Override\n"
"    public void enter(ViewChangeEvent event) {\n"
"        VerticalLayout panelContent = new VerticalLayout();\n"
"        panelContent.setSizeFull();\n"
"        panelContent.setMargin(true);\n"
"        panel.setContent(panelContent); // Also clears\n"
"\n"
"        if (event.getParameters() == null\n"
"            || event.getParameters().isEmpty()) {\n"
"            panelContent.addComponent(\n"
"                new Label(\"Nothing to see here, \" +\n"
"                          \"just pass along.\"));\n"
"            return;\n"
"        }\n"
"\n"
"        // Display the fragment parameters\n"
"        Label watching = new Label(\n"
"            \"You are currently watching a \" +\n"
"            event.getParameters());\n"
"        watching.setSizeUndefined();\n"
"        panelContent.addComponent(watching);\n"
"        panelContent.setComponentAlignment(watching,\n"
"            Alignment.MIDDLE_CENTER);\n"
"        \n"
"        // Some other content\n"
"        Embedded pic = new Embedded(null,\n"
"            new ThemeResource(\"img/\" + event.getParameters() +\n"
"                              \"-128px.png\"));\n"
"        panelContent.addComponent(pic);\n"
"        panelContent.setExpandRatio(pic, 1.0f);\n"
"        panelContent.setComponentAlignment(pic,\n"
"                Alignment.MIDDLE_CENTER);\n"
"\n"
"        Label back = new Label(\"And the \" +\n"
"            event.getParameters() + \" is watching you\");\n"
"        back.setSizeUndefined();\n"
"        panelContent.addComponent(back);\n"
"        panelContent.setComponentAlignment(back,\n"
"            Alignment.MIDDLE_CENTER);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1693
#, no-c-format
msgid "The main view is shown in <xref linkend=\"figure.advanced.navigator.mainview\"/>. At this point, the URL would be <literal>http://localhost:8080/myapp#!main/reindeer</literal>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1700
#, no-c-format
msgid "Navigator Main View"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1711
#, no-c-format
msgid "Advanced Application Architectures"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1713
#, no-c-format
msgid "In this section, we continue from the basic application architectures described in <xref linkend=\"application.architecture\"/> and discuss some of the more advanced patterns that are often used in Vaadin applications."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1720
#, no-c-format
msgid "Layered Architectures"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1722
#, no-c-format
msgid "Layered architectures, where each layer has a clearly distinct responsibility, are probably the most common architectures. Typically, applications follow at least a three-layer architecture:"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1729
#, no-c-format
msgid "User interface (or presentation) layer"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1730
#, no-c-format
msgid "Domain layer"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:1731
#, no-c-format
msgid "Data store layer"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1734
#, no-c-format
msgid "Such an architecture starts from a <emphasis>domain model</emphasis>, which defines the data model and the \"business logic\" of the application, typically as POJOs. A user interface is built on top of the domain model, in our context with the Vaadin Framework. The Vaadin user interface could be bound directly to the data model through the Vaadin Data Model, described in <xref linkend=\"datamodel\"/>. Beneath the domain model lies a data store, such as a relational database. The dependencies between the layers are restricted so that a higher layer may depend on a lower one, but never the other way around."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1747
#, no-c-format
msgid "Three-Layer Architecture"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1758
#, no-c-format
msgid "An <emphasis>application layer</emphasis> (or <emphasis>service layer</emphasis>) is often distinguished from the domain layer, offering the domain logic as a service, which can be used by the user interface layer, as well as for other uses. In Java EE development, Enterprise JavaBeans (EJBs) are typically used for building this layer."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1766
#, no-c-format
msgid "An <emphasis>infrastructure layer</emphasis> (or <emphasis>data access layer</emphasis>) is often distinguished from the data store layer, with a purpose to abstract the data store. For example, it could involve a persistence solution such as JPA and an EJB container. This layer becomes relevant with Vaadin when binding Vaadin components to data with the JPAContainer, as described in <xref linkend=\"jpacontainer\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1777 chapter-advanced.xml:1791
#, no-c-format
msgid "Model-View-Presenter Pattern"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1779
#, no-c-format
msgid "The Model-View-Presenter (MVP) pattern is one of the most common patterns in developing large applications with Vaadin. It is similar to the older Model-View-Controller (MVC) pattern, which is not as meaningful in Vaadin development. Instead of an implementation-aware controller, there is an implementation-agnostic presenter that operates the view through an interface. The view does not interact directly with the model. This isolates the view implementation better than in MVC and allows easier unit testing of the presenter and model."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1802
#, no-c-format
msgid "illustrates the MVP pattern with a simple calculator. The domain model is realized in the <classname>Calculator</classname> class, which includes a data model and some model logic operations. The <classname>CalculatorViewImpl</classname> is a Vaadin implementation of the view, defined in the <interfacename>CalculatorView</interfacename> interface. The <classname>CalculatorPresenter</classname> handles the user interface logic. User interaction events received in the view are translated into implementation-independent events for the presenter to handle (the view implementation could also just call the presenter)."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1815
#, no-c-format
msgid "Let us first look how the model and view are bound together by the presenter in the following example:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1820
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[\n"
"// Create the model and the Vaadin view implementation\n"
"CalculatorModel    model = new CalculatorModel();\n"
"CalculatorViewImpl view  = new CalculatorViewImpl();\n"
"    \n"
"// The presenter binds the model and view together\n"
"new CalculatorPresenter(model, view);\n"
"    \n"
"// The view implementation is a Vaadin component\n"
"layout.addComponent(view);]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1822
#, no-c-format
msgid "You could add the view anywhere in a Vaadin application, as it is a composite component."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1828
#, no-c-format
msgid "The Model"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1830
#, no-c-format
msgid "Our business model is quite simple, with one value and a number of operations for manipulating it."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1835
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/** The model **/\n"
"class CalculatorModel {\n"
"    private double value = 0.0;\n"
"    \n"
"    public void clear() {\n"
"        value = 0.0;\n"
"    }\n"
"\n"
"    public void add(double arg) {\n"
"        value += arg;\n"
"    }\n"
"\n"
"    public void multiply(double arg) {\n"
"        value *= arg;\n"
"    }\n"
"\n"
"    public void divide(double arg) {\n"
"        if (arg != 0.0)\n"
"            value /= arg;\n"
"    }\n"
"    \n"
"    public double getValue() {\n"
"        return value;\n"
"    }\n"
"    \n"
"    public void setValue(double value) {\n"
"        this.value = value;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1839
#, no-c-format
msgid "The View"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1841
#, no-c-format
msgid "The purpose of the view in MVP is to display data and receive user interaction. It relays the user interaction to the presenter in an fashion that is independent of the view implementation, that is, no Vaadin events. It is defined as a UI framework interface that can have multiple implementations."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1849
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[interface CalculatorView {\n"
"    public void setDisplay(double value);\n"
"\n"
"    interface CalculatorViewListener {\n"
"        void buttonClick(char operation);\n"
"    }\n"
"    public void addListener(CalculatorViewListener listener);\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1851
#, no-c-format
msgid "The are design alternatives for the view. It could receive the listener in its constructor, or it could just know the presenter. Here, we forward button clicks as an implementation-independent event."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1858
#, no-c-format
msgid "As we are using Vaadin, we make a Vaadin implementation of the interface as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1863
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class CalculatorViewImpl extends CustomComponent\n"
"        implements CalculatorView, ClickListener {\n"
"    private Label display = new Label(\"0.0\");\n"
"\n"
"    public CalculatorViewImpl() {\n"
"        GridLayout layout  = new GridLayout(4, 5);\n"
"\n"
"        // Create a result label that spans over all\n"
"        // the 4 columns in the first row\n"
"        layout.addComponent(display, 0, 0, 3, 0);\n"
"    \n"
"        // The operations for the calculator in the order\n"
"        // they appear on the screen (left to right, top\n"
"        // to bottom)\n"
"        String[] operations = new String[] {\n"
"            \"7\", \"8\", \"9\", \"/\", \"4\", \"5\", \"6\",\n"
"            \"*\", \"1\", \"2\", \"3\", \"-\", \"0\", \"=\", \"C\", \"+\" };\n"
"\n"
"        // Add buttons and have them send click events\n"
"        // to this class\n"
"        for (String caption: operations)\n"
"            layout.addComponent(new Button(caption, this));\n"
"\n"
"        setCompositionRoot(layout);\n"
"    }\n"
"    \n"
"    public void setDisplay(double value) {\n"
"        display.setValue(Double.toString(value));\n"
"    }\n"
"\n"
"    /* Only the presenter registers one listener... */\n"
"    List<CalculatorViewListener> listeners =\n"
"            new ArrayList<CalculatorViewListener>();\n"
"\n"
"    public void addListener(CalculatorViewListener listener) {\n"
"        listeners.add(listener);\n"
"    }\n"
"\n"
"    /** Relay button clicks to the presenter with an\n"
"     *  implementation-independent event */\n"
"    @Override\n"
"    public void buttonClick(ClickEvent event) {\n"
"        for (CalculatorViewListener listener: listeners)\n"
"            listener.buttonClick(event.getButton()\n"
"                                 .getCaption().charAt(0));\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1867
#, no-c-format
msgid "The Presenter"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1869
#, no-c-format
msgid "The presenter in MVP is a middle-man that handles all user interaction logic, but in an implementation-independent way, so that it doesn't actually know anything about Vaadin. It shows data in the view and receives user interaction back from it."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1876
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class CalculatorPresenter\n"
"        implements CalculatorView.CalculatorViewListener {\n"
"    CalculatorModel model;\n"
"    CalculatorView  view;\n"
"\n"
"    private double current = 0.0;\n"
"    private char   lastOperationRequested = 'C';\n"
"    \n"
"    public CalculatorPresenter(CalculatorModel model,\n"
"                               CalculatorView  view) {\n"
"        this.model = model;\n"
"        this.view  = view;\n"
"        \n"
"        view.setDisplay(current);            \n"
"        view.addListener(this);\n"
"    }\n"
"\n"
"    @Override\n"
"    public void buttonClick(char operation) {\n"
"        // Handle digit input\n"
"        if ('0' <= operation && operation <= '9') {\n"
"            current = current * 10\n"
"                    + Double.parseDouble(\"\" + operation);\n"
"            view.setDisplay(current);\n"
"            return;\n"
"        }\n"
"\n"
"        // Execute the previously input operation\n"
"        switch (lastOperationRequested) {\n"
"        case '+':\n"
"            model.add(current);\n"
"            break;\n"
"        case '-':\n"
"            model.add(-current);\n"
"            break;\n"
"        case '/':\n"
"            model.divide(current);\n"
"            break;\n"
"        case '*':\n"
"            model.multiply(current);\n"
"            break;\n"
"        case 'C':\n"
"            model.setValue(current);\n"
"            break;\n"
"        } // '=' is implicit\n"
"\n"
"        lastOperationRequested = operation;\n"
"\n"
"        current = 0.0;\n"
"        if (operation == 'C')\n"
"            model.clear();\n"
"        view.setDisplay(model.getValue());\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1878
#, no-c-format
msgid "In the above example, we held some state information in the presenter. Alternatively, we could have had an intermediate controller between the presenter and the model to handle the low-level button logic."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1889
#, no-c-format
msgid "Managing URI Fragments"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1891
#, no-c-format
msgid "A major issue in AJAX applications is that as they run in a single web page, bookmarking the application URL (or more generally the <emphasis>URI</emphasis>) can only bookmark the application, not an application state. This is a problem for many applications, such as product catalogs and discussion forums, in which it would be good to provide links to specific products or messages. Consequently, as browsers remember the browsing history by URI, the history and the <guibutton>Back</guibutton> button do not normally work. The solution is to use the <emphasis>fragment identifier</emphasis> part of the URI, which is separated from the primary part (address + path + optional query parameters) of the URI with the hash (#) character. For example:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1905
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[http://example.com/path#myfragment]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1907
#, no-c-format
msgid "The exact syntax of the fragment identifier part is defined in RFC 3986 (Internet standard STD 66) that defines the URI syntax. A fragment may only contain the regular URI <emphasis>path characters</emphasis> (see the standard) and additionally the slash and the question mark."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1914
#, no-c-format
msgid "Vaadin offers two ways to enable the use of URI fragments: the high-level <classname>Navigator</classname> utility described in <xref linkend=\"advanced.navigator\"/> and the low-level API described here."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1921
#, no-c-format
msgid "Setting the URI Fragment"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1923
#, no-c-format
msgid "You can set the current fragment identifier with the <methodname>setUriFragment()</methodname> method in the <classname>Page</classname> object."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1929
#, no-c-format
msgid "<![CDATA[Page.getCurrent().setUriFragment(\"mars\");]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1931
#, no-c-format
msgid "Setting the URI fragment causes an <interfacename>UriFragmentChangeEvent</interfacename>, which is processed in the same server request. As with UI rendering, the URI fragment is changed in the browser after the currently processed server request returns the response."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1939
#, no-c-format
msgid "Prefixing the fragment identifier with an exclamation mark enables the web crawler support described in <xref linkend=\"advanced.urifu.crawling\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1946
#, no-c-format
msgid "Reading the URI Fragment"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1948
#, no-c-format
msgid "The current URI fragment can be acquired with the <methodname>getUriFragment()</methodname> method from the current <classname>Page</classname> object. The fragment is known when the <methodname>init()</methodname> method of the UI is called."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1956
#, no-c-format
msgid ""
"<![CDATA[// Read initial URI fragment to create UI content\n"
"String fragment = getPage().getUriFragment();\n"
"enter(fragment);]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1958
#, no-c-format
msgid "To enable reusing the same code when the URI fragment is changed, as described next, it is usually best to build the relevant part of the UI in a separate method. In the above example, we called an <methodname>enter()</methodname> method, in a way that is similar to handling view changes with <classname>Navigator</classname>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1968
#, no-c-format
msgid "Listening for URI Fragment Changes"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1970
#, no-c-format
msgid "After the UI has been initialized, changes in the URI fragment can be handled with a <interfacename>UriFragmentChangeListener</interfacename>. The listeners are called when the URI fragment changes, but not when the UI is initialized, where the current fragment is available from the page object as described earlier."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1978
#, no-c-format
msgid "For example, we could define the listener as follows in the <methodname>init()</methodname> method of a UI class:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:1984
#, no-c-format
msgid ""
"<![CDATA[public class MyUI extends UI {\n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        getPage().addUriFragmentChangedListener(\n"
"               new UriFragmentChangedListener() {\n"
"           public void uriFragmentChanged(\n"
"                   UriFragmentChangedEvent source) {\n"
"               enter(source.getUriFragment());\n"
"            }\n"
"        });\n"
"\n"
"        // Read the initial URI fragment\n"
"        enter(getPage().getUriFragment());\n"
"    }\n"
"\n"
"    void enter(String fragment) {\n"
"        ... initialize the UI ...\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:1986
#, no-c-format
msgid "shows an application that allows specifying the menu selection with a URI fragment and correspondingly sets the fragment when the user selects a menu item."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:1993
#, no-c-format
msgid "Application State Management with URI Fragment Utility"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2006
#, no-c-format
msgid "Supporting Web Crawling"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2008
#, no-c-format
msgid "Stateful AJAX applications can not normally be crawled by a search engine, as they run in a single page and a crawler can not navigate the states even if URI fragments are enabled. The Google search engine and crawler <link xlink:href=\"http://googlewebmastercentral.blogspot.fi/2009/10/proposal-for-making-ajax-crawlable.html\">support a convention</link> where the fragment identifiers are prefixed with exclamation mark, such as <literal>#!myfragment</literal>. The servlet needs to have a separate searchable content page accessible with the same URL, but with a <literal>_escaped_fragment_</literal> parameter. For example, for <literal>/myapp/myui#!myfragment</literal> it would be <literal>/myapp/myui?_escaped_fragment_=myfragment</literal>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2022
#, no-c-format
msgid "You can provide the crawl content by overriding the <methodname>service()</methodname> method in a custom servlet class. For regular requests, you should call the super implementation in the <classname>VaadinServlet</classname> class."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2030
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class MyCustomServlet extends VaadinServlet\n"
"    @Override\n"
"    protected void service(HttpServletRequest request,\n"
"                           HttpServletResponse response)\n"
"            throws ServletException, IOException {\n"
"        String fragment = request\n"
"            .getParameter(\"_escaped_fragment_\");\n"
"        if (fragment != null) {\n"
"            response.setContentType(\"text/html\");\n"
"            Writer writer = response.getWriter();\n"
"            writer.append(\"<html><body>\"+\n"
"                \"<p>Here is some crawlable \"+\n"
"                \"content about \" + fragment + \"</p>\");\n"
"            \n"
"            // A list of all crawlable pages\n"
"            String items[] = {\"mercury\", \"venus\",\n"
"                              \"earth\", \"mars\"};\n"
"            writer.append(\"<p>Index of all content:</p><ul>\");\n"
"            for (String item: items) {\n"
"                String url = request.getContextPath() +\n"
"                    request.getServletPath() +\n"
"                    request.getPathInfo() + \"#!\" + item;\n"
"                writer.append(\"<li><a href='\" + url + \"'>\" +\n"
"                              item + \"</a></li>\");\n"
"            }\n"
"            writer.append(\"</ul></body>\");\n"
"        } else\n"
"            super.service(request, response);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2032
#, no-c-format
msgid "The crawlable content does not need to be human readable. It can provide an index of links to other application states, as we did in the example above. The links should use the \"<literal>#!</literal>\" notation, but can not be relative to avoid having the <literal>_escaped_fragment_</literal> parameter."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2040
#, no-c-format
msgid "You need to use the custom servlet class in the <filename>web.xml</filename> deployment descriptor instead of the normal <classname>VaadinServlet</classname> class, as described in <xref linkend=\"application.environment.web-xml\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2213
#, no-c-format
msgid "<title>Drag and Drop</title>"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:2216 chapter-advanced.xml:2481
#, no-c-format
msgid "<primary>Drag and Drop</primary>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2219
#, no-c-format
msgid "Dragging an object from one location to another by grabbing it with mouse, holding the mouse button pressed, and then releasing the button to \"drop\" it to the other location is a common way to move, copy, or associate objects. For example, most operating systems allow dragging and dropping files between folders or dragging a document on a program to open it. In Vaadin, it is possible to drag and drop components and parts of certain components."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2228
#, no-c-format
msgid "Dragged objects, or <emphasis>transferables</emphasis>, are essentially data objects. You can drag and drop rows in <classname>Table</classname> and nodes in <classname>Tree</classname> components, either within or between the components. You can also drag entire components by wrapping them inside <classname>DragAndDropWrapper</classname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2236
#, no-c-format
msgid "Dragging starts from a <emphasis>drag source</emphasis>, which defines the transferable. Transferables implement the <classname>Transferable</classname> interfaces. For trees and tables, which are bound to <classname>Container</classname> data sources, a node or row transferable is a reference to an <classname>Item</classname> in the Vaadin Data Model. Dragged components are referenced with a <classname>WrapperTransferable</classname>. Starting dragging does not require any client-server communication, you only need to enable dragging. All drag and drop logic occurs in two operations: determining (<emphasis>accepting</emphasis>) where dropping is allowed and actually dropping. Drops can be done on a <emphasis>drop target</emphasis>, which implements the <classname>DropTarget</classname> interface. Three components implement the interface: <classname>Tree</classname>, <classname>Table</classname>, and <classname>DragAndDropWrapper</classname>. These accept and drop operations need to be provided in a <emphasis>drop handler</emphasis>. Essentially all you need to do to enable drag and drop is to enable dragging in the drag source and implement the <methodname>getAcceptCriterion()</methodname> and <methodname>drop()</methodname> methods in the <classname>DropHandler</classname> interface."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2259
#, no-c-format
msgid "The client-server architecture of Vaadin causes special requirements for the drag and drop functionality. The logic for determining where a dragged object can be dropped, that is, <emphasis>accepting</emphasis> a drop, should normally be done on the client-side, in the browser. Server communications are too slow to have much of such logic on the server-side. The drag and drop feature therefore offers a number of ways to avoid the server communications to ensure a good user experience."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2270
#, no-c-format
msgid "Handling Drops"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2272
#, no-c-format
msgid "Most of the user-defined drag and drop logic occurs in a <emphasis>drop handler</emphasis>, which is provided by implementing the <methodname>drop()</methodname> method in the <classname>DropHandler</classname> interface. A closely related definition is the drop accept criterion, which is defined in the <methodname>getAcceptCriterion()</methodname> method in the same interface. It is described in <xref linkend=\"advanced.dragndrop.acceptcriteria\"/> later."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2283
#, no-c-format
msgid "The <methodname>drop()</methodname> method gets a <classname>DragAndDropEvent</classname> as its parameters. The event object provides references to two important object: <classname>Transferable</classname> and <classname>TargetDetails</classname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2291
#, no-c-format
msgid "A <classname>Transferable</classname> contains a reference to the object (component or data item) that is being dragged. A tree or table item is represented as a <classname>TreeTransferable</classname> or <classname>TableTransferable</classname> object, which carries the item identifier of the dragged tree or table item. These special transferables, which are bound to some data in a container, are <classname>DataBoundTransferable</classname>. Dragged components are represented as <classname>WrapperTransferable</classname> objects, as the components are wrapped in a <classname>DragAndDropWrapper</classname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2303
#, no-c-format
msgid "The <classname>TargetDetails</classname> object provides information about the exact location where the transferable object is being dropped. The exact class of the details object depends on the drop target and you need to cast it to the proper subclass to get more detailed information. If the target is selection component, essentially a tree or a table, the <classname>AbstractSelectTargetDetails</classname> object tells the item on which the drop is being made. For trees, the <classname>TreeTargetDetails</classname> gives some more details. For wrapped components, the information is provided in a <classname>WrapperDropDetails</classname> object. In addition to the target item or component, the details objects provide a <emphasis>drop location</emphasis>. For selection components, the location can be obtained with the <methodname>getDropLocation()</methodname> and for wrapped components with <methodname>verticalDropLocation()</methodname> and <methodname>horizontalDropLocation()</methodname>. The locations are specified as either <classname>VerticalDropLocation</classname> or <classname>HorizontalDropLocation</classname> objects. The drop location objects specify whether the transferable is being dropped above, below, or directly on (at the middle of) a component or item."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2325
#, no-c-format
msgid "Dropping on a <classname>Tree</classname>, <classname>Table</classname>, and a wrapped component is explained further in the following sections."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2332
#, no-c-format
msgid "Dropping Items On a <classname>Tree</classname>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2334
#, no-c-format
msgid "You can drag items from, to, or within a <classname>Tree</classname>. Making tree a drag source requires simply setting the drag mode with <methodname>setDragMode()</methodname>. <classname>Tree</classname> currently supports only one drag mode, <literal>TreeDragMode.NODE</literal>, which allows dragging single tree nodes. While dragging, the dragged node is referenced with a <classname>TreeTransferable</classname> object, which is a <classname>DataBoundTransferable</classname>. The tree node is identified by the item ID of the container item."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2347
#, no-c-format
msgid "When a transferable is dropped on a tree, the drop location is stored in a <classname>TreeTargetDetails</classname> object, which identifies the target location by item ID of the tree node on which the drop is made. You can get the item ID with <methodname>getItemIdOver()</methodname> method in <classname>AbstractSelectTargetDetails</classname>, which the <classname>TreeTargetDetails</classname> inherits. A drop can occur directly on or above or below a node; the exact location is a <classname>VerticalDropLocation</classname>, which you can get with the <methodname>getDropLocation()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2359
#, no-c-format
msgid "In the example below, we have a <classname>Tree</classname> and we allow reordering the tree items by drag and drop."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2364
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[final Tree tree = new Tree(\"Inventory\");\n"
"tree.setContainerDataSource(TreeExample.createTreeContent());\n"
"layout.addComponent(tree);\n"
"        \n"
"// Expand all items\n"
"for (Iterator<?> it = tree.rootItemIds().iterator(); it.hasNext();)\n"
"    tree.expandItemsRecursively(it.next());\n"
"        \n"
"// Set the tree in drag source mode\n"
"tree.setDragMode(TreeDragMode.NODE);\n"
"        \n"
"// Allow the tree to receive drag drops and handle them\n"
"tree.setDropHandler(new DropHandler() {\n"
"    public AcceptCriterion getAcceptCriterion() {\n"
"        return AcceptAll.get();\n"
"    }\n"
"\n"
"    public void drop(DragAndDropEvent event) {\n"
"        // Wrapper for the object that is dragged\n"
"        Transferable t = event.getTransferable();\n"
"        \n"
"        // Make sure the drag source is the same tree\n"
"        if (t.getSourceComponent() != tree)\n"
"            return;\n"
"        \n"
"        TreeTargetDetails target = (TreeTargetDetails)\n"
"            event.getTargetDetails();\n"
"\n"
"        // Get ids of the dragged item and the target item\n"
"        Object sourceItemId = t.getData(\"itemId\");\n"
"        Object targetItemId = target.getItemIdOver();\n"
"\n"
"        // On which side of the target the item was dropped \n"
"        VerticalDropLocation location = target.getDropLocation();\n"
"        \n"
"        HierarchicalContainer container = (HierarchicalContainer)\n"
"        tree.getContainerDataSource();\n"
"\n"
"        // Drop right on an item -> make it a child\n"
"        if (location == VerticalDropLocation.MIDDLE)\n"
"            tree.setParent(sourceItemId, targetItemId);\n"
"\n"
"        // Drop at the top of a subtree -> make it previous\n"
"        else if (location == VerticalDropLocation.TOP) {\n"
"            Object parentId = container.getParent(targetItemId);\n"
"            container.setParent(sourceItemId, parentId);\n"
"            container.moveAfterSibling(sourceItemId, targetItemId);\n"
"            container.moveAfterSibling(targetItemId, sourceItemId);\n"
"        }\n"
"        \n"
"        // Drop below another item -> make it next \n"
"        else if (location == VerticalDropLocation.BOTTOM) {\n"
"            Object parentId = container.getParent(targetItemId);\n"
"            container.setParent(sourceItemId, parentId);\n"
"            container.moveAfterSibling(sourceItemId, targetItemId);\n"
"        }\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2367
#, no-c-format
msgid "Accept Criteria for Trees"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2369
#, no-c-format
msgid "<classname>Tree</classname> defines some specialized accept criteria for trees."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:2376
#, no-c-format
msgid "<classname>TargetInSubtree</classname> (client-side)"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2377
#, no-c-format
msgid "Accepts if the target item is in the specified sub-tree. The sub-tree is specified by the item ID of the root of the sub-tree in the constructor. The second constructor includes a depth parameter, which specifies how deep from the given root node are drops accepted. Value <literal>-1</literal> means infinite, that is, the entire sub-tree, and is therefore the same as the simpler constructor."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:2388
#, no-c-format
msgid "<classname>TargetItemAllowsChildren</classname> (client-side)"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2389
#, no-c-format
msgid "Accepts a drop if the tree has <methodname>setChildrenAllowed()</methodname> enabled for the target item. The criterion does not require parameters, so the class is a singleton and can be acquired with <methodname>Tree.TargetItemAllowsChildren.get()</methodname>. For example, the following composite criterion accepts drops only on nodes that allow children, but between all nodes:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2398
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[return new Or (Tree.TargetItemAllowsChildren.get(), new Not(VerticalLocationIs.MIDDLE));]]>"
msgstr ""

#. Tag: term
#: chapter-advanced.xml:2402
#, no-c-format
msgid "<classname>TreeDropCriterion</classname> (server-side)"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2403
#, no-c-format
msgid "Accepts drops on only some items, which as specified by a set of item IDs. You must extend the abstract class and implement the <methodname>getAllowedItemIds()</methodname> to return the set. While the criterion is server-side, it is lazy-loading, so that the list of accepted target nodes is loaded only once from the server for each drag operation. See <xref linkend=\"advanced.dragndrop.acceptcriteria\"/> for an example."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2415
#, no-c-format
msgid "In addition, the accept criteria defined in <classname>AbstractSelect</classname> are available for a <classname>Tree</classname>, as listed in <xref linkend=\"advanced.dragndrop.acceptcriteria\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2426
#, no-c-format
msgid "Dropping Items On a <classname>Table</classname>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2428
#, no-c-format
msgid "You can drag items from, to, or within a <classname>Table</classname>. Making table a drag source requires simply setting the drag mode with <methodname>setDragMode()</methodname>. <classname>Table</classname> supports dragging both single rows, with <literal>TableDragMode.ROW</literal>, and multiple rows, with <literal>TableDragMode.MULTIROW</literal>. While dragging, the dragged node or nodes are referenced with a <classname>TreeTransferable</classname> object, which is a <classname>DataBoundTransferable</classname>. Tree nodes are identified by the item IDs of the container items."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2442
#, no-c-format
msgid "When a transferable is dropped on a table, the drop location is stored in a <classname>AbstractSelectTargetDetails</classname> object, which identifies the target row by its item ID. You can get the item ID with <methodname>getItemIdOver()</methodname> method. A drop can occur directly on or above or below a row; the exact location is a <classname>VerticalDropLocation</classname>, which you can get with the <methodname>getDropLocation()</methodname> method from the details object."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2453
#, no-c-format
msgid "Accept Criteria for Tables"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2455
#, no-c-format
msgid "<classname>Table</classname> defines one specialized accept criterion for tables."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:2462
#, no-c-format
msgid "<classname>TableDropCriterion</classname> (server-side)"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2463
#, no-c-format
msgid "Accepts drops only on (or above or below) items that are specified by a set of item IDs. You must extend the abstract class and implement the <methodname>getAllowedItemIds()</methodname> to return the set. While the criterion is server-side, it is lazy-loading, so that the list of accepted target items is loaded only once from the server for each drag operation."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2478
#, no-c-format
msgid "Accepting Drops"
msgstr ""

#. Tag: secondary
#: chapter-advanced.xml:2482
#, no-c-format
msgid "Accept Criteria"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2485
#, no-c-format
msgid "You can not drop the objects you are dragging around just anywhere. Before a drop is possible, the specific drop location on which the mouse hovers must be <emphasis>accepted</emphasis>. Hovering a dragged object over an accepted location displays an <emphasis>accept indicator</emphasis>, which allows the user to position the drop properly. As such checks have to be done all the time when the mouse pointer moves around the drop targets, it is not feasible to send the accept requests to the server-side, so drops on a target are normally accepted by a client-side <emphasis>accept criterion</emphasis>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2497
#, no-c-format
msgid "A drop handler must define the criterion on the objects which it accepts to be dropped on the target. The criterion needs to be provided in the <classname>getAcceptCriterion()</classname> method of the <classname>DropHandler</classname> interface. A criterion is represented in an <classname>AcceptCriterion</classname> object, which can be a composite of multiple criteria that are evaluated using logical operations. There are two basic types of criteria: <emphasis>client-side</emphasis> and <emphasis>server-side criteria</emphasis>. The various built-in criteria allow accepting drops based on the identity of the source and target components, and on the <emphasis>data flavor</emphasis> of the dragged objects."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2511
#, no-c-format
msgid "To allow dropping any transferable objects, you can return a universal accept criterion, which you can get with <methodname>AcceptAll.get()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2517
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[tree.setDropHandler(new DropHandler() {\n"
"    public AcceptCriterion getAcceptCriterion() {\n"
"        return AcceptAll.get();\n"
"    }\n"
"    ...]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2520
#, no-c-format
msgid "Client-Side Criteria"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2522
#, no-c-format
msgid "The <emphasis>client-side criteria</emphasis>, which inherit the <classname>ClientSideCriterion</classname>, are verified on the client-side, so server requests are not needed for verifying whether each component on which the mouse pointer hovers would accept a certain object."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2529
#, no-c-format
msgid "The following client-side criteria are define in <package>com.vaadin.event.dd.acceptcriterion</package>:"
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2536
#, no-c-format
msgid "AcceptAll"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2537
#, no-c-format
msgid "Accepts all transferables and targets."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2542
#, no-c-format
msgid "<classname>And</classname>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2543
#, no-c-format
msgid "Performs the logical AND operation on two or more client-side criteria; accepts the transferable if all the given sub-criteria accept it."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2550
#, no-c-format
msgid "ContainsDataFlavour"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2551
#, no-c-format
msgid "The transferable must contain the defined data flavour."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2556
#, no-c-format
msgid "<classname>Not</classname>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2557
#, no-c-format
msgid "Performs the logical NOT operation on a client-side criterion; accepts the transferable if and only if the sub-criterion does not accept it."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2564
#, no-c-format
msgid "<classname>Or</classname>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2565
#, no-c-format
msgid "Performs the logical OR operation on two or more client-side criteria; accepts the transferable if any of the given sub-criteria accepts it."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2572
#, no-c-format
msgid "SourceIs"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2573
#, no-c-format
msgid "Accepts all transferables from any of the given source components"
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2579
#, no-c-format
msgid "SourceIsTarget"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2580
#, no-c-format
msgid "Accepts the transferable only if the source component is the same as the target. This criterion is useful for ensuring that items are dragged only within a tree or a table, and not from outside it."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2588
#, no-c-format
msgid "TargetDetailIs"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2589
#, no-c-format
msgid "Accepts any transferable if the target detail, such as the item of a tree node or table row, is of the given data flavor and has the given value."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2597
#, no-c-format
msgid "In addition, target components such as <classname>Tree</classname> and <classname>Table</classname> define some component-specific client-side accept criteria. See <xref linkend=\"advanced.dragndrop.treedrop\"/> for more details."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2604
#, no-c-format
msgid "<classname>AbstractSelect</classname> defines the following criteria for all selection components, including <classname>Tree</classname> and <classname>Table</classname>."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2612
#, no-c-format
msgid "AcceptItem"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2613
#, no-c-format
msgid "Accepts only specific items from a specific selection component. The selection component, which must inherit <classname>AbstractSelect</classname>, is given as the first parameter for the constructor. It is followed by a list of allowed item identifiers in the drag source."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2622
#, no-c-format
msgid "AcceptItem.ALL"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2623
#, no-c-format
msgid "Accepts all transferables as long as they are items."
msgstr ""

#. Tag: classname
#: chapter-advanced.xml:2628
#, no-c-format
msgid "TargetItemIs"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2629
#, no-c-format
msgid "Accepts all drops on the specified target items. The constructor requires the target component (<classname>AbstractSelect</classname>) followed by a list of allowed item identifiers."
msgstr ""

#. Tag: term
#: chapter-advanced.xml:2637
#, no-c-format
msgid "<classname>VerticalLocationIs.MIDDLE</classname>, <classname>TOP</classname>, and <classname>BOTTOM</classname>"
msgstr ""

#. Tag: listitem
#: chapter-advanced.xml:2640
#, no-c-format
msgid "The three static criteria accepts drops on, above, or below an item. For example, you could accept drops only in between items with the following:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2645
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public AcceptCriterion getAcceptCriterion() {\n"
"    return new Not(VerticalLocationIs.MIDDLE);\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2652
#, no-c-format
msgid "Server-Side Criteria"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2654
#, no-c-format
msgid "The <emphasis>server-side criteria</emphasis> are verified on the server-side with the <methodname>accept()</methodname> method of the <classname>ServerSideCriterion</classname> class. This allows fully programmable logic for accepting drops, but the negative side is that it causes a very large amount of server requests. A request is made for every target position on which the pointer hovers. This problem is eased in many cases by the component-specific lazy loading criteria <classname>TableDropCriterion</classname> and <classname>TreeDropCriterion</classname>. They do the server visit once for each drag and drop operation and return all accepted rows or nodes for current <classname>Transferable</classname> at once."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2668
#, no-c-format
msgid "The <methodname>accept()</methodname> method gets the drag event as a parameter so it can perform its logic much like in <methodname>drop()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2674
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public AcceptCriterion getAcceptCriterion() {\n"
"    // Server-side accept criterion that allows drops on any other\n"
"    // location except on nodes that may not have children\n"
"    ServerSideCriterion criterion = new ServerSideCriterion() {\n"
"        public boolean accept(DragAndDropEvent dragEvent) {\n"
"            TreeTargetDetails target = (TreeTargetDetails)\n"
"                dragEvent.getTargetDetails();\n"
"\n"
"            // The tree item on which the load hovers\n"
"            Object targetItemId = target.getItemIdOver();\n"
"\n"
"            // On which side of the target the item is hovered\n"
"            VerticalDropLocation location = target.getDropLocation();\n"
"            if (location == VerticalDropLocation.MIDDLE)\n"
"                if (! tree.areChildrenAllowed(targetItemId))\n"
"                    return false; // Not accepted\n"
"\n"
"            return true; // Accept everything else\n"
"        }\n"
"    };\n"
"    return criterion;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2676
#, no-c-format
msgid "The server-side criteria base class <classname>ServerSideCriterion</classname> provides a generic <methodname>accept()</methodname> method. The more specific <classname>TableDropCriterion</classname> and <classname>TreeDropCriterion</classname> are conveniency extensions that allow definiting allowed drop targets as a set of items. They also provide some optimization by lazy loading, which reduces server communications significantly."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2687
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public AcceptCriterion getAcceptCriterion() {\n"
"    // Server-side accept criterion that allows drops on any\n"
"    // other tree node except on node that may not have children\n"
"    TreeDropCriterion criterion = new TreeDropCriterion() {\n"
"        @Override\n"
"        protected Set<Object> getAllowedItemIds(\n"
"                DragAndDropEvent dragEvent, Tree tree) {\n"
"            HashSet<Object> allowed = new HashSet<Object>();\n"
"            for (Iterator<Object> i =\n"
"                   tree.getItemIds().iterator(); i.hasNext();) {\n"
"                Object itemId = i.next();\n"
"                if (tree.hasChildren(itemId))\n"
"                    allowed.add(itemId);\n"
"            }\n"
"            return allowed;\n"
"        }\n"
"    };\n"
"    return criterion;\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2692
#, no-c-format
msgid "Accept Indicators"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2694
#, no-c-format
msgid "When a dragged object hovers on a drop target, an <emphasis>accept indicator</emphasis> is displayed to show whether or not the location is accepted. For <parameter>MIDDLE</parameter> location, the indicator is a box around the target (tree node, table row, or component). For vertical drop locations, the accepted locations are shown as horizontal lines, and for horizontal drop locations as vertical lines."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2703
#, no-c-format
msgid "For <classname>DragAndDropWrapper</classname> drop targets, you can disable the accept indicators or <emphasis>drag hints</emphasis> with the <parameter>no-vertical-drag-hints</parameter>, <parameter>no-horizontal-drag-hints</parameter>, and <parameter>no-box-drag-hints</parameter> styles. You need to add the styles to the <emphasis>layout that contains</emphasis> the wrapper, not to the wrapper itself."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2713
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Have a wrapper\n"
"DragAndDropWrapper wrapper = new DragAndDropWrapper(c);\n"
"layout.addComponent(wrapper);\n"
"\n"
"// Disable the hints\n"
"layout.addStyleName(\"no-vertical-drag-hints\");\n"
"layout.addStyleName(\"no-horizontal-drag-hints\");\n"
"layout.addStyleName(\"no-box-drag-hints\");]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2722
#, no-c-format
msgid "Dragging Components"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2724
#, no-c-format
msgid "Dragging a component requires wrapping the source component within a <classname>DragAndDropWrapper</classname>. You can then allow dragging by putting the wrapper (and the component) in drag mode with <methodname>setDragStartMode()</methodname>. The method supports two drag modes: <parameter>DragStartMode.WRAPPER</parameter> and <parameter>DragStartMode.COMPONENT</parameter>, which defines whether the entire wrapper is shown as the drag image while dragging or just the wrapped component."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2735
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Have a component to drag\n"
"final Button button = new Button(\"An Absolute Button\");\n"
"\n"
"// Put the component in a D&D wrapper and allow dragging it\n"
"final DragAndDropWrapper buttonWrap = new DragAndDropWrapper(button);\n"
"buttonWrap.setDragStartMode(DragStartMode.COMPONENT);\n"
"\n"
"// Set the wrapper to wrap tightly around the component\n"
"buttonWrap.setSizeUndefined();\n"
"        \n"
"// Add the wrapper, not the component, to the layout\n"
"layout.addComponent(buttonWrap, \"left: 50px; top: 50px;\");]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2737
#, no-c-format
msgid "The default height of <classname>DragAndDropWrapper</classname> is undefined, but the default width is 100%. If you want to ensure that the wrapper fits tightly around the wrapped component, you should call <methodname>setSizeUndefined()</methodname> for the wrapper. Doing so, you should make sure that the wrapped component does not have a relative size, which would cause a paradox."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2746
#, no-c-format
msgid "Dragged components are referenced in the <classname>WrapperTransferable</classname>. You can get the reference to the dragged component with <methodname>getDraggedComponent()</methodname>. The method will return <literal>null</literal> if the transferable is not a component. Also HTML 5 drags (see later) are held in wrapper transferables."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2758
#, no-c-format
msgid "Dropping on a Component"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2760
#, no-c-format
msgid "Drops on a component are enabled by wrapping the component in a <classname>DragAndDropWrapper</classname>. The wrapper is an ordinary component; the constructor takes the wrapped component as a parameter. You just need to define the <classname>DropHandler</classname> for the wrapper with <methodname>setDropHandler()</methodname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2768
#, no-c-format
msgid "In the following example, we allow moving components in an absolute layout. Details on the drop handler are given later."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2773
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// A layout that allows moving its contained components\n"
"// by dragging and dropping them\n"
"final AbsoluteLayout absLayout = new AbsoluteLayout();\n"
"absLayout.setWidth(\"100%\");\n"
"absLayout.setHeight(\"400px\");\n"
"\n"
"... put some (wrapped) components in the layout ...\n"
"\n"
"// Wrap the layout to allow handling drops\n"
"DragAndDropWrapper layoutWrapper =\n"
"        new DragAndDropWrapper(absLayout);\n"
"\n"
"// Handle moving components within the AbsoluteLayout\n"
"layoutWrapper.setDropHandler(new DropHandler() {\n"
"    public AcceptCriterion getAcceptCriterion() {\n"
"        return AcceptAll.get();\n"
"    }\n"
"    \n"
"    public void drop(DragAndDropEvent event) {\n"
"        ...        \n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2776
#, no-c-format
msgid "Target Details for Wrapped Components"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2778
#, no-c-format
msgid "The drop handler receives the drop target details in a <classname>WrapperTargetDetails</classname> object, which implements the <classname>TargetDetails</classname> interface."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2784
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public void drop(DragAndDropEvent event) {\n"
"    WrapperTransferable t =\n"
"        (WrapperTransferable) event.getTransferable();\n"
"    WrapperTargetDetails details =\n"
"        (WrapperTargetDetails) event.getTargetDetails();]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2786
#, no-c-format
msgid "The wrapper target details include a <classname>MouseEventDetails</classname> object, which you can get with <methodname>getMouseEvent()</methodname>. You can use it to get the mouse coordinates for the position where the mouse button was released and the drag ended. Similarly, you can find out the drag start position from the transferable object (if it is a <classname>WrapperTransferable</classname>) with <methodname>getMouseDownEvent()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2797
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Calculate the drag coordinate difference\n"
"int xChange = details.getMouseEvent().getClientX()\n"
"              - t.getMouseDownEvent().getClientX();\n"
"int yChange = details.getMouseEvent().getClientY()\n"
"              - t.getMouseDownEvent().getClientY();\n"
"\n"
"// Move the component in the absolute layout\n"
"ComponentPosition pos =\n"
"    absLayout.getPosition(t.getSourceComponent());\n"
"pos.setLeftValue(pos.getLeftValue() + xChange);\n"
"pos.setTopValue(pos.getTopValue() + yChange);]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2799
#, no-c-format
msgid "You can get the absolute x and y coordinates of the target wrapper with <methodname>getAbsoluteLeft()</methodname> and <methodname>getAbsoluteTop()</methodname>, which allows you to translate the absolute mouse coordinates to coordinates relative to the wrapper. Notice that the coordinates are really the position of the wrapper, not the wrapped component; the wrapper reserves some space for the accept indicators."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2809
#, no-c-format
msgid "The <methodname>verticalDropLocation()</methodname> and <methodname>horizontalDropLocation()</methodname> return the more detailed drop location in the target."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2818
#, no-c-format
msgid "Dragging Files from Outside the Browser"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2820
#, no-c-format
msgid "The <classname>DragAndDropWrapper</classname> allows dragging files from outside the browser and dropping them on a component wrapped in the wrapper. Dropped files are automatically uploaded to the application and can be acquired from the wrapper with <methodname>getFiles()</methodname>. The files are represented as <classname>Html5File</classname> objects as defined in the inner class. You can define an upload <classname>Receiver</classname> to receive the content of a file to an <classname>OutputStream</classname>."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2831
#, no-c-format
msgid "Dragging and dropping files to browser is supported in HTML 5 and requires a compatible browser, such as Mozilla Firefox 3.6 or newer."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2841
#, no-c-format
msgid "Logging"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2845
#, no-c-format
msgid "You can do logging in Vaadin application using the standard <package>java.util.logging</package> facilities. Configuring logging is as easy as putting a file named <filename>logging.properties</filename> in the default package of your Vaadin application (<filename>src</filename> in an Eclipse project or <filename>src/main/java</filename> or <filename>src/main/resources</filename> in a Maven project). This file is read by the <classname>Logger</classname> class when a new instance of it is initialize."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2857
#, no-c-format
msgid "Logging in Apache Tomcat"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2859
#, no-c-format
msgid "For logging Vaadin applications deployed in Apache Tomcat, you do not need to do anything special to log to the same place as Tomcat itself. If you need to write the Vaadin application related messages elsewhere, just add a custom <filename>logging.properties</filename> file to the default package of your Vaadin application."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2867
#, no-c-format
msgid "If you would like to pipe the log messages through another logging solution, see <xref linkend=\"advanced.logging.slf4j\"/> below."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2874
#, no-c-format
msgid "Logging in Liferay"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2876
#, no-c-format
msgid "Liferay mutes logging through <package>java.util.logging</package> by default. In order to enable logging, you need to add a <filename>logging.properties</filename> file of your own to the default package of your Vaadin application. This file should define at least one destination where to save the log messages."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2884
#, no-c-format
msgid "You can also log through SLF4J, which is used in and bundled with Liferay. Follow the instructions in <xref linkend=\"advanced.logging.slf4j\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2892
#, no-c-format
msgid "Piping to Log4j using SLF4J"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:2894
#, no-c-format
msgid "Log4j"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:2895
#, no-c-format
msgid "SLF4J"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2897
#, no-c-format
msgid "Piping output from <package>java.util.logging</package> to Log4j is easy with SLF4J (<link xlink:href=\"http://slf4j.org/\">http://slf4j.org/</link>). The basic way to go about this is to add the SLF4J JAR file as well as the <filename>jul-to-slf4j.jar</filename> file, which implements the bridge from <package>java.util.logging</package>, to SLF4J. You will also need to add a third logging implementation JAR file, that is, <filename>slf4j-log4j12-x.x.x.jar</filename>, to log the actual messages using Log4j. For more info on this, please visit the SLF4J site."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2909
#, no-c-format
msgid "In order to get the <package>java.util.logging</package> to SLF4J bridge installed, you need to add the following snippet of code to your <classname>UI</classname> class at the very top:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2916
#, no-c-format
msgid ""
"<![CDATA[  static {\n"
"    SLF4JBridgeHandler.install();\n"
"  }]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2918
#, no-c-format
msgid "This will make sure that the bridge handler is installed and working before Vaadin starts to process any logging calls."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2924
#, no-c-format
msgid "Please note!"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2926
#, no-c-format
msgid "This can seriously impact on the cost of disabled logging statements (60-fold increase) and a measurable impact on enabled log statements (20% overall increase). However, Vaadin doesn't log very much, so the effect on performance will be negligible."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2936
#, no-c-format
msgid "Using Logger"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2938
#, no-c-format
msgid "You can do logging with a simple pattern where you register a static logger instance in each class that needs logging, and use this logger wherever logging is needed in the class. For example:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2944
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class MyClass {\n"
"  private final static Logger logger =\n"
"          Logger.getLogger(MyClass.class.getName());\n"
"  \n"
"  public void myMethod() {\n"
"    try {\n"
"      // do something that might fail\n"
"    } catch (Exception e) {\n"
"      logger.log(Level.SEVERE, \"FAILED CATASTROPHICALLY!\", e);\n"
"    } \n"
"  }\n"
"}]]>"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:2947
#, no-c-format
msgid "static"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:2948
#, no-c-format
msgid "memory leak"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:2949
#, no-c-format
msgid "PermGen"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2949
#, no-c-format
msgid "Having a <literal>static</literal> logger instance for each class needing logging saves a bit of memory and time compared to having a logger for every logging class instance. However, it could cause the application to leak PermGen memory with some application servers when redeploying the application. The problem is that the <classname>Logger</classname> may maintain hard references to its instances. As the <classname>Logger</classname> class is loaded with a classloader shared between different web applications, references to classes loaded with a per-application classloader would prevent garbage-collecting the classes after redeploying, hence leaking memory. As the size of the PermGen memory where class object are stored is fixed, the leakage will lead to a server crash after many redeployments. The issue depends on the way how the server manages classloaders, on the hardness of the back-references, and may also be different between Java 6 and 7. So, if you experience PermGen issues, or want to play it on the safe side, you should consider using non-static <classname>Logger</classname> instances."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2976
#, no-c-format
msgid "JavaScript Interaction"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2978
#, no-c-format
msgid "Vaadin supports two-direction JavaScript calls from and to the server-side. This allows interfacing with JavaScript code without writing client-side integration code."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:2985
#, no-c-format
msgid "Calling JavaScript"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:2987
#, no-c-format
msgid "You can make JavaScript calls from the server-side with the <methodname>execute()</methodname> method in the <classname>JavaScript</classname> class. You can get a <classname>JavaScript</classname> instance from the current <classname>Page</classname> object with <methodname>getJavaScript()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:2998
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Execute JavaScript in the currently processed page\n"
"Page.getCurrent().getJavaScript().execute(\"alert('Hello')\");]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3000
#, no-c-format
msgid "The <classname>JavaScript</classname> class itself has a static shorthand method <methodname>getCurrent()</methodname> to get the instance for the currently processed page."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3006
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Shorthand\n"
"JavaScript.getCurrent().execute(\"alert('Hello')\");]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3008
#, no-c-format
msgid "The JavaScript is executed after the server request that is currently processed returns. If multiple JavaScript calls are made during the processing of the request, they are all executed sequentially after the request is done. Hence, the JavaScript execution does not pause the execution of the server-side application and you can not return values from the JavaScript."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3019
#, no-c-format
msgid "Handling JavaScript Function Callbacks"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3021
#, no-c-format
msgid "You can make calls with JavaScript from the client-side to the server-side. This requires that you register JavaScript call-back methods from the server-side. You need to implement and register a <classname>JavaScriptFunction</classname> with <methodname>addFunction()</methodname> in the current <classname>JavaScript</classname> object. A function requires a name, with an optional package path, which are given to the <methodname>addFunction()</methodname>. You only need to implement the <methodname>call()</methodname> method to handle calls from the client-side JavaScript."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3034
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[\n"
"JavaScript.getCurrent().addFunction(\"com.example.foo.myfunc\",\n"
"                                    new JavaScriptFunction() {\n"
"    @Override\n"
"    public void call(JSONArray arguments) throws JSONException {\n"
"        Notification.show(\"Received call\");\n"
"    }\n"
"});\n"
"\n"
"Link link = new Link(\"Send Message\", new ExternalResource(\n"
"        \"javascript:com.example.foo.myfunc()\"));]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3036
#, no-c-format
msgid "Parameters passed to the JavaScript method on the client-side are provided in a <classname>JSONArray</classname> passed to the <methodname>call()</methodname> method. The parameter values can be acquired with the <methodname>get()</methodname> method by the index of the parameter, or any of the type-casting getters. The getter must match the type of the passed parameter, or a <classname>JSONException</classname> is thrown."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3046
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[JavaScript.getCurrent().addCallback(\"com.example.foo.myfunc\",\n"
"                                    new JavaScriptCallback() {\n"
"    @Override\n"
"    public void call(JSONArray arguments) throws JSONException {\n"
"        try {\n"
"            String message = arguments.getString(0);\n"
"            int    value   = arguments.getInt(1);\n"
"            Notification.show(\"Message: \" + message +\n"
"                              \", value: \" + value);\n"
"        } catch (JSONException e) {\n"
"            Notification.show(\"Error: \" + e.getMessage());\n"
"        }\n"
"    }\n"
"});\n"
"        \n"
"Link link = new Link(\"Send Message\", new ExternalResource(\n"
"        \"javascript:com.example.foo.myfunc(prompt('Message'), 42)\"));]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3048
#, no-c-format
msgid "The callback mechanism is the same as the RPC mechanism used with JavaScript component integration, as described in <xref linkend=\"gwt.javascript.rpc\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3057
#, no-c-format
msgid "Accessing Session-Global Data"
msgstr ""

#. Tag: emphasis
#: chapter-advanced.xml:3060
#, no-c-format
msgid "This section is mostly up-to-date with Vaadin 7, but has some information which still needs to be updated."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3064
#, no-c-format
msgid "Applications typically need to access some objects from practically all user interface code, such as a user object, a business data model, or a database connection. This data is typically initialized and managed in the UI class of the application, or in the session or servlet."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3071
#, no-c-format
msgid "For example, you could hold it in the UI class as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3075
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class MyUI extends UI {\n"
"    UserData userData;\n"
"\n"
"    public void init() {\n"
"        userData = new UserData();\n"
"    }\n"
"\n"
"    public UserData getUserData() {\n"
"        return userData;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3077
#, no-c-format
msgid "Vaadin offers two ways to access the UI object: with <methodname>getUI()</methodname> method from any component and the global <methodname>UI.getCurrent()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3083
#, no-c-format
msgid "The <methodname>getUI()</methodname> works as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3087
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[data = ((MyUI)component.getUI()).getUserData();]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3089
#, no-c-format
msgid "This does not, however work in many cases, because it requires that the components are attached to the UI. That is not the case most of the time when the UI is still being built, such as in constructors."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3095
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class MyComponent extends CustomComponent {\n"
"    public MyComponent() {\n"
"        // This fails with NullPointerException\n"
"        Label label = new Label(\"Country: \" +\n"
"            getApplication().getLocale().getCountry());\n"
"\n"
"        setCompositionRoot(label);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3098
#, no-c-format
msgid "The global access methods for the currently served servlet, session, and UI allow an easy way to access the data:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3103
#, no-c-format
msgid "<![CDATA[data = ((MyUI) UI.getCurrent()).getUserData();]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3106
#, no-c-format
msgid "The Problem"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3108
#, no-c-format
msgid "The basic problem in accessing session-global data is that the <methodname>getUI()</methodname> method works only after the component has been attached to the application. Before that, it returns <parameter>null</parameter>. This is the case in constructors of components, such as a <classname>CustomComponent</classname>:"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3116
#, no-c-format
msgid "Using a static variable or a singleton implemented with such to give a global access to user session data is not possible, because static variables are global in the entire web application, not just the user session. This can be handy for communicating data between the concurrent sessions, but creates a problem within a session."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3124
#, no-c-format
msgid "The data would be shared by all users and be reinitialized every time a new user opens the application."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3131
#, no-c-format
msgid "Overview of Solutions"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3133
#, no-c-format
msgid "To get the application object or any other global data, you have the following solutions:"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3140
#, no-c-format
msgid "Pass a reference to the global data as a parameter"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3145
#, no-c-format
msgid "Initialize components in <methodname>attach()</methodname> method"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3150
#, no-c-format
msgid "Initialize components in the <methodname>enter()</methodname> method of the navigation view (if using navigation)"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3156
#, no-c-format
msgid "Store a reference to global data using the <emphasis>ThreadLocal Pattern</emphasis>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3162
#, no-c-format
msgid "Each solution is described in the following sections."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3168
#, no-c-format
msgid "Passing References Around"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3170
#, no-c-format
msgid "You can pass references to objects as parameters. This is the normal way in object-oriented programming."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3175
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class MyApplication extends Application {\n"
"    UserData userData;\n"
"\n"
"    public void init() {\n"
"        Window mainWindow = new Window(\"My Window\");\n"
"        setMainWindow(mainWindow);\n"
"\n"
"        userData = new UserData();\n"
"        \n"
"        mainWindow.addComponent(new MyComponent(this));\n"
"    }\n"
"\n"
"    public UserData getUserData() {\n"
"        return userData;\n"
"    }\n"
"}\n"
"\n"
"class MyComponent extends CustomComponent {\n"
"    public MyComponent(MyApplication app) {\n"
"        Label label = new Label(\"Name: \" +\n"
"            app.getUserData().getName());\n"
"\n"
"        setCompositionRoot(label);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3177
#, no-c-format
msgid "If you need the reference in other methods, you either have to pass it again as a parameter or store it in a member variable."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3182
#, no-c-format
msgid "The problem with this solution is that practically all constructors in the application need to get a reference to the application object, and passing it further around in the classes is another hard task."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3190
#, no-c-format
msgid "Overriding <methodname>attach()</methodname>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3192
#, no-c-format
msgid "The <methodname>attach()</methodname> method is called when the component is attached to the application component through containment hierarchy. The <methodname>getApplication()</methodname> method always works."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3199
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class MyComponent extends CustomComponent {\n"
"    public MyComponent() {\n"
"        // Must set a dummy root in constructor\n"
"        setCompositionRoot(new Label(\"\"));\n"
"    }\n"
"\n"
"    @Override\n"
"    public void attach() {    \n"
"        Label label = new Label(\"Name: \" +\n"
"            ((MyApplication)component.getApplication())\n"
"                .getUserData().getName());\n"
"\n"
"        setCompositionRoot(label);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3201
#, no-c-format
msgid "While this solution works, it is slightly messy. You may need to do some initialization in the constructor, but any construction requiring the global data must be done in the <methodname>attach()</methodname> method. Especially, <classname>CustomComponent</classname> requires that the <methodname>setCompositionRoot()</methodname> method is called in the constructor. If you can't create the actual composition root component in the constructor, you need to use a temporary dummy root, as is done in the example above."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3212
#, no-c-format
msgid "Using <methodname>getApplication()</methodname> also needs casting if you want to use methods defined in your application class."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3219
#, no-c-format
msgid "ThreadLocal Pattern"
msgstr ""

#. Tag: primary
#: chapter-advanced.xml:3221
#, no-c-format
msgid "ThreadLocal pattern"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3223
#, no-c-format
msgid "Vaadin uses the ThreadLocal pattern for allowing global access to the <classname>&uiclass;</classname>, and <classname>Page</classname> objects of the currently processed server request with a static <methodname>getCurrent()</methodname> method in all the respective classes. This section explains why the pattern is used in Vaadin and how it works. You may also need to reimplement the pattern for some purpose."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3234
#, no-c-format
msgid "The ThreadLocal pattern gives a solution to the global access problem by solving two sub-problems of static variables."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3239
#, no-c-format
msgid "As the first problem, assume that the servlet container processes requests for many users (sessions) sequentially. If a static variable is set in a request belonging one user, it could be read or re-set by the next incoming request belonging to another user. This can be solved by setting the global reference at the beginning of each HTTP request to point to data of the current user, as illustrated in Figure <xref linkend=\"figure.advanced.global.threadlocal.sequentiality\" xrefstyle=\"select:labelnumber\"/>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3251
#, no-c-format
msgid "Switching a static (or ThreadLocal) reference during sequential processing of requests"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3275
#, no-c-format
msgid "The second problem is that servlet containers typically do thread pooling with multiple worker threads that process requests. Therefore, setting a static reference would change it in all threads running concurrently, possibly just when another thread is processing a request for another user. The solution is to store the reference in a thread-local variable instead of a static. You can do so by using the <classname>ThreadLocal</classname> class in Java for the switch reference."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3286
#, no-c-format
msgid "Switching <classname>ThreadLocal</classname> references during concurrent processing of requests"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3344
#, no-c-format
msgid "Server Push"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3346
#, no-c-format
msgid "When you need to update a UI from another UI, possibly of another user, or from a background thread running in the server, you usually want to have the update show immediately, not when the browser happens to make the next server request. For this purpose, you can use <emphasis>server push</emphasis> that sends the data to the browser immediately. Push is based on a client-server connection, usually a WebSocket connection, that the client establishes and the server can then use to send updates to the client."
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3356
#, no-c-format
msgid "The server-client communication is done by default with a WebSocket connection if the browser and the server support it. If not, Vaadin will fall back to a method supported by the browser. Vaadin Push uses a custom build of the <link xlink:href=\"https://github.com/Atmosphere/atmosphere\">Atmosphere framework</link> for client-server communication."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3365
#, no-c-format
msgid "Installing the Push Support"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3367
#, no-c-format
msgid "The server push support in Vaadin requires the separate Vaadin Push library. It is included in the installation package as <filename>vaadin-push.jar</filename>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3374
#, no-c-format
msgid "Retrieving with Ivy"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3376
#, no-c-format
msgid "With Ivy, you can get it with the following declaration in the <filename>ivy.xml</filename>:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3381
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[<dependency org=\"com.vaadin\" name=\"vaadin-push\"\n"
"            rev=\"&vaadin.version;\" conf=\"default->default\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3383
#, no-c-format
msgid "In some servers, you may need to exlude a <literal>sl4j</literal> dependency as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3388
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[<dependency org=\"com.vaadin\" name=\"vaadin-push\"\n"
"            rev=\"&vaadin.version;\" conf=\"default->default\">\n"
"    <exclude org=\"org.slf4j\" name=\"slf4j-api\"/>\n"
"</dependency>]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3390
#, no-c-format
msgid "Pay note that the Atmosphere library is a bundle, so if you retrieve the libraries with Ant, for example, you need to retrieve <literal>type=\"jar,bundle\"</literal>."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3398
#, no-c-format
msgid "Retrieving with Maven"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3400
#, no-c-format
msgid "In Maven, you can get the push library with the following dependency in the POM:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3405
#, no-c-format
msgid ""
"<![CDATA[<dependency>\n"
"    <groupId>com.vaadin</groupId>\n"
"    <artifactId>vaadin-push</artifactId>\n"
"    <version>${vaadin.version}</version>\n"
"</dependency>]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3410
#, no-c-format
msgid "Enabling Push for a UI"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3412
#, no-c-format
msgid "To enable server push, you need to define the push mode either in the deployment descriptor or with the <classname>@Push</classname> annotation for the UI."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3419
#, no-c-format
msgid "Push Modes"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3421
#, no-c-format
msgid "You can use server push in two modes: <literal>automatic</literal> and <literal>manual</literal>. The automatic mode pushes changes to the browser automatically after access() finishes. With the manual mode, you can do the push explicitly with <methodname>push()</methodname>, which allows more flexibility."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3431
#, no-c-format
msgid "The <classname>@Push</classname> annotation"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3433
#, no-c-format
msgid "You can enable server push for a UI with the <classname>@Push</classname> annotation as follows. It defaults to automatic mode (<parameter>PushMode.AUTOMATIC</parameter>)."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3439
#, no-c-format
msgid ""
"<![CDATA[@Push\n"
"public class PushyUI extends UI {]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3441
#, no-c-format
msgid "To enable manual mode, you need to give the <parameter>PushMode.MANUAL</parameter> parameter as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3446
#, no-c-format
msgid ""
"<![CDATA[@Push(PushMode.MANUAL)\n"
"public class PushyUI extends UI {]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3450
#, no-c-format
msgid "Servlet Configuration"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3452
#, no-c-format
msgid "You can enable the server push and define the push mode also in the servlet configuration with the <parameter>pushmode</parameter> parameter for the servlet in the <filename>web.xml</filename> deployment descriptor. If you use a Servlet 3.0 compatible server, you also want to enable asynchronous processing with the <literal>async-supported</literal> parameter. Note the use of Servlet 3.0 schema in the deployment descriptor."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3463
#, no-c-format
msgid ""
"<?pocket-size 70% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;web-app\n"
"  id=\"WebApp_ID\" version=\"<emphasis role=\"bold\">3.0</emphasis>\"\n"
"  xmlns=\"http://java.sun.com/xml/ns/j2ee\" \n"
"  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n"
"  xsi:schemaLocation=\"<emphasis role=\"bold\">http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd</emphasis>\"&gt;\n"
"  &lt;servlet&gt;\n"
"    &lt;servlet-name&gt;Pushy UI&lt;/servlet-name&gt;\n"
"    &lt;servlet-class&gt;\n"
"        com.vaadin.server.VaadinServlet&lt;/servlet-class&gt;\n"
"\n"
"    &lt;init-param&gt;\n"
"        &lt;param-name&gt;UI&lt;/param-name&gt;\n"
"        &lt;param-value&gt;<emphasis role=\"bold\">com.example.my.PushyUI</emphasis>&lt;/param-value&gt;\n"
"    &lt;/init-param&gt;\n"
"\n"
"    &lt;!-- Enable server push --&gt;\n"
"    &lt;init-param&gt;\n"
"      &lt;param-name&gt;pushmode&lt;/param-name&gt;\n"
"      &lt;param-value&gt;<emphasis role=\"bold\">automatic</emphasis>&lt;/param-value&gt;\n"
"    &lt;/init-param&gt;\n"
"    &lt;async-supported&gt;<emphasis role=\"bold\">true</emphasis>&lt;/async-supported&gt;\n"
"  &lt;/servlet&gt;\n"
"&lt;/web-app&gt;"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3467
#, no-c-format
msgid "Accessing UI from Another Thread"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3469
#, no-c-format
msgid "Making changes to a <classname>UI</classname> object from another thread and pushing them to the browser requires locking the user session when accessing the UI. Otherwise, the UI update done from another thread could conflict with a regular event-driven update and cause either data corruption or deadlocks. Because of this, you may only access an UI using the <methodname>access()</methodname> method, which locks the session to prevent conflicts. It takes a <interfacename>Runnable</interfacename> which it executes as its parameter."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3484
#, no-c-format
msgid ""
"<![CDATA[ui.access(new Runnable() {\n"
"    @Override\n"
"    public void run() {\n"
"        series.add(new DataSeriesItem(x, y));\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3486
#, no-c-format
msgid "If the push mode is <literal>manual</literal>, you need to push the pending UI changes to the browser explicitly with the <methodname>push()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3492
#, no-c-format
msgid ""
"<![CDATA[ui.access(new Runnable() {\n"
"    @Override\n"
"    public void run() {\n"
"        series.add(new DataSeriesItem(x, y));\n"
"        ui.push();\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3495
#, no-c-format
msgid "Below is a complete example of a case where we make UI changes from another thread."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3501
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class PushyUI extends UI {\n"
"    Chart chart = new Chart(ChartType.AREASPLINE);\n"
"    DataSeries series = new DataSeries();\n"
"    \n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        chart.setSizeFull();\n"
"        setContent(chart);\n"
"        \n"
"        // Prepare the data display\n"
"        Configuration conf = chart.getConfiguration();\n"
"        conf.setTitle(\"Hot New Data\");\n"
"        conf.setSeries(series);\n"
"        \n"
"        // Start the data feed thread\n"
"        new FeederThread().start();\n"
"    }\n"
"    \n"
"    class FeederThread extends Thread {\n"
"        int count = 0;\n"
"        \n"
"        @Override\n"
"        public void run() {\n"
"            try {\n"
"                // Update the data for a while\n"
"                while (count < 100) {\n"
"                    Thread.sleep(1000);\n"
"                \n"
"                    access(new Runnable() {\n"
"                        @Override\n"
"                        public void run() {\n"
"                            double y = Math.random();\n"
"                            series.add(\n"
"                                new DataSeriesItem(count++, y),\n"
"                                true, count > 10);\n"
"                        }\n"
"                    });\n"
"                }\n"
"\n"
"                // Inform that we have stopped running\n"
"                access(new Runnable() {\n"
"                    @Override\n"
"                    public void run() {\n"
"                        setContent(new Label(\"Done!\"));\n"
"                    }\n"
"                });\n"
"            } catch (InterruptedException e) {\n"
"                e.printStackTrace();\n"
"            }\n"
"        }\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3503
#, no-c-format
msgid "When sharing data between UIs or user sessions, you need to consider the message-passing mechanism more carefully, as explained next."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3510
#, no-c-format
msgid "Broadcasting to Other Users"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3512
#, no-c-format
msgid "Broadcasting messages to be pushed to UIs in other user sessions requires having some sort of message-passing mechanism that sends the messages to all UIs that register as recipients. As processing server requests for different UIs is done concurrently in different threads of the application server, locking the threads properly is very important to avoid deadlock situations."
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3522
#, no-c-format
msgid "The Broadcaster"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3524
#, no-c-format
msgid "The standard pattern for sending messages to other users is to use a <emphasis>broadcaster</emphasis> singleton that registers the UIs and broadcasts messages to them safely. To avoid deadlocks, it is recommended that the messages should be sent through a message queue in a separate thread. Using a Java <classname>ExecutorService</classname> running in a single thread is usually the easiest and safest way."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3535
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class Broadcaster implements Serializable {\n"
"    static ExecutorService executorService =\n"
"        Executors.newSingleThreadExecutor();\n"
"\n"
"    public interface BroadcastListener {\n"
"        void receiveBroadcast(String message);\n"
"    }\n"
"    \n"
"    private static LinkedList<BroadcastListener> listeners =\n"
"        new LinkedList<BroadcastListener>();\n"
"    \n"
"    public static synchronized void register(\n"
"            BroadcastListener listener) {\n"
"        listeners.add(listener);\n"
"    }\n"
"    \n"
"    public static synchronized void unregister(\n"
"            BroadcastListener listener) {\n"
"        listeners.remove(listener);\n"
"    }\n"
"    \n"
"    public static synchronized void broadcast(\n"
"            final String message) {\n"
"        for (final BroadcastListener listener: listeners)\n"
"            executorService.execute(new Runnable() {\n"
"                @Override\n"
"                public void run() {\n"
"                    listener.receiveBroadcast(message);\n"
"                }\n"
"            });\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3539
#, no-c-format
msgid "Receiving Broadcasts"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3541
#, no-c-format
msgid "The receivers need to implement the receiver interface and register to the broadcaster to receive the broadcasts. A listener should be unregistered when the UI expires. When updating the UI in a receiver, it should be done safely as described earlier, by executing the update through the <methodname>access()</methodname> method of the UI."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3550
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[@Push\n"
"public class PushAroundUI extends UI\n"
"       implements Broadcaster.BroadcastListener {\n"
"    \n"
"    VerticalLayout messages = new VerticalLayout();\n"
"\n"
"    @Override\n"
"    protected void init(VaadinRequest request) {\n"
"        ... build the UI ...\n"
"        \n"
"        // Register to receive broadcasts\n"
"        Broadcaster.register(this);\n"
"    }\n"
"\n"
"    // Must also unregister when the UI expires    \n"
"    @Override\n"
"    public void detach() {\n"
"        Broadcaster.unregister(this);\n"
"        super.detach();\n"
"    }\n"
"\n"
"    @Override\n"
"    public void receiveBroadcast(final String message) {\n"
"        // Must lock the session to execute logic safely\n"
"        access(new Runnable() {\n"
"            @Override\n"
"            public void run() {\n"
"                // Show it somehow\n"
"                messages.addComponent(new Label(message));\n"
"            }\n"
"        });\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-advanced.xml:3554
#, no-c-format
msgid "Sending Broadcasts"
msgstr ""

#. Tag: para
#: chapter-advanced.xml:3556
#, no-c-format
msgid "To send broadcasts with a broadcaster singleton, such as the one described above, you would only need to call the <methodname>broadcast()</methodname> method as follows."
msgstr ""

#. Tag: programlisting
#: chapter-advanced.xml:3563
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[final TextField input = new TextField();\n"
"sendBar.addComponent(input);\n"
"\n"
"Button send = new Button(\"Send\");\n"
"send.addClickListener(new ClickListener() {\n"
"    @Override\n"
"    public void buttonClick(ClickEvent event) {\n"
"        // Broadcast the message\n"
"        Broadcaster.broadcast(input.getValue());\n"
"        \n"
"        input.setValue(\"\");\n"
"    }\n"
"});]]>"
msgstr ""
